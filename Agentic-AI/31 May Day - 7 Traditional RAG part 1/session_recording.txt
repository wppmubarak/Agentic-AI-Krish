WEBVTT

1
00:02:48.820 --> 00:02:53.359
Sunny Savita: Hey, Hi, good morning. Everyone. So Crystal is joining within 5Â min.

2
00:03:11.640 --> 00:03:17.420
Sunny Savita: Yeah, guys. So we'll start within 5Â min. Chris, sir, will be joining. Okay, in the next 5Â min.

3
00:03:17.850 --> 00:03:18.800
Sunny Savita: Thank you.

4
00:09:27.520 --> 00:09:29.639
Sunny Savita: Yeah. Hi, everyone. I'm audible.

5
00:09:31.478 --> 00:09:44.759
Sunny Savita: So guys, Chris is joining within 5Â min. He just a message to me until what I can do until I can give you the walkthrough of the dashboard. Can you tell me, guys, how many of you. You are a new joining

6
00:09:49.860 --> 00:09:51.589
Sunny Savita: you can mention in the chat.

7
00:09:51.710 --> 00:09:57.140
Sunny Savita: Okay? You cannot see me just a second. Give me a moment, guys, I am.

8
00:10:04.770 --> 00:10:09.229
Sunny Savita: Yeah. Can you? See me now, am I visible to all of you? Yes or no?

9
00:10:09.750 --> 00:10:11.389
Sunny Savita: Yeah. So good morning.

10
00:10:11.590 --> 00:10:15.040
Sunny Savita: Good morning, guys, yeah, okay, perfect.

11
00:10:15.040 --> 00:10:25.779
Sunny Savita: So until let me give you the walkthrough of the dashboard and then we'll start with the session. So I hope you know the agenda of the session. So today, we are going to discuss the vector, database

12
00:10:26.112 --> 00:10:44.727
Sunny Savita: which is a part of the rag based system. Okay, so guys, this is the I think. Like, you all have access of the dashboard. So once you will go through the dashboard right so over the dashboard itself. You will find out your all the recordings. Okay, so this is the section

13
00:10:45.170 --> 00:11:06.040
Sunny Savita: where actually, we have uploaded all the session with respect to the prerequisite. So we have uploaded a section, a session related to the python machine learning. Okay, deep learning is here. And the generative. A playlist is also over here. So if you don't know about all this topic, you can go through with it. And here itself, you will find out the live session.

14
00:11:06.040 --> 00:11:30.759
Sunny Savita: Okay, so this is all the live session. So 1st session we took on 10th of May, then the last session was on 25th of May. Okay, so so far, there is 6 session. And in this particular session we just discuss about the lengthen. Okay in the like, last 2 days we just discussed about the lengthen. And if you will go through with any sort of a session, okay? So you will be able to see the recording of it.

15
00:11:30.910 --> 00:11:33.649
Sunny Savita: And apart from that, here is our resources.

16
00:11:33.840 --> 00:11:34.820
Sunny Savita: Got it?

17
00:11:35.660 --> 00:11:37.179
Sunny Savita: It is clear or not.

18
00:11:37.280 --> 00:11:48.709
Sunny Savita: The dashboard thing is clear. Whoever has joined this week. Okay, whoever is a new joining, you can navigate your dashboard. I hope you all have access of the dashboard.

19
00:11:48.710 --> 00:12:08.100
Sunny Savita: Please check out guys once. You will enroll in the course you will get access of the dashboard. Just go through with the dashboard and watch the recording. If you haven't seen so far we haven't completed any major thing. We just completed a link chain. And all the resources on all, everything you will find out over here. Understood?

20
00:12:12.130 --> 00:12:13.579
Sunny Savita: It's clear or not.

21
00:12:14.030 --> 00:12:16.819
Sunny Savita: I think. Chris, sir, is also joined. Sir, are you there?

22
00:12:18.290 --> 00:12:21.710
Krish Naik: Yes, honey, see, resources are shared in this resources.

23
00:12:21.710 --> 00:12:24.680
Sunny Savita: Hold on just a second. So I think.

24
00:12:26.510 --> 00:12:27.520
Krish Naik: Am I audible.

25
00:12:30.970 --> 00:12:32.779
Krish Naik: guys? Am I audible? Yeah.

26
00:12:32.780 --> 00:12:34.110
Sunny Savita: Yeah, sir, you are audible. Now.

27
00:12:34.730 --> 00:12:35.380
Krish Naik: Okay.

28
00:12:35.540 --> 00:12:49.620
Krish Naik: Okay, so I'm just saying that people who are asking where the resources are shared. You can see over here in the resources section right? Like this, description resources is over here, for every class resources will be shared in attached in this way. Okay.

29
00:12:51.560 --> 00:12:55.840
Krish Naik: okay, just give me a second. Now you can see me also. Right?

30
00:12:57.010 --> 00:12:58.520
Sunny Savita: Yes, sir, you are visible.

31
00:12:59.290 --> 00:13:03.710
Krish Naik: Okay, perfect. Just give me 2 seconds. So that

32
00:13:25.200 --> 00:13:28.070
Krish Naik: okay, in last class, what all things we discussed everyone.

33
00:13:37.490 --> 00:13:41.249
Krish Naik: I think, till data transformation. We have done each and everything. Right?

34
00:13:47.480 --> 00:13:53.420
Krish Naik: Yeah, okay, did everybody do the assignments?

35
00:13:56.230 --> 00:13:57.700
Krish Naik: Yes or no?

36
00:14:07.453 --> 00:14:13.449
Krish Naik: Data injection, recursive splitter? But the assignments that we have given. Did you do it or not?

37
00:14:13.670 --> 00:14:15.170
Krish Naik: 1st of all, tell me, that.

38
00:14:18.690 --> 00:14:20.600
Krish Naik: I hope everybody has done it

39
00:14:33.960 --> 00:14:37.390
Krish Naik: okay.

40
00:14:38.746 --> 00:14:45.280
Krish Naik: we need answer from you so that we can compare with our solution and logic. What answer do you require?

41
00:14:50.200 --> 00:14:58.679
Krish Naik: I've explored semantic checker index lunch, and I missed the last week class. Very good. We need answers from you. What answer do you need? Satish

42
00:15:01.750 --> 00:15:06.059
Krish Naik: assignment which you had given? You need answers from me also

43
00:15:07.830 --> 00:15:22.770
Krish Naik: the questions that had actually given. From that also you require answers again, assignments. I'll not help you out. See in everywhere you go. You have to do the assignments right, whatever assignments you are specifically given. Okay. Otherwise I'll not give you assignments.

44
00:15:22.880 --> 00:15:26.430
Krish Naik: Okay, otherwise I'll do everything in front of you. Okay?

45
00:15:28.150 --> 00:15:33.053
Krish Naik: Oh, okay, perfect. Let's share my screen.

46
00:15:33.700 --> 00:15:39.370
Krish Naik: And then we will just go ahead and discuss what all things we are basically going to.

47
00:15:40.160 --> 00:15:45.440
Krish Naik: So today, traditionally, we are basically going to start.

48
00:15:45.620 --> 00:16:14.409
Krish Naik: See? Already, with respect to rag, right? We have started this data ingestion, then data transformation in which we saw recursive text splitter. Then we saw character text splitter. Then we saw Json data text splitter. Okay, all these things. Now it's time that we start going ahead. One more step. And this step is something called as embeddings. Okay, so I'll create a new folder over here inside my second folder. That is 2.3,

49
00:16:14.940 --> 00:16:17.410
Krish Naik: which is called as embeddings.

50
00:16:17.570 --> 00:16:22.540
Krish Naik: Now, can anybody tell me what exactly is embeddings?

51
00:16:23.770 --> 00:16:26.189
Krish Naik: What do we do? Exactly in embeddings?

52
00:16:29.750 --> 00:16:37.019
Krish Naik: Yeah, see over here, as you all know, in this graph, right

53
00:16:38.690 --> 00:16:46.330
Krish Naik: in this graph, you'll be able to see that we have completed data ingestion in which we discussed about the document loader.

54
00:16:46.530 --> 00:16:59.560
Krish Naik: You know how to probably play with Pdfs. You should now probably know how to play with Wiki are safe. All these things right? Then we also completed text, splitter the main aim of the text. Splitter was basically to convert it to chunks.

55
00:17:00.230 --> 00:17:08.589
Krish Naik: Now, before we go ahead and understand about vector database, it is necessary that we try to understand something about vector embeddings. Yes or no.

56
00:17:09.050 --> 00:17:22.560
Krish Naik: Is vector embeddings important or not? Yes, it is definitely important, right? And with the without vector embedding. See? Before you go ahead and store anything into the vector database in the vector database you need to store in the form of

57
00:17:22.700 --> 00:17:25.989
Krish Naik: text. Sorry in the form of vectors, yes or no.

58
00:17:26.359 --> 00:17:46.090
Krish Naik: Yes. What do we store in vector database? We store vectors right? Some kind of numerical values. Okay, now, to convert text into vectors, we need to apply different kind of embeddings. Right? And with respect to this kind of embeddings, we'll try to see that what all different embeddings techniques are available with us. Okay.

59
00:17:46.430 --> 00:17:58.499
Krish Naik: now, as usual, what we do is that whenever we go right we just go ahead and search for lang chain embeddings again. Right? So. Documentation is very, very good in this.

60
00:17:58.710 --> 00:18:05.049
Krish Naik: but it is too much like intermixed right? Still, they are making the documents properly.

61
00:18:05.300 --> 00:18:13.860
Krish Naik: Now with respect to embedding models. See, there are different different components. Right? Document loaders vector store is nothing but your vector database.

62
00:18:14.110 --> 00:18:19.490
Krish Naik: Now, once I go to this embedding models, do you see how many different types of embedding model it supports.

63
00:18:19.610 --> 00:18:20.710
Krish Naik: Yes or no.

64
00:18:20.820 --> 00:18:39.659
Krish Naik: everybody see it supports azure. It gives you the code with respect to azure. If you want to try the embeddings with Google Gemini, it goes and supports you. With respect to this, if you want to go ahead and tie with Google vertex. It will even provide you this. If you want to go ahead and try with aws in aws, there is a bedrock.

65
00:18:39.860 --> 00:18:42.069
Krish Naik: You can go ahead and try with this.

66
00:18:42.720 --> 00:18:47.140
Krish Naik: Similarly, you have with hugging face. Then you have with Olama.

67
00:18:47.270 --> 00:18:55.009
Krish Naik: Anybody knows about Olama. Olama basically means in the local. Also, you can specifically go ahead and run things. Okay.

68
00:18:55.090 --> 00:19:18.899
Krish Naik: then you have something like coher. You have, like Mistral AI. You have Nomic, you have Nvidia, you have voyage. AI. It's all up to you, whichever you want to use, and if you don't have anything, let's say you don't have all the access of all these things. You can also go ahead and use this deterministic fake embedding. Okay, which will be able to create the embeddings itself.

69
00:19:18.990 --> 00:19:21.670
Krish Naik: Okay, make sense. Yeah.

70
00:19:22.020 --> 00:19:23.380
Krish Naik: Make sense, everyone.

71
00:19:24.560 --> 00:19:36.169
Krish Naik: I hope everybody, it is making sense what I'm actually talking about. Okay, now, in this particular embedding, we will go ahead, guys, is my voice clear enough? Yeah.

72
00:19:36.380 --> 00:19:39.390
Krish Naik: The things that I'm discussing. Is it clear?

73
00:19:39.600 --> 00:19:44.240
Krish Naik: Yeah. Is my voice clear itself? It is loud enough, right?

74
00:19:45.130 --> 00:19:51.900
Krish Naik: I'm using a 25 k. Mic. I think it should not, it should be very, very clear. Okay.

75
00:19:52.610 --> 00:19:57.209
Krish Naik: So for some people's, our voice is not clear. One guy is saying, I don't know.

76
00:19:57.760 --> 00:19:58.540
Krish Naik: Okay.

77
00:19:59.900 --> 00:20:10.399
Krish Naik: perfect. So let's go ahead and start working on this embedding techniques. Okay? So I will just go ahead and create my embeddings. Dot, IP, y and B file. Okay.

78
00:20:11.390 --> 00:20:21.940
Krish Naik: Now, inside this I will show you 2 different types of embeddings, which, and then you'll get a clear idea like how to specifically go ahead and use any kind of embeddings itself. Okay.

79
00:20:22.240 --> 00:20:36.060
Krish Naik: now, 1st of all, our embedding technique that we are basically going to use. Okay, so I'll just go ahead and write embeddings away, and please make sure that you don't write anything. I will give you the materials, everything. Then you can go ahead and practice

80
00:20:36.570 --> 00:20:46.820
Krish Naik: the main aim of embeddings is basically to convert text into vectors. Okay.

81
00:20:47.360 --> 00:21:07.069
Krish Naik: text into vectors. This is what is the main aim out there with respect to embeddings. Okay, now, 1st of all, what I will do is that I will show you how you can perform embeddings with the help of Openai Api Key. Okay, Openai embeddings are really, really amazing, really accurate.

82
00:21:07.190 --> 00:21:28.989
Krish Naik: That basically means if Openai, if you use Openai basically to convert our text into vectors, it gives you a very good, accurate vectors itself. It is not free. It is soft paid, you know, because based on Openai Api key. The $5 that I've told you, you can use any of the embedding techniques, and you can directly use them. Okay.

83
00:21:29.140 --> 00:21:34.730
Krish Naik: now, 1st of all, what I will do, what we need to do. 1st of all, I will just go ahead and import my OS.

84
00:21:34.970 --> 00:21:38.450
Krish Naik: So I'll go ahead and select the kernel. Okay?

85
00:21:40.416 --> 00:21:46.250
Krish Naik: Sir, please present and show the editor with your video overlay in the corner.

86
00:21:47.970 --> 00:21:51.279
Krish Naik: So right now everything will come in the corner, only no.

87
00:21:54.130 --> 00:21:56.689
Krish Naik: Are you able to see my face? Yeah.

88
00:22:00.070 --> 00:22:00.870
Krish Naik: Yeah.

89
00:22:03.060 --> 00:22:04.509
Krish Naik: Already in the corner.

90
00:22:04.640 --> 00:22:08.240
Krish Naik: If you are moving it somewhere, then okay.

91
00:22:08.680 --> 00:22:17.799
Krish Naik: import OS, then from dot env I'm going to import load underscore dot env. So why do we do this?

92
00:22:18.400 --> 00:22:35.260
Krish Naik: Because if I want to use my Openai Api key, I have to probably go ahead and import all the specific libraries. Okay, yeah. So for this. I have to go ahead and do this, so I'll load underscore dot env. Okay.

93
00:22:35.420 --> 00:22:39.370
Krish Naik: so once this is done, I what happened? What happened?

94
00:22:39.770 --> 00:22:42.070
Krish Naik: Oh, spelling. Mistake.

95
00:22:43.860 --> 00:22:51.629
Krish Naik: Morning morning errors. Okay, so now this is what it is. Your load underscore dot env is ready. Then.

96
00:22:52.230 --> 00:23:05.679
Krish Naik: since I'm going to use open AI key. So for that, I need to just go ahead and write, OS, dot environment, open. AI underscore Api key. OS, dot, get env. Okay? And this is basically done.

97
00:23:06.110 --> 00:23:06.960
Krish Naik: Okay.

98
00:23:07.130 --> 00:23:21.770
Krish Naik: Now, here, you'll be able to see that my entire Openai Api key has got imported. Okay, the reason why I'm doing this is that so that I can use openai embeddings. Now, the best way to probably go ahead and understand is that just go ahead and

99
00:23:22.030 --> 00:23:44.380
Krish Naik: click on Openai. You can see the 1st step. It is that it is basically importing this Openai Api key. And in the next step you will be able to see that it will just go ahead and import this Openai embeddings. And it is initializing this openai embeddings with this model, you can change these models based on the documentation that is available. Okay, but now let's go ahead and use this. So I will copy this code.

100
00:23:44.640 --> 00:23:48.920
Krish Naik: I will paste it over here. Okay, simple.

101
00:23:49.030 --> 00:23:54.260
Krish Naik: So everybody is able to understand this particular code here. What we are basically doing.

102
00:23:54.410 --> 00:24:05.309
Krish Naik: we are importing openai embeddings. Okay? And then from this Openai embeddings, we are importing this particular model, which is text embedding 3 large clear.

103
00:24:05.490 --> 00:24:30.270
Krish Naik: Now, if you just go ahead and see this, it will be an object of an Openai embedding. Okay, so how much does Openai cost? It depends on the number of tokens that is basically getting generated. Okay, Costa, you can just go ahead and see the open AI page where it talks about the cost. I've already discussed about that. Okay? If not again, just go over here.

104
00:24:30.600 --> 00:24:34.860
Krish Naik: Open AI models, cost or pricing.

105
00:24:35.140 --> 00:24:47.240
Krish Naik: I'll just go ahead and write like this, right? So if you just go ahead and see in Api pricing with respect to all the specific models you'll be able to see right how much everything is basically costing. Okay.

106
00:24:48.200 --> 00:24:50.899
Krish Naik: you just need to probably go ahead and explore this.

107
00:24:51.730 --> 00:24:58.240
Krish Naik: Okay, yes, Pratab, what is your question. Please say me.

108
00:24:59.500 --> 00:25:04.360
Krish Naik: what is your question? Pratap class will not go ahead unless until I answer you.

109
00:25:07.540 --> 00:25:16.330
Krish Naik: Tell me, yes, Pratap, go ahead. Ask a question.

110
00:25:16.780 --> 00:25:20.099
Krish Naik: Embeddings. Okay, what pratap embeddings, what?

111
00:25:20.530 --> 00:25:22.390
Krish Naik: I will just return embeddings.

112
00:25:25.520 --> 00:25:27.980
Krish Naik: should we?

113
00:25:28.510 --> 00:25:38.899
Krish Naik: You can use openai embeddings. You can use any kind of embeddings. I will show you different different kind of embeddings. But the most accurate embeddings is basically openai embeddings. Okay.

114
00:25:39.470 --> 00:25:45.499
Krish Naik: you can use different different embeddings. No worries. Okay. And I'll also show you different. Different embeddings.

115
00:25:46.360 --> 00:25:52.299
Krish Naik: Okay, now, the next thing will be that I will just go ahead and use a text.

116
00:25:52.570 --> 00:25:53.430
Krish Naik: Okay.

117
00:25:54.310 --> 00:26:00.199
Krish Naik: I will just say, Hey, let's go ahead and consider this text, and I'll say, Hey, this is a

118
00:26:00.350 --> 00:26:09.129
Krish Naik: tutorial on open AI embeddings. Okay, so let's say, this is my sentence over here.

119
00:26:10.700 --> 00:26:16.620
Krish Naik: This is my text on Openai embeddings. Now, what I'm actually going to do is that

120
00:26:16.740 --> 00:26:25.020
Krish Naik: I will convert this text into vectors. Okay? So in order to convert this text into vectors. I know I will be using my embedding.

121
00:26:25.620 --> 00:26:29.110
Krish Naik: so I'll say, Hey, embeddings dot embed.

122
00:26:29.530 --> 00:26:38.879
Krish Naik: and then I will just go. Sorry it should be embed. Underscore query. So if you use this function embed underscore query and give the text over here.

123
00:26:39.310 --> 00:26:45.740
Krish Naik: then you will be able to see that I will define one variable which is called as query, result, okay?

124
00:26:46.030 --> 00:26:49.869
Krish Naik: And then I will just go ahead and write query underscore result.

125
00:26:50.240 --> 00:26:54.949
Krish Naik: Now, if I execute this. Now see the output. Everybody observe the output. Okay.

126
00:26:55.200 --> 00:26:58.900
Krish Naik: and you will be able to see some output over here.

127
00:26:59.150 --> 00:27:02.459
Krish Naik: Okay, do you see everybody this.

128
00:27:03.980 --> 00:27:05.719
Krish Naik: Yeah, do you see this?

129
00:27:07.080 --> 00:27:10.879
Krish Naik: Yeah. So these are nothing but vectors. Okay.

130
00:27:11.080 --> 00:27:19.280
Krish Naik: now, let's go ahead and understand what we have basically done. See, embeddings is nothing. But it is basically your object of opening embeddings.

131
00:27:19.560 --> 00:27:42.580
Krish Naik: And we use this particular function. Dot embed underscore query. This function is basically used to take a text and convert that into vectors there is no function such as embed. Okay, so that is the reason we have written embed underscore query, okay, so it is just a function which takes a text and convert into vectors. Now, see, do you see these vectors

132
00:27:42.730 --> 00:27:46.779
Krish Naik: right? Now observe one very important thing. Okay.

133
00:27:46.980 --> 00:27:52.179
Krish Naik: if I just go ahead and see the length of query underscore results.

134
00:27:53.520 --> 00:27:58.500
Krish Naik: Sorry is it? Query underscore result or result? Okay, not results.

135
00:28:00.900 --> 00:28:04.160
Krish Naik: So now you can see 3, 0 7, 2.

136
00:28:04.950 --> 00:28:15.319
Krish Naik: Does this mean that any sentence that we give through Openai embeddings? It converts into a vector. Of size 3, 0 7, 2.

137
00:28:15.600 --> 00:28:25.429
Krish Naik: Yes, any sentence, any bigger sentence. Right? If I'm giving it to my openai embedding, it is basically converting

138
00:28:26.280 --> 00:28:37.940
Krish Naik: into vectors of size 3, 0 7 2 dimensions. Okay, so that basically means it's just like, see if you have some knowledge about Nlp and embeddings.

139
00:28:38.200 --> 00:28:51.699
Krish Naik: The reason why this length is there because this entire model may be trained on something wherein, if you are able to have 2 different vectors, right? If I have another statement, let's say that I will just go ahead and

140
00:28:52.560 --> 00:28:58.949
Krish Naik: copy this, and now you'll be able to see that I will add one more line.

141
00:28:59.370 --> 00:29:01.960
Krish Naik: My name is Krish.

142
00:29:02.210 --> 00:29:09.639
Krish Naik: Now tell me what is basically going to happen over here? Will the number of vectors increase, or will the number of vectors stay? Same?

143
00:29:12.720 --> 00:29:20.200
Krish Naik: Let's execute this. Okay, let's execute this. Now. Also, you see, if I go ahead and see the length of

144
00:29:20.940 --> 00:29:24.429
Krish Naik: query underscore result, it is going to be same.

145
00:29:25.650 --> 00:29:27.940
Krish Naik: It is going to be same.

146
00:29:28.340 --> 00:29:34.849
Krish Naik: 3, 0 7, 2. Okay, so anyhow, any long, the sentence may be

147
00:29:34.980 --> 00:29:38.090
Krish Naik: what Openai embedding is basically doing is that

148
00:29:38.230 --> 00:29:43.909
Krish Naik: it will convert that vector, off to a fixed length. Okay.

149
00:29:44.340 --> 00:29:54.369
Krish Naik: the reason why we do this. Okay? And again, understand, if you know about embeddings, these are some prerequisites that you really need to know in nlp, right in nlp.

150
00:29:54.570 --> 00:30:00.479
Krish Naik: if you know about what is text embedding what is bag of words? Tf, idf, you any. Everybody knows that

151
00:30:01.250 --> 00:30:14.889
Krish Naik: if you have not known. You can just go ahead and check my Youtube playlist and all. Also there also, we have explained it very much nicely. Right? You know what to work right? Each and every vector right? It specifies some kind of features.

152
00:30:16.230 --> 00:30:28.120
Krish Naik: each and every vector specifies some kind of features. Right? And that is how this particular value is derived. And it is trained. These models are basically trained with huge amount of data. Okay.

153
00:30:28.970 --> 00:30:34.690
Krish Naik: clear, this is not sparse vector sparse vector basically means it will be either 0 or one. Okay.

154
00:30:35.190 --> 00:30:42.300
Krish Naik: So Nichol says, can we control the length? See? Whenever an embedding model is basically trained, it will be having some fixed length.

155
00:30:42.410 --> 00:30:47.379
Krish Naik: Okay, now, does this make sense? Everyone? Yeah, yes or no.

156
00:30:47.600 --> 00:30:57.139
Krish Naik: Now, the my question is that you may be having a question. Krish. Okay, fine. You're saying 3 0 7, 2. Can we also make sure that? Do we have some kind of

157
00:30:57.400 --> 00:31:18.189
Krish Naik: some kind of properties, you know, wherein it will be able to convert this into different dimensions. Okay, so that option is also available over here. And this model is trained in that way. So let's say that you you say that, hey? Probably in my vector, database I want to go ahead and convert this into 1 0 2, 4 dimensions. Now

158
00:31:18.240 --> 00:31:40.489
Krish Naik: I will tell the model. Give the model an instruction. Hey, try to adjust this entire sentence in 1 0 2, 4 dimensions. I don't want any more vectors to be stored over there. So what you do, you go ahead and use the same model. And then, along with this, you have one more parameters like dimensions. Okay, dimensions as 1 0, 2, 4. Now, why, I'm telling you like this is that

159
00:31:41.260 --> 00:32:07.260
Krish Naik: there may be some models which will be only capable of reducing the number of dimensions to 1 0 2, 4, there will be some models which will be able to convert that into 3 0 7, 2, right if I'm using 2 different embeddings, and I want to probably compare one embedding with the other, embedding by reducing the dimensions with respect to open a embedding. I will be able to do that. Okay. Now you'll be able to see that if I just go ahead and write this. Okay and execute it.

160
00:32:07.480 --> 00:32:25.790
Krish Naik: Okay, let's say this is my embeddings right? With the dimension. And now, if I just go ahead and see, don't you think it is basically going to give me. Oh, sorry. Embedding embeddings. Okay, it is basically going to give me 1 0 2, 4. See this?

161
00:32:26.540 --> 00:32:36.190
Krish Naik: Yeah, it won't reduce the accuracy. See? Again, I'm telling you, these models are hugely trained with different different parameters, right? Different different data, right?

162
00:32:36.330 --> 00:32:39.599
Krish Naik: But it is basically reducing the number of features.

163
00:32:39.820 --> 00:32:50.019
Krish Naik: Okay, see how embeddings works. You should, you should understand this specific thing, what is embeddings? Okay, here in the embeddings, we basically convert

164
00:32:50.310 --> 00:32:53.120
Krish Naik: text in 2 vectors.

165
00:32:54.020 --> 00:33:00.889
Krish Naik: Okay, text into vectors. Let me just give you one example of embeddings, which is like word 2. Vec.

166
00:33:01.390 --> 00:33:11.400
Krish Naik: okay, this is the most popular embedding technique that was available at that point of time. Okay, now see this. What is embeddings? Let's say I will go ahead and say, my

167
00:33:11.580 --> 00:33:14.859
Krish Naik: name is Krish.

168
00:33:15.290 --> 00:33:21.219
Krish Naik: How this is basically going to get converted into M. Linux. Okay, so here, you'll be able to see that

169
00:33:22.720 --> 00:33:24.970
Krish Naik: this sentence.

170
00:33:25.300 --> 00:33:31.729
Krish Naik: we'll see if I'm using any embedding techniques. You know that we'll be having a fixed set of features

171
00:33:32.800 --> 00:33:43.929
Krish Naik: like in Openai, embedding it is 3, 0 7, 2. Now, I've converted this into 1 0 2, 4. So this 1 0 2, 4 vectors understand each and every feature will be something important.

172
00:33:44.110 --> 00:33:52.919
Krish Naik: Right? And here I will be having my sentence. My sentence will be like, my name is Krish

173
00:33:53.490 --> 00:34:05.699
Krish Naik: right, and every word will be having some kind of, or I can also say that every sentence that I will be having, like my name

174
00:34:05.830 --> 00:34:11.080
Krish Naik: is Krish, will get converted into this specific vectors.

175
00:34:13.270 --> 00:34:18.349
Krish Naik: Making sense. Now, yeah, now, the reason of doing

176
00:34:19.440 --> 00:34:21.670
Krish Naik: to 1 0 2 4 is that

177
00:34:21.909 --> 00:34:33.709
Krish Naik: I just want to take some kind of information. This many number of features, the remaining features. I can just skip it because this many number of features. I will be just able to use it, and I'll be able to solve my problem statement

178
00:34:34.100 --> 00:34:34.920
Krish Naik: right

179
00:34:35.060 --> 00:34:51.600
Krish Naik: sometime. I even don't require 1 0 2, 4, I will. I will try to convert this into 5, 12. So this is one way. There is also another way, because some of the other embedding vectors. Let's say they try to convert. They only has the capability to convert into 1 0 2, 4,

180
00:34:51.800 --> 00:34:57.629
Krish Naik: right? If I want to compare this with my open AI embeddings. I will also be able to do that.

181
00:34:59.000 --> 00:35:01.960
Krish Naik: Yeah, does this make sense? Yes.

182
00:35:02.380 --> 00:35:05.510
Krish Naik: I hope everybody it is making sense, yes or no.

183
00:35:05.680 --> 00:35:13.159
Krish Naik: Yeah, what is the meaning of feature? Yogesh? Nlp, prerequisite. You need to know about nlp prerequisites.

184
00:35:13.270 --> 00:35:23.139
Krish Naik: Okay, if you don't know. Nlp, then you'll never understand what is embeddings. Okay, they are techniques. I will just go ahead and write so many techniques. There are like, tf, idf.

185
00:35:23.330 --> 00:35:24.507
Krish Naik: there is like

186
00:35:25.360 --> 00:35:32.370
Krish Naik: bag of words. There is. There is like word to back. You know all these things, everyone right.

187
00:35:32.720 --> 00:35:38.779
Krish Naik: This is nothing. But this is called as feature, representation, right, feature, representation.

188
00:35:40.170 --> 00:35:46.200
Krish Naik: Everybody should see my prerequisite videos in Nlp, everything has been explained right

189
00:35:46.550 --> 00:35:55.999
Krish Naik: again, to probably explain all these things. It will take time. Okay, so that is the reason when we are learning about agentic. AI, you need to know the prerequisite of this. Okay.

190
00:35:56.550 --> 00:36:04.190
Krish Naik: so if we reduce the embeddings length like from 3 0. Will there be data loss? How do I? Data loss will not be there? See? Again, I'm understand.

191
00:36:04.850 --> 00:36:13.000
Krish Naik: This is one sentence. If I'm representing in 3 0 7, 2, I'm representing with respect to 3 0 7, 2, feature representation.

192
00:36:15.170 --> 00:36:16.770
Krish Naik: feature representation.

193
00:36:16.990 --> 00:36:28.839
Krish Naik: If I'm using 1 0 2, 4, it is basically being represented in 1 0 2, 4 feature representation. Let's say that only 1 0 2, 4 features is basically getting considered. Okay.

194
00:36:29.360 --> 00:36:34.409
Krish Naik: guys, don't you understand what is feature representation.

195
00:36:36.590 --> 00:36:38.840
Krish Naik: Okay, let's explain one more time.

196
00:36:40.750 --> 00:36:42.190
Krish Naik: Okay, see?

197
00:36:46.030 --> 00:36:51.500
Krish Naik: Let's see this. Okay, I will take one example of one word, King.

198
00:36:51.970 --> 00:36:58.840
Krish Naik: Okay, there is one example of one word human, right?

199
00:36:58.990 --> 00:37:02.610
Krish Naik: There is one example of one word, king, queen.

200
00:37:02.860 --> 00:37:06.080
Krish Naik: And there is one example with one word, man.

201
00:37:07.510 --> 00:37:08.380
Krish Naik: Okay.

202
00:37:09.060 --> 00:37:13.629
Krish Naik: Now, can I do something like this. See?

203
00:37:14.560 --> 00:37:18.180
Krish Naik: Can I? Can I probably do something like this wherein

204
00:37:18.400 --> 00:37:22.099
Krish Naik: I try to find out some equation, and we try to derive Queen.

205
00:37:22.750 --> 00:37:26.660
Krish Naik: Okay, now let's say I am using King.

206
00:37:26.940 --> 00:37:34.190
Krish Naik: And I'm creating some features. Feature representation basically means what see, King? Let's say, one of the feature is royal.

207
00:37:34.710 --> 00:37:40.190
Krish Naik: Okay, royal. Can I make a relationship between King and Royal?

208
00:37:40.840 --> 00:37:41.810
Krish Naik: Yes or no?

209
00:37:42.850 --> 00:37:46.369
Krish Naik: Yes. So this will basically be one. Let's say.

210
00:37:46.510 --> 00:37:51.460
Krish Naik: Okay, my another feature may be King poor.

211
00:37:52.030 --> 00:37:54.919
Krish Naik: Now tell me what will be the relationship between King and poor?

212
00:37:55.650 --> 00:38:05.980
Krish Naik: Can I say, minus one right inverse relation? Right? Inverse relation? Yes or no inverse relation. Yeah, King.

213
00:38:06.450 --> 00:38:12.380
Krish Naik: let's say royal poor, then let's say my another feature may be a palace

214
00:38:14.120 --> 00:38:17.410
Krish Naik: king and palace highly correlated. Let's say one.

215
00:38:17.760 --> 00:38:30.480
Krish Naik: Let's say, yeah, king. And let's say, I want to give one more feature representation. And this will basically be your Kingdom people. Let's say

216
00:38:31.780 --> 00:38:38.140
Krish Naik: kingdom people. So let's say this feature representation, I would like to probably say correlation as pointed right

217
00:38:38.720 --> 00:38:45.880
Krish Naik: now, this is what feature representation is, right feature representation.

218
00:38:47.510 --> 00:39:06.440
Krish Naik: Okay, now I have derived this vector with respect to King. Now, similarly, with respect to Queen, again, Royal will be one poor will be minus one palace will be 0 point 8 kingdom people will be 0 point 7, because obviously Queen is not going to talk much with the Kingdom people, because King is going to make that kind of decision

219
00:39:06.700 --> 00:39:10.080
Krish Naik: right now. Similarly, if I consider man

220
00:39:10.870 --> 00:39:18.580
Krish Naik: man royal, no, it is not going to be anything as such as Royal poor. Yes, there may be some kind of scenario. Some people are poor.

221
00:39:18.900 --> 00:39:28.390
Krish Naik: Queen. The relationship between man and queen, sorry man and palace will be obviously negligible. So this I can use minus 0 point 2

222
00:39:28.730 --> 00:39:35.719
Krish Naik: right man and kingdom people, not no relation at all. Right? So we are able to derive some vectors right?

223
00:39:37.510 --> 00:39:38.360
Krish Naik: Yes.

224
00:39:39.130 --> 00:39:52.519
Krish Naik: now, this is what feature representation is. Now tell me, if King is coming here, how far, with respect to this particular vector Queen will be queen, will also become here. Man may come over here. Woman may come over here.

225
00:39:52.890 --> 00:40:00.260
Krish Naik: so these 2 are almost very near. So that is the reason why we are saying this right? And this is what feature representation is.

226
00:40:00.910 --> 00:40:10.279
Krish Naik: Now what I'm saying. In opening embedding you have 3 0 7 2 features representation. We can even convert int010-24-1024 means. I may just use this 3

227
00:40:11.530 --> 00:40:14.380
Krish Naik: again, I may just use this tree.

228
00:40:15.830 --> 00:40:21.010
Krish Naik: Yeah, does reducing feature, representation, impact accuracy.

229
00:40:21.650 --> 00:40:40.160
Krish Naik: We don't know that right? Because, see, I don't know, like whether exact accuracy will be reduced or not, or whether you should do this or not right. The reason is very simple, because when we are solving a use case, the more the feature representation, the more better accuracy, can be right? You can also consider in that way. Okay.

230
00:40:41.240 --> 00:40:42.779
Krish Naik: make sense, everybody.

231
00:40:44.240 --> 00:40:45.770
Krish Naik: Now, it makes sense.

232
00:40:47.610 --> 00:40:48.410
Krish Naik: Yeah.

233
00:40:48.680 --> 00:40:54.720
Krish Naik: So these all are prerequisites. Again, I'm telling you these all are prerequisites. You need to know all this specific stuff.

234
00:40:54.860 --> 00:40:58.910
Krish Naik: Okay, okay.

235
00:41:01.010 --> 00:41:07.860
Krish Naik: now, let's see this. Okay, let's let's take one of the example here. I will just go ahead and take the speech.

236
00:41:08.210 --> 00:41:11.679
Krish Naik: Okay, now, you will be able to see this. Okay, I will take this speech

237
00:41:12.090 --> 00:41:17.560
Krish Naik: and I will paste inside this embedding technique. Okay.

238
00:41:20.610 --> 00:41:28.369
Krish Naik: I will paste it inside this. Okay speech, dot txt. Now, let's do one thing. Let's read this particular speech. How to read this speech.

239
00:41:29.540 --> 00:41:31.839
Krish Naik: Can I write like this? Yes or no?

240
00:41:33.780 --> 00:41:35.589
Krish Naik: Yes, yes or no.

241
00:41:36.370 --> 00:41:43.660
Krish Naik: It's not like 5, 12, 1, 0, 2, 4. You can also reduce it to some other dimension. No worries, no worries. Diksha. Okay.

242
00:41:44.170 --> 00:41:46.679
Krish Naik: okay, so is this correct? Everyone.

243
00:41:46.860 --> 00:41:53.620
Krish Naik: So this is my document of the speech. Okay, what we do after reading after document loader.

244
00:41:54.160 --> 00:41:56.889
Krish Naik: what do you do after this step.

245
00:41:57.420 --> 00:42:05.240
Krish Naik: if you remember, till here we discussed right? So after loading, what do we do? We split the text. Okay?

246
00:42:05.910 --> 00:42:12.520
Krish Naik: So splitting the text, everybody knows we use recursive character text, splitter character text splitter. Is this the code? Right?

247
00:42:12.950 --> 00:42:15.089
Krish Naik: I've also used some kind of overlap.

248
00:42:15.420 --> 00:42:16.509
Krish Naik: Yes or no.

249
00:42:18.000 --> 00:42:18.830
Krish Naik: Yeah.

250
00:42:21.340 --> 00:42:22.250
Krish Naik: Yes.

251
00:42:26.654 --> 00:42:29.210
Krish Naik: yes, perfect.

252
00:42:29.680 --> 00:42:31.229
Krish Naik: So here it is.

253
00:42:31.370 --> 00:42:35.749
Krish Naik: Okay. So based on this overlap, I'm able to do this. Okay?

254
00:42:36.260 --> 00:42:39.210
Krish Naik: Now the question rises, Krish. Fine.

255
00:42:39.530 --> 00:42:40.969
Krish Naik: Let's do one thing.

256
00:42:41.670 --> 00:42:46.970
Krish Naik: Now, I will be showing you 2 different things. Okay, one.

257
00:42:47.500 --> 00:42:52.120
Krish Naik: obviously, I have my documents ready, my chunk of documents ready.

258
00:42:52.280 --> 00:42:57.350
Krish Naik: Now this document, let's say, I want to store this in any kind of vector store.

259
00:42:57.730 --> 00:43:02.969
Krish Naik: Vector dB, okay, vector dB,

260
00:43:03.490 --> 00:43:09.730
Krish Naik: Akshara, please focus on the class. You don't focus on other chat. Okay, focus on the class. Okay.

261
00:43:10.380 --> 00:43:13.709
Krish Naik: Now, if I want to store this document into vector dB,

262
00:43:14.210 --> 00:43:16.319
Krish Naik: you know, there is an embedding.

263
00:43:17.120 --> 00:43:19.280
Krish Naik: there is an embedding we already have.

264
00:43:19.890 --> 00:43:29.269
Krish Naik: So once you're storing a document into the vector dB, you also apply embedding in this and what this embedding is basically going to do

265
00:43:29.630 --> 00:43:32.299
Krish Naik: what this embedding is basically going to do. Tell me

266
00:43:32.820 --> 00:43:40.450
Krish Naik: this, this embedding is what it is going to do. It is going to convert this text into

267
00:43:40.600 --> 00:43:44.619
Krish Naik: vectors. Okay, text into vectors.

268
00:43:44.960 --> 00:43:57.710
Krish Naik: For right now we will just use. I will see again, we are going to detail it, discuss about different different vector embedded vector Dbs and all, okay, vector dB, basically means vector database

269
00:43:59.040 --> 00:44:01.210
Krish Naik: a vector database.

270
00:44:02.530 --> 00:44:08.259
Krish Naik: Okay, and this vector database, if you are working in the local, it becomes vector, store.

271
00:44:08.630 --> 00:44:31.510
Krish Naik: Okay, if this is in the cloud, we basically say it as vector database. If you are working in the local, let's say, you want to create a vector database in the local itself by using different techniques, you can basically say it as vector store. Okay, now, here, what we are basically going to do is that we are going to use one of the vector store. Now, there are multiple vector stores. Okay.

272
00:44:32.620 --> 00:44:37.229
Krish Naik: there are multiple vector, stores. Let me show you different different vector, stores. Okay.

273
00:44:37.740 --> 00:44:41.860
Krish Naik: so here, I will just go ahead and write line chip

274
00:44:42.160 --> 00:44:50.209
Krish Naik: vector, store one vector, store. I'll show you. Then, many vector stores we'll discuss about. We'll also discuss about those things

275
00:44:50.930 --> 00:44:57.360
Krish Naik: here. There are so many different vector stores. See? Astra, dB, vector store chroma click house.

276
00:44:57.520 --> 00:45:04.120
Krish Naik: databricks vector, store, elasticsearch fires in memory search vector, store

277
00:45:04.230 --> 00:45:09.799
Krish Naik: Mongodb at last. Vector, store. And all right. So let's let's consider one of them fires.

278
00:45:10.390 --> 00:45:11.250
Krish Naik: Okay.

279
00:45:11.510 --> 00:45:14.329
Krish Naik: Now, inside this fires, you will be able to see that.

280
00:45:14.930 --> 00:45:25.369
Krish Naik: Do you see this open? AI embedding is basically used. And then we are basically using embed query, Hello, world! And then we are storing some information over here. Do you see this? Everybody? Yeah.

281
00:45:25.740 --> 00:45:34.719
Krish Naik: And here also you'll be able to see this right? And this is my vector store that will get stored. Okay, so just wait for some time.

282
00:45:35.200 --> 00:45:38.640
Krish Naik: Okay, just wait for some time.

283
00:45:38.940 --> 00:45:54.199
Krish Naik: so that we will try to discuss about this vector store as we go ahead. Okay? Because that is the next step that we are basically going to do. Okay. But again, our main aim is basically to understand different types of vector, embedding techniques. Okay, now see this. Everybody.

284
00:45:54.300 --> 00:45:56.700
Krish Naik: I will take this final documents.

285
00:45:58.440 --> 00:46:03.530
Krish Naik: final documents of 0. Let's say, this is my 1st document. Okay.

286
00:46:03.880 --> 00:46:13.050
Krish Naik: now, if I just go ahead and use this embed query embed query.

287
00:46:13.300 --> 00:46:20.780
Krish Naik: embeddings? Dot embed query. Okay? And I'm basically putting this particular text instead of text, what should I put over here?

288
00:46:21.290 --> 00:46:23.339
Krish Naik: Let's say, let's go ahead and put this.

289
00:46:28.240 --> 00:46:34.669
Krish Naik: It is basically giving me error because it contains pie string, no worries. So here I will just go ahead and write

290
00:46:34.950 --> 00:46:37.540
Krish Naik: page underscore content.

291
00:46:39.840 --> 00:46:42.619
Krish Naik: Oh, just a second.

292
00:46:46.660 --> 00:46:54.129
Krish Naik: It is basically giving me this one page documents, just a second.

293
00:46:59.080 --> 00:47:03.079
Krish Naik: Okay, now see if I just go ahead and give you this.

294
00:47:04.700 --> 00:47:15.670
Krish Naik: Okay, do you see that my entire vector is basically getting converted. Yeah, yes, yes.

295
00:47:17.350 --> 00:47:19.099
Krish Naik: yes. Shubham. Tell me, please.

296
00:47:19.610 --> 00:47:26.770
Krish Naik: I'm able to see everybody's comment. Okay, but we are focusing right now in the session. Okay, okay.

297
00:47:27.120 --> 00:47:30.160
Krish Naik: now, see, it is basically getting converted right

298
00:47:30.320 --> 00:47:35.789
Krish Naik: now, once this gets converted, we then go ahead and store it in our vector store clear.

299
00:47:36.200 --> 00:47:45.769
Krish Naik: everybody clear. So what we do is that in the later stages we convert every document into vectors. There's just one chunk.

300
00:47:46.160 --> 00:47:54.320
Krish Naik: but this applies to every chunk, and then it probably goes ahead and saves it in the vector store. Database clear?

301
00:47:54.960 --> 00:47:57.830
Krish Naik: Yes, yes, yes or no.

302
00:47:58.230 --> 00:48:03.640
Krish Naik: So can we convert vector into text back? Yes, it can also be done. Rag automatically. Take cares of that.

303
00:48:04.070 --> 00:48:04.880
Krish Naik: Okay.

304
00:48:05.810 --> 00:48:12.509
Krish Naik: Now, next step, let's go ahead and try some more different types of vector embeddings. Yes or no.

305
00:48:12.750 --> 00:48:14.820
Krish Naik: Shall we try some more vector embeddings?

306
00:48:15.480 --> 00:48:21.079
Krish Naik: Because many people will say, Krish, do we have any kind of open source vector embeddings? Yes or no?

307
00:48:21.750 --> 00:48:29.670
Krish Naik: I hope everybody is looking for open source of vector embedding, sir, I don't have money in Openai. Can you show me some other way?

308
00:48:29.850 --> 00:48:36.090
Krish Naik: Yes. So there is one technique which is basically from hugging face. Okay, have you heard about hugging face?

309
00:48:37.490 --> 00:48:38.290
Krish Naik: Yeah.

310
00:48:38.730 --> 00:48:42.650
Krish Naik: Have you heard about hugging face? Okay, perfect, hugging face.

311
00:48:43.490 --> 00:48:45.119
Krish Naik: If you just go over here

312
00:48:45.640 --> 00:48:50.220
Krish Naik: huggingface.co, go to hugging face. Co, okay.

313
00:48:50.470 --> 00:49:14.989
Krish Naik: And then inside this hugging face there are different different models. You see, hugging face has huge number of models. Right? You have multi models. You have computer vision models. You have natural language processing models. You have audio models. You have tabular reinforcement, graph machine learning different different things. You have right. And from here there are also different different embedding models also.

314
00:49:15.510 --> 00:49:26.399
Krish Naik: So if you search over here, there are different different embedding models. And this model is basically hosted in hugging face. And you can directly use this in order to probably convert text into vectors

315
00:49:26.560 --> 00:49:44.829
Krish Naik: even. You can also use different different models like audio text to a text. You can use visual cushion answering, and many more things clear. Everyone till here. Now in order to use hugging face model. The 1st thing that you really need to do over here is that go to your profile. Okay.

316
00:49:45.500 --> 00:49:58.579
Krish Naik: inside this particular profile this is one of my friends who specifically works with me because he creates a lot of applications for me. And I'm able to probably have this account itself. Okay.

317
00:49:58.740 --> 00:50:05.889
Krish Naik: now here, you can see that inside this there will be something called as access tokens. So please click on access token.

318
00:50:06.570 --> 00:50:09.309
Krish Naik: Okay, please click. On access token.

319
00:50:09.690 --> 00:50:21.329
Krish Naik: everybody. You can probably do this particular step because we will be requiring this access token how to go to the access token. Just go over here, click on profile after clicking on profile, click on settings

320
00:50:21.520 --> 00:50:25.270
Krish Naik: after clicking on settings, go ahead and hit access tokens.

321
00:50:25.460 --> 00:50:33.009
Krish Naik: and we will be using this access token in order to access any kind of models that is presented. Hugging face. Okay.

322
00:50:33.320 --> 00:50:37.369
Krish Naik: now, here you will be able to see that I will go ahead and create a new token.

323
00:50:37.830 --> 00:50:59.799
Krish Naik: Here. I want basically to read and write, do multiple things. So what I will do. I will just go ahead and click on. Read so that I'll be able to read any kind of tokens itself. And I'll give the token name. Okay, you can also go ahead and select right? Okay? So that you have probably all the access. So in here I will give my token name. I'll say hugging face

324
00:51:00.670 --> 00:51:22.610
Krish Naik: will be my token name. I'll go ahead and create my token. Once you get the token, you just need to go ahead and copy your access token over here and then go to your coding solution. Okay, go and open your environment, file and inside the environment file. You need to go ahead and make another token, which is like Hf. Underscore token

325
00:51:22.860 --> 00:51:24.650
Krish Naik: with this key name.

326
00:51:25.400 --> 00:51:28.180
Krish Naik: Clear everybody, yes or no.

327
00:51:28.800 --> 00:51:29.650
Krish Naik: Yes.

328
00:51:30.630 --> 00:51:37.859
Krish Naik: very simple. You have to probably just go ahead and write this wherein you are creating one more additional token with that.

329
00:51:38.550 --> 00:51:39.370
Krish Naik: Okay.

330
00:51:39.560 --> 00:51:47.379
Krish Naik: and this token is required. Let me just go ahead and update this in my env file so that you should not be seeing it. Because.

331
00:51:48.075 --> 00:51:52.959
Krish Naik: you know, yesterday we are just analyzing 1. 1 day I got a cost of

332
00:51:53.200 --> 00:51:59.180
Krish Naik: $100 of my open AI key got leaked somewhere, you know.

333
00:51:59.280 --> 00:52:03.920
Krish Naik: and that guy is what they did is that they did a fine tuning like kind of stuff

334
00:52:04.080 --> 00:52:09.479
Krish Naik: for. And they generated somewhere around 800 K tokens. Just imagine.

335
00:52:10.410 --> 00:52:17.650
Krish Naik: okay, so this kind of stuff also happens. Okay, Kumar Garo, you can take token type as read or write, it is up to you.

336
00:52:18.050 --> 00:52:21.470
Krish Naik: Okay, clear.

337
00:52:22.710 --> 00:52:29.440
Krish Naik: So all you have to do is that just go ahead and update this in the name of this. Hf, underscore token.

338
00:52:29.760 --> 00:52:30.690
Krish Naik: Okay?

339
00:52:30.940 --> 00:52:34.399
Krish Naik: And then you have hf, underscore this over here.

340
00:52:35.510 --> 00:52:39.499
Krish Naik: Okay, Prajath will show you again. Don't worry.

341
00:52:39.620 --> 00:52:43.059
Krish Naik: Still, we have to discuss about vector, store. Okay.

342
00:52:43.880 --> 00:52:54.370
Krish Naik: so this is my Hf token. And and remember, guys, this, all models will be of huge size. So don't plan or imagine on running it in locally. Okay.

343
00:52:54.500 --> 00:52:59.800
Krish Naik: it will take a lot of time to. Probably your system will get stuck and all. Okay.

344
00:53:00.030 --> 00:53:05.830
Krish Naik: yeah, devour. You can also use fine grain tokens there. You just need to provide manually all the permissions.

345
00:53:06.090 --> 00:53:09.440
Krish Naik: Okay, so is everybody clear with this.

346
00:53:11.490 --> 00:53:20.470
Krish Naik: Yeah, see, guys, one question was that, can I use classical Nlp model using Openai instead of Llms.

347
00:53:20.830 --> 00:53:24.290
Krish Naik: See, you can use it. But again, how much accurate it will be.

348
00:53:24.700 --> 00:53:27.480
Krish Naik: You also don't know right how much accurate it can be.

349
00:53:29.500 --> 00:53:34.060
Krish Naik: Okay. Now let's go ahead and create my 2.3 point 2.

350
00:53:34.360 --> 00:53:39.879
Krish Naik: And here we are going to use hugging face. Dot IP, by. Nb, okay.

351
00:53:40.070 --> 00:53:41.360
Krish Naik: IP, ynb.

352
00:53:41.730 --> 00:53:51.649
Krish Naik: now, with respect to hugging face, we will 1st of all go ahead and select the kernel. Now you tell me what things are basically happening. Now, 1st of all, what we need to do everybody.

353
00:53:52.640 --> 00:53:55.950
Krish Naik: is this correct load, the environment variables?

354
00:53:56.610 --> 00:54:00.539
Krish Naik: Yes, which token we need to load it.

355
00:54:01.680 --> 00:54:08.470
Krish Naik: which token we need to load it. Hf underscore token, right? So hf 2 underscore token is done. Okay.

356
00:54:08.840 --> 00:54:20.149
Krish Naik: Now in hugging face. 1st of all, we will try to use one sentence. Transformer. Okay, sentence transformer.

357
00:54:20.950 --> 00:54:29.000
Krish Naik: Now, sentence transformer is nothing. But it is a kind of embedding technique on hugging face. Okay.

358
00:54:29.150 --> 00:54:36.620
Krish Naik: sentence transformer is a python framework for the state of art sentence, text and image embeddings. It can also even perform image embeddings.

359
00:54:36.960 --> 00:54:44.440
Krish Naik: One of the embedding model is used in hugging face embedding class. We have also added an alliance for sentence transformer embedding.

360
00:54:44.790 --> 00:54:46.650
Krish Naik: So all we have to do is that

361
00:54:47.150 --> 00:54:51.230
Krish Naik: 1. 1st of all, we will go ahead and import a library.

362
00:54:51.360 --> 00:54:56.340
Krish Naik: and this library will be nothing but lang chain, underscore

363
00:54:56.750 --> 00:55:01.229
Krish Naik: hugging face. Okay, Langchain, underscore hugging face.

364
00:55:01.830 --> 00:55:04.870
Krish Naik: because we are going to use along with our land chain.

365
00:55:04.980 --> 00:55:10.260
Krish Naik: And here you will be able to use this. Yes, you can use instead of Openai also. Okay.

366
00:55:10.660 --> 00:55:27.720
Krish Naik: now, I will just go ahead and install this. I will write pip install minus our requirement dot txt. So I have to properly. 1st of all. Install Langchain underscore hugging face so that we will be able to use this library to load the embedding models.

367
00:55:28.000 --> 00:55:28.840
Krish Naik: Okay.

368
00:55:31.790 --> 00:55:48.910
Krish Naik: I have a large data set 85 k, approximately, and chunk size is somewhere 10 lakh embedding is taking too much time somewhere, one plus which embedding technique you are using. In that case, please try to use openai embeddings it is better to use. And did you do? The chunking

369
00:55:53.330 --> 00:56:00.320
Krish Naik: chunk size is 10 lakhs, it seems. Then it is going to take time. Now, you have to do the right kind of chunking for that. Okay.

370
00:56:01.370 --> 00:56:03.930
Krish Naik: so once this installation basically happens.

371
00:56:05.370 --> 00:56:10.800
Krish Naik: then we will go ahead with the next step wherein we will try to convert this into this

372
00:56:10.920 --> 00:56:13.830
Krish Naik: Chaitan. Have you done the chunking strategy right?

373
00:56:15.220 --> 00:56:16.789
Krish Naik: Try to reduce the chunk?

374
00:56:17.030 --> 00:56:18.599
Krish Naik: Then it will happen quickly.

375
00:56:21.050 --> 00:56:28.459
Krish Naik: Okay, can you please ping dependencies? Ping dependencies is only this one, no. Langchain, hugging face.

376
00:56:29.490 --> 00:56:30.270
Krish Naik: Okay.

377
00:56:30.820 --> 00:56:36.639
Krish Naik: So now, based on this, how much time it is basically going to take. It is just going to go ahead and do that.

378
00:56:36.770 --> 00:56:41.560
Krish Naik: So access taken setup, it is very simple. Go to your profile. 1st of all.

379
00:56:41.910 --> 00:56:47.859
Krish Naik: okay, in hugging face, you have to go ahead and create a profile inside this there will be.

380
00:56:48.484 --> 00:56:53.349
Krish Naik: Clearly over here. You have to probably go ahead and click on settings.

381
00:56:53.510 --> 00:56:58.530
Krish Naik: And then here you have access tokens, and you have to probably go ahead and generate this.

382
00:56:59.180 --> 00:57:00.050
Krish Naik: Okay.

383
00:57:01.070 --> 00:57:08.659
Krish Naik: Krish, best use case. Can we use the embedding techniques? Best use cases can in every rag application. You'll be using the embedding techniques.

384
00:57:09.730 --> 00:57:13.700
Krish Naik: See, guys, why I'm teaching you this because we are discussing about rag, right?

385
00:57:13.830 --> 00:57:16.470
Krish Naik: And in rag, if I want to store anything

386
00:57:16.660 --> 00:57:21.090
Krish Naik: inside my vector, database, I have to use vector, embeddings.

387
00:57:22.120 --> 00:57:27.250
Krish Naik: Okay, what permission are you giving for the token? It is very simple.

388
00:57:27.410 --> 00:57:31.669
Krish Naik: Create a token, click on, read, write whatever you want.

389
00:57:32.200 --> 00:57:38.939
Krish Naik: This token has read and write, access to all your organization, and can make calls to inference providers on your behalf.

390
00:57:39.310 --> 00:57:47.859
Krish Naik: Here you have read the token, has only read access to all your organization resources. Clearly, it is saying, if you want custom, you can go ahead and click on. Find.

391
00:57:48.630 --> 00:57:49.480
Krish Naik: Okay?

392
00:57:50.220 --> 00:57:51.140
Krish Naik: Clear.

393
00:57:56.876 --> 00:58:04.830
Krish Naik: Abhir goes, sir. You asked to create parentic model that. Yeah, that is a reasoning model. No, so think will come. You have to use a regular expression and remove it.

394
00:58:08.130 --> 00:58:14.530
Krish Naik: Does all embedding technique perform the same? Or are there any differences? Tell me you should tell me the answer.

395
00:58:16.510 --> 00:58:19.490
Krish Naik: That is the reason fundamental should be very good.

396
00:58:19.670 --> 00:58:25.510
Krish Naik: Hmm, are all the embedding techniques same or not. Tell me, guys.

397
00:58:25.970 --> 00:58:28.199
Krish Naik: or do they perform in a different way?

398
00:58:30.010 --> 00:58:32.210
Krish Naik: Wait, I will enable all the chat

399
00:58:32.330 --> 00:58:35.660
Krish Naik: so that you should be able to see your friend chat also.

400
00:58:35.820 --> 00:58:37.240
Krish Naik: Okay, sometime.

401
00:58:38.270 --> 00:58:48.499
Krish Naik: See? I don't want to enable the chat, the ray. The reason is that why? Because everybody should focus on learning. But people wants to just see each and every chats. Okay.

402
00:58:50.700 --> 00:58:55.140
Krish Naik: they can perform in a different way. Yeah, so obviously, they will perform in a different way, right?

403
00:58:55.400 --> 00:59:00.889
Krish Naik: There has to perform in a different way. Otherwise, why so many embedding techniques will get created

404
00:59:01.250 --> 00:59:04.209
Krish Naik: simple simple questions. People are asking. Okay.

405
00:59:05.410 --> 00:59:09.610
Krish Naik: okay, now, let's try. Sentenced, hugging face embeddings. Yeah.

406
00:59:09.910 --> 00:59:14.570
Krish Naik: So here for the hugging face embedding, we will be importing like this. Okay?

407
00:59:15.910 --> 00:59:19.670
Krish Naik: So here from Langchain underscore, hugging face, import, hugging face embeddings.

408
00:59:19.950 --> 00:59:39.499
Krish Naik: Then we are going to use this hugging face. Embeddings with a hugging face embedding name the model name over here all. Mini. Lml, 6, v. 2. Okay. Now the question rises. Krish, how did I get to this particular model? Just go ahead and see that if I just go ahead and see sentence

409
00:59:39.920 --> 00:59:48.539
Krish Naik: transformers hugging face or embeddings or langchain. I'll just go ahead and write like this. Okay.

410
00:59:49.050 --> 01:00:03.980
Krish Naik: so if I just go ahead and click. This you can see over here. So many different different models are basically used. All mini, L, 6, v. 2, right? So if you just go ahead and click on this one, and if you go ahead and select hugging face over here itself.

411
01:00:04.840 --> 01:00:10.939
Krish Naik: you should be able to see this models also. See, one more model is like this, you can also use this

412
01:00:11.270 --> 01:00:12.110
Krish Naik: right?

413
01:00:13.780 --> 01:00:27.579
Krish Naik: So this is really really important that you are able to see the model types with respect to hugging face also. So here one of the model that I have specifically used over here, you can see over here. It is all mini, L. 6, v, 2, okay.

414
01:00:27.710 --> 01:00:43.550
Krish Naik: And this particular model, I'll just go ahead and execute this once we execute this, what it is basically going to do is that based on the Api, it is going to load the entire reference of the model. And then we can basically use this embedding technique. Since this is free, it will be slow.

415
01:00:43.840 --> 01:00:44.670
Krish Naik: Okay.

416
01:00:45.020 --> 01:01:03.490
Krish Naik: since it is free, it will be slow, because it is now loading it right now here it is, trying to load this entire hugging face up and remember, unless and until you have not set the right kind of key, it will not give, it will not get loaded over here. Okay. Now, see, you can see over here it is going to take more time

417
01:01:04.210 --> 01:01:05.100
Krish Naik: right

418
01:01:08.290 --> 01:01:12.299
Krish Naik: now. See? It has loaded for you. It will take still more time.

419
01:01:12.600 --> 01:01:13.490
Krish Naik: Okay

420
01:01:14.290 --> 01:01:26.430
Krish Naik: for you. It will take still more time. So if I just go ahead and see embeddings, it is basically there hugging face embeddings. So this model will be running locally. It will download it, and it will try to run it. Okay.

421
01:01:27.510 --> 01:01:28.420
Krish Naik: yes.

422
01:01:29.130 --> 01:01:30.060
Krish Naik: Okay.

423
01:01:30.170 --> 01:01:31.250
Krish Naik: Now.

424
01:01:31.660 --> 01:01:42.940
Krish Naik: let's go ahead and do the same thing. See, embeddings dot embed query on text. This is a text document, and if I just go ahead and execute this, this is what is my vectors that is got created

425
01:01:45.270 --> 01:01:46.190
Krish Naik: clear.

426
01:01:47.800 --> 01:01:53.239
Krish Naik: So once you are basically loading in this way, it is basically getting loaded in your local machine. Only Shrikhand.

427
01:01:53.770 --> 01:02:01.940
Krish Naik: local Mekaro system, Kharabkaro. Now, if I show the length of this.

428
01:02:02.060 --> 01:02:04.400
Krish Naik: can anybody guess what will be the length?

429
01:02:08.160 --> 01:02:10.089
Krish Naik: What will be the length?

430
01:02:11.040 --> 01:02:12.420
Krish Naik: 3, 84.

431
01:02:15.020 --> 01:02:22.220
Krish Naik: Now you understood this is the capability of this particular model. Now you understood why Openai? Why this?

432
01:02:23.910 --> 01:02:24.590
Krish Naik: Huh?

433
01:02:24.880 --> 01:02:30.039
Krish Naik: You said right? More feature, representation, more more representation of that particular data.

434
01:02:30.330 --> 01:02:32.109
Krish Naik: And this is just creative work.

435
01:02:32.850 --> 01:02:35.710
Krish Naik: Right here, let's feature representation.

436
01:02:35.980 --> 01:02:38.390
Krish Naik: So this, what we are discussing about right.

437
01:02:39.060 --> 01:02:47.969
Krish Naik: this feature representation is only 384 like this example, yeah, someone may. Aya.

438
01:02:50.300 --> 01:02:51.429
Krish Naik: Yes, Arno.

439
01:03:08.220 --> 01:03:11.379
Krish Naik: So this is with respect to the hugging face. Okay.

440
01:03:11.800 --> 01:03:14.146
Krish Naik: this is with respect to the hugging face.

441
01:03:15.060 --> 01:03:20.100
Krish Naik: Now, there is also one more technique. We are like Olama Olama from your local also.

442
01:03:20.260 --> 01:03:23.029
Krish Naik: But again, your system will become very, very slow.

443
01:03:23.620 --> 01:03:25.300
Krish Naik: Okay, very, very slow.

444
01:03:26.370 --> 01:03:30.089
Krish Naik: So always try to use some kind of managed services

445
01:03:30.520 --> 01:03:33.940
Krish Naik: instead of giving the pressure to your system. Okay.

446
01:03:34.100 --> 01:03:38.790
Krish Naik: now, as said, sky is the limit, go ahead and try different different things.

447
01:03:39.070 --> 01:03:40.919
Krish Naik: Go ahead and try Nvidia.

448
01:03:41.120 --> 01:03:50.159
Krish Naik: So you need to get a key for Nvidia. Go ahead and try Google Gemini, get a key of Google Gemini, and try to do this right

449
01:03:53.550 --> 01:03:56.759
Krish Naik: open source. No one will give you that much accurate.

450
01:03:57.410 --> 01:04:01.940
Krish Naik: I can't open source. No one will give you that much accurate.

451
01:04:02.790 --> 01:04:04.809
Krish Naik: I will also save this URL.

452
01:04:05.610 --> 01:04:08.759
Krish Naik: And so that you can use this at any point of time.

453
01:04:09.070 --> 01:04:13.860
Krish Naik: Okay, I will save this URL in the material so that you can use it.

454
01:04:14.620 --> 01:04:18.970
Krish Naik: Okay? Similarly, here also in the embeddings, you should be able to use it.

455
01:04:20.800 --> 01:04:26.640
Krish Naik: See, step by step, we are doing almost those things like how step by step, will build things right.

456
01:04:27.220 --> 01:04:29.009
Krish Naik: that all things are basically happening.

457
01:04:29.120 --> 01:04:29.940
Krish Naik: Okay.

458
01:04:31.130 --> 01:04:42.530
Krish Naik: now, the question rises, Krish, in use cases in companies. Do you think my records will be smaller? No, it will be huge records, 10,000 20,000 records. Right?

459
01:04:43.050 --> 01:04:49.700
Krish Naik: Do you think we can use this techniques of hugging face or olama in the local.

460
01:04:50.560 --> 01:04:51.580
Krish Naik: No, right?

461
01:04:52.370 --> 01:05:01.090
Krish Naik: Because those will be used data. I have to also use vector database. I have to use managed services in embeddings. Right then, only things will happen

462
01:05:01.210 --> 01:05:03.310
Krish Naik: right. It will happen quickly.

463
01:05:04.060 --> 01:05:11.380
Krish Naik: It is not very simple to just do it with your local and all. Many people are, sir. I want to do this in local.

464
01:05:11.680 --> 01:05:20.359
Krish Naik: Your system will go out of anything right now. As we go ahead I will show you this, vector databases and all everything as such. Okay.

465
01:05:20.470 --> 01:05:28.729
Krish Naik: please don't put lot of stress, because see in that way, if you probably try to do everything in the local. It will not be possible. Right?

466
01:05:29.250 --> 01:05:37.220
Krish Naik: Like, let's say that I have 10,000 documents. Do you think I'm going to probably do the embedding technique by using this free, open source or Olama?

467
01:05:38.390 --> 01:05:40.839
Krish Naik: No right, it will not be possible

468
01:05:42.080 --> 01:05:50.880
Krish Naik: system. It will become very slow. This will become. We cannot use any open source itself, and the dimension is also very less right in open source. C. 3, 84. Over here.

469
01:05:51.110 --> 01:05:53.940
Krish Naik: We just saw in this hugging face. Right?

470
01:05:54.170 --> 01:05:57.420
Krish Naik: 3, 84 and sentence transformer.

471
01:05:57.690 --> 01:05:58.500
Krish Naik: Yeah.

472
01:06:00.160 --> 01:06:06.409
Krish Naik: let's say that I want to probably go ahead and use hugging face one more, right? So I'll just go ahead and use hugging face. Let's see.

473
01:06:10.500 --> 01:06:14.189
Krish Naik: I'll I'll use this. Okay, I'll use this. Okay?

474
01:06:14.390 --> 01:06:17.809
Krish Naik: And then let's see, this will also take some time to load.

475
01:06:19.010 --> 01:06:19.800
Krish Naik: Yeah.

476
01:06:23.900 --> 01:06:30.409
Krish Naik: it will also take some time to load, and then I will copy this and see what is my length

477
01:06:33.840 --> 01:06:35.290
Krish Naik: like this.

478
01:06:44.850 --> 01:06:46.940
Krish Naik: See how much time it is taking to load.

479
01:06:47.380 --> 01:06:48.140
Krish Naik: Hey?

480
01:06:48.980 --> 01:06:53.289
Krish Naik: I have a powerful system, but it is taking so much time. Just imagine your laptop.

481
01:06:53.430 --> 01:06:57.050
Krish Naik: or any or anything as such, how much time it is going to take.

482
01:06:58.660 --> 01:07:03.740
Krish Naik: Okay, I'll just go ahead and see my system analytics.

483
01:07:09.200 --> 01:07:11.490
Krish Naik: My task manager has got stuck.

484
01:07:11.850 --> 01:07:12.710
Krish Naik: Okay.

485
01:07:16.550 --> 01:07:17.350
Krish Naik: wow.

486
01:07:22.550 --> 01:07:25.309
Krish Naik: Steve, I have 64 gb, RAM,

487
01:07:25.620 --> 01:07:28.910
Krish Naik: and it took somewhere around 32 gb, RAM.

488
01:07:32.140 --> 01:07:33.310
Krish Naik: Let's see.

489
01:07:33.460 --> 01:07:37.220
Krish Naik: Okay, I have this. Gpu. See

490
01:07:38.040 --> 01:07:42.499
Krish Naik: Nvidia Titan, Rtx. This also has 24. Gb. Vram.

491
01:07:42.800 --> 01:07:48.629
Krish Naik: Hmm, you all are running in your local desktop. Now see this. You got as 7, 68.

492
01:07:49.730 --> 01:07:57.100
Krish Naik: So this particular model, all. MB, net based v, 2 is basically giving you 7, 68, vector, dimension.

493
01:07:57.360 --> 01:08:09.279
Krish Naik: Similarly, you can go ahead and explore other other things. Yes, if you want to directly use Hanging Face. You can also go ahead and use paid models of them. Okay, then that will also be a kind of managed services. Okay.

494
01:08:09.730 --> 01:08:11.099
Krish Naik: make sense. Everyone.

495
01:08:12.840 --> 01:08:13.680
Krish Naik: Yeah.

496
01:08:14.420 --> 01:08:19.089
Krish Naik: Good enough assignments. Go ahead and explore different different models.

497
01:08:19.609 --> 01:08:30.570
Krish Naik: Okay? You also can go ahead and explore Google Gemini, because Google Gemini, you'll be able to get a keys also. So for Google Gemini, just go ahead and search for Google, Gemini Api Key.

498
01:08:31.229 --> 01:08:32.130
Krish Naik: okay.

499
01:08:32.930 --> 01:08:42.220
Krish Naik: And here you should be able to go to this particular URL, get a Gemini key over here.

500
01:08:45.819 --> 01:08:48.590
Krish Naik: and then you can create an Api key over here.

501
01:08:48.760 --> 01:08:49.580
Krish Naik: Okay.

502
01:08:49.840 --> 01:08:57.179
Krish Naik: you can create a project over here, and you can create it. I think it is very simple. It provides you fill free key, anyhow.

503
01:08:57.350 --> 01:08:59.790
Krish Naik: Okay, perfect.

504
01:09:00.010 --> 01:09:08.539
Krish Naik: Now, guys, the next step will be that. See, we have discussed about vector embeddings also. Now, let's go ahead towards vector database. Okay.

505
01:09:08.740 --> 01:09:10.169
Krish Naik: Sunny, you there.

506
01:09:13.953 --> 01:09:14.799
Sunny Savita: Yes, sir!

507
01:09:15.390 --> 01:09:19.300
Krish Naik: Okay, perfect. Now, Sunny. 1st of all, I'll give this materials to them.

508
01:09:19.439 --> 01:09:23.970
Krish Naik: And then you can probably discuss about this one also.

509
01:09:29.290 --> 01:09:32.329
Krish Naik: So we have, we have discussed still vector and meetings. Okay.

510
01:09:33.109 --> 01:09:33.859
Sunny Savita: Okay, sir.

511
01:09:42.960 --> 01:09:46.569
Krish Naik: So guys just see that whether everybody is able to get the materials or not.

512
01:09:49.149 --> 01:09:50.040
Krish Naik: Yes.

513
01:09:55.780 --> 01:09:59.060
Krish Naik: Sunny. I've sent in the attachment.

514
01:10:00.370 --> 01:10:01.859
Sunny Savita: Okay, sir, I got it.

515
01:10:03.030 --> 01:10:08.210
Krish Naik: Shrikantha. The recordings will be available in the dashboard. No, here you will not be able to see the recordings. No.

516
01:10:08.340 --> 01:10:09.510
Krish Naik: in the dashboard.

517
01:10:11.090 --> 01:10:14.199
Krish Naik: Yes, Vijay Raghav, tell me, what is your question, please.

518
01:10:15.750 --> 01:10:19.156
Krish Naik: Here I cannot take each and every one questions while I'm teaching.

519
01:10:26.450 --> 01:10:27.230
Krish Naik: oh.

520
01:10:27.780 --> 01:10:34.540
Krish Naik: so is it possible to provide transcript. Yes, I'm working on a transcript. The transcript will be attached in every videos. Now, okay, going forward.

521
01:10:37.340 --> 01:10:38.030
Krish Naik: Okay.

522
01:10:50.260 --> 01:10:52.999
Krish Naik: this is of embeddings.

523
01:10:57.500 --> 01:11:01.859
Krish Naik: We'll discuss about weight fires and all everything. We'll discuss. Okay.

524
01:11:04.350 --> 01:11:07.899
Krish Naik: everything we'll discuss step by step. We'll discuss. Don't worry.

525
01:11:11.690 --> 01:11:14.080
Krish Naik: So how was the session till here right now?

526
01:11:14.500 --> 01:11:19.710
Krish Naik: Was it good are, did you? Are you able to understand now things here

527
01:11:24.820 --> 01:11:35.130
Krish Naik: everybody got the materials, downloaded the materials again. I'm sending it. Okay.

528
01:11:35.760 --> 01:11:40.470
Krish Naik: Yes, Sunny, I think you can share your screen and start teaching this.

529
01:11:40.690 --> 01:11:43.190
Sunny Savita: Yeah. So I'm just setting up the material.

530
01:11:43.190 --> 01:11:43.820
Krish Naik: Yeah.

531
01:11:44.140 --> 01:11:50.809
Krish Naik: So guys sunny will also show you the cloud part of vector database right now, because he has everything set up. Okay?

532
01:11:50.970 --> 01:11:58.580
Krish Naik: So yeah, yeah, zoom chat, everything will get uploaded. Don't worry. So we will be planning to upload that. I've already told my team. Okay.

533
01:12:00.220 --> 01:12:00.630
Krish Naik: yeah.

534
01:12:01.520 --> 01:12:07.880
Krish Naik: So for anybody who has joined today. You have to probably go ahead and see the previous recordings. Don't join today's class. Then

535
01:12:08.100 --> 01:12:12.460
Krish Naik: take a week time, complete the previous one, and then you join the live sessions. Okay?

536
01:12:13.434 --> 01:12:22.476
Krish Naik: Understood. Few question. Why should we use dimension parameter if the default is 3, 0 4, 2, as I said to you, right now see, one of the model has given me

537
01:12:22.940 --> 01:12:30.239
Krish Naik: 7, 84, right? And the other model is basically giving me 3 0 7 2. Let's say you want to compare between both of them. Right?

538
01:12:30.350 --> 01:12:34.060
Krish Naik: So there is one option where you can reduce the dimensions also. Right?

539
01:12:34.400 --> 01:12:40.869
Krish Naik: There may be simple use cases where we don't even require that much dimensions. So it can be multiple scenarios clear.

540
01:12:44.270 --> 01:12:49.529
Krish Naik: If I use 1 0 5, will it impact the Api usage call. Yes, less tokens will get generated. So

541
01:12:50.140 --> 01:12:52.489
Krish Naik: less money will take a place. Right?

542
01:12:52.640 --> 01:13:01.870
Krish Naik: Just imagine, if you're generating 3 0 7 2 dimensions. If you're generating 1 0 8, 4 dimensions, or 1 0 5, 2 dimension. Where do you think the maximum cost will involve?

543
01:13:04.810 --> 01:13:05.610
Krish Naik: Yeah.

544
01:13:06.170 --> 01:13:16.550
Krish Naik: what does dimension represents mean, so dimension means dimension is nothing but feature, representation, right? How many tokens, how many vectors is basically getting created for a sentence?

545
01:13:21.020 --> 01:13:24.479
Krish Naik: You are representing a sentence in some way, that's it.

546
01:13:26.230 --> 01:13:31.180
Krish Naik: 3, 0 7 means 7, 2 means one token negative hi vigness.

547
01:13:33.400 --> 01:13:37.359
Krish Naik: Weakness is saying, 3, 0 7, 2 means one token, my God.

548
01:13:37.680 --> 01:13:44.070
Krish Naik: for a sentence. You are representing the entire sentence into 3 0 7, 2 dimension of vectors.

549
01:13:44.910 --> 01:13:49.719
Krish Naik: That is the reason your fundamentals should be strong. Come on, guys.

550
01:13:55.000 --> 01:13:56.160
Krish Naik: Sunny. Ready.

551
01:13:58.610 --> 01:13:59.180
Krish Naik: Okay?

552
01:13:59.180 --> 01:14:01.250
Sunny Savita: So share my screen.

553
01:14:01.550 --> 01:14:05.800
Krish Naik: You can also become the host. And sure.

554
01:14:06.100 --> 01:14:13.789
Krish Naik: Now, Sunny is basically going to talk about different different vector stores. And vector vector database. Okay, with different different examples.

555
01:14:13.960 --> 01:14:19.229
Krish Naik: One by one he will explain you each and everything, and he'll also show you how you can set up in the cloud part. Okay

556
01:14:22.690 --> 01:14:28.590
Krish Naik: for Openai. The inferencing is happening at the Openai. Yes, it is a managed services. So everything will happen over there.

557
01:14:28.930 --> 01:14:29.680
Krish Naik: Okay.

558
01:14:31.930 --> 01:14:34.309
Sunny Savita: Yeah, it is visible, sir. My screen is visible.

559
01:14:34.310 --> 01:14:37.049
Krish Naik: Yeah, yeah, visible. You can show your face sunny.

560
01:14:37.050 --> 01:14:38.970
Sunny Savita: Yeah. Yeah, so give me one second.

561
01:14:42.770 --> 01:14:44.210
Sunny Savita: Okay.

562
01:15:05.070 --> 01:15:22.949
Krish Naik: Kindly explain your machine configuration. I have 64 gb, RAM my system. My workstation cost me around 5 lakh rupees. Guys. Okay, everybody should not buy this because this is for my work, my personal work. Whatever I tour do right? I have to probably work in that particular thing.

563
01:15:23.340 --> 01:15:29.399
Krish Naik: So one dumb question, why not use word 2 vec, opening embeddings are far more accurate than word. 2. Vec.

564
01:15:29.620 --> 01:15:32.730
Krish Naik: okay, word to make is basically trained in less amount of data.

565
01:15:33.080 --> 01:15:41.340
Krish Naik: Okay, Vaishnavi. Already the prerequisite video has been uploaded in your transcript in your course section.

566
01:15:41.530 --> 01:15:44.099
Krish Naik: You just need to probably go ahead and check it out. Okay.

567
01:15:45.570 --> 01:15:47.560
Krish Naik: Okay, Sunny, please continue.

568
01:15:48.840 --> 01:15:49.980
Sunny Savita: Sure, sir.

569
01:15:50.240 --> 01:15:57.719
Sunny Savita: okay, guys. So we can start with the vector, store before starting with the vector store. Okay, so we'll give you some context.

570
01:15:57.830 --> 01:16:06.500
Sunny Savita: And, sir, has already discussed about the embeddings. Right? I hope you have this file, guys. You have this file, yes or no. Tell me

571
01:16:10.150 --> 01:16:13.367
Sunny Savita: right? So I created one more folder.

572
01:16:13.940 --> 01:16:24.240
Sunny Savita: the folder name is 2.4 vector, databases. So here itself, we'll try to configure our vector, databases. Whatever vector databases we'll try to learn.

573
01:16:24.240 --> 01:16:48.150
Sunny Savita: So guys, there are so many vector, databases. If you will go and go and check with the lunch and itself. So many vector. Database you will find out. So each and every database is not required. No need to learn every database. Okay, we'll see couple of so one so one database we'll see with respect to the in memory, and how we can persist over the disk and one database we'll see with respect to the cloud interface. Okay.

574
01:16:48.150 --> 01:16:55.260
Sunny Savita: so these 2 databases will see. So first, st I'll start with a a local one itself. How you can store your data in the local, okay?

575
01:16:55.260 --> 01:17:09.900
Sunny Savita: And how you can. Basically configure your vector database in the local and how you can persist over the disk itself. So in today's class, we'll cover that files. Okay, files is one of the database the full form is of this one

576
01:17:09.900 --> 01:17:33.220
Sunny Savita: Facebook, AI similarity search. Okay? And I'll show you how to store a data. And apart from this one, we'll look into some other concept. Also like how to create indexes and all. And then, after restoring a data, how we can build a rag on top of it. So I'll show you the complete pipeline in today's lecture. Okay? So are you ready, guys? Yes or no?

577
01:17:33.740 --> 01:17:58.519
Sunny Savita: Yeah, I I'll show you the cloud base also. So how you can manage the database over the cloud visa. How you can configure the data stack or the Mongodb. See? The process is same. If you're going to be, change a vendor, right? So whether it's a data stack or mongodb, or v, 8, right, or quadrant or pinecone. So the process is same right? So you just need to log in over there. You just need to generate Api key

578
01:17:58.520 --> 01:18:04.649
Sunny Savita: right? And based on that Api key based on that login credential. You can configure the vector database. It is very easy.

579
01:18:04.670 --> 01:18:28.630
Sunny Savita: Right? So 1st we'll start from the local itself, and then we'll move ahead with the cloud. Elastic search is one of them. Yes, we can use the elasticsearch. Also. I I use elastic search open search personally. So it is a cloud native, even the open source. See? Open source. Configuration is also there. With respect to the open search and elastic search. But I I have used with respect to the aws, the cloud native. Okay.

580
01:18:28.630 --> 01:18:41.159
Sunny Savita: So whenever you are working into in in industry, right? So apart from the pine cone, apart from this, v. 8, and all right, you will be more focused to this elastic search and open search. So yeah, I will discuss that as we'll progress in the course

581
01:18:41.160 --> 01:18:55.870
Sunny Savita: so, but as of now, our main aim to teach you this vector database, how to store the data over there, what is the functionality of this vector database? How to create an index and how to perform a similarity search and all. And then how to create a rag on top of it. Okay.

582
01:18:55.870 --> 01:19:10.869
Sunny Savita: so what I'm doing guys, I'm going to create one more new folder inside this vector, store folder. Only. So inside this vector, store folder. I'm going to create a folder, one more folder. The name is files fa, ISS.

583
01:19:11.236 --> 01:19:27.250
Sunny Savita: Please do it along with me if you want to do it. If you are not able to do along with me. Then, you can skip later on. Also, you can do okay while watching a recording or while going through with the material. Got it so the idea and agent is clear.

584
01:19:27.420 --> 01:19:30.950
Sunny Savita: May I know in the chat? Please tell me, guys.

585
01:19:31.270 --> 01:19:34.820
Sunny Savita: if you can hear me clearly. Please do let me know in the chat.

586
01:19:36.050 --> 01:19:52.300
Sunny Savita: And, guys, I'll see if you have any sort of a doubt you can ask me later on, because sometimes I won't be able to answer for every question whatever you are asking in a chat so better you can follow me for next 1Â h, and then we can have some discussion. Okay, your discussion now.

587
01:19:52.828 --> 01:19:57.659
Sunny Savita: Please zoom the screen. I think it is like already. June. You can see the screen.

588
01:19:58.392 --> 01:20:01.419
Sunny Savita: Let me zoom little bit more. So

589
01:20:02.170 --> 01:20:13.130
Sunny Savita: yeah, I think now it is perfect. So 1st of all, guys, what is required. So we required the embedding model. Okay, now, I'm not able to see my screen clearly. Just a second guys

590
01:20:14.453 --> 01:20:15.980
Sunny Savita: drew Mount.

591
01:20:17.940 --> 01:20:39.329
Sunny Savita: Yeah, perfect. So here, guys, we required the embedding model which we have already learned. Okay, now, so I'm going to configure that embedding model and all everything in the new file itself. So I created a folder the folder name is files. And inside this folder I'm going to create a new file. Okay? So my file name is going to be code

592
01:20:39.490 --> 01:20:42.640
Sunny Savita: dot, IP, y and B,

593
01:20:42.830 --> 01:21:09.605
Sunny Savita: so guys here, I created a new file, and the file name is what core dot IP bind. Now, after creating IP bind, file what you have to do. So after creating this IP bind file, you need to select a kernel first.st Okay, so select. So click on the select kernel and choose the python environment. And here, guys, see, I haven't created any environment so far inside this folder. Okay? Because just now I created this folder. So first, st what I will do, guys, I will.

594
01:21:09.910 --> 01:21:17.870
Sunny Savita: I will create an environment. I'll create a new environment over here. So for creating a new environment. I'll simply open my terminal.

595
01:21:18.690 --> 01:21:47.010
Sunny Savita: I'm going to open my terminal. Okay? And over the terminal I will write a command. I think you are pretty much familiar how to create an environment and all, and in our previous classes itself. We have shown you, and even, sir, is doing a coding in the Vs code itself. So I'm assuming you have the entire setup in your system. Okay? So what I'm doing, guys here, I'm going to create a new virtual environment. So let me do it and let me install the all the requirements. And then I'll start writing a code.

596
01:21:47.010 --> 01:21:52.020
Sunny Savita: So here I am writing, Conda, create hyphen, P.

597
01:21:52.280 --> 01:21:53.479
Sunny Savita: E. And B.

598
01:21:53.590 --> 01:22:15.649
Sunny Savita: Python. 3.10. Okay. And guys, please make sure you're gonna use 3.10 environment. Sorry you are going to use this python. 3.10. Don't use below this 3.10. Otherwise you might face some issue with respect to the package, package, version and all. So please make sure you are going to use this python 3.10. If you're going to create a new environment.

599
01:22:15.650 --> 01:22:27.640
Sunny Savita: I can use the existing environment also. That is also fine. But again, I might get an error if any dependency is not there. Okay, so let's create a fresh environment. And let's try to install this requirement dot txt over there.

600
01:22:27.640 --> 01:22:31.429
Sunny Savita: So here my environment is conduct create hyphen, p

601
01:22:31.430 --> 01:22:39.689
Sunny Savita: environment, python 3.10. So it will take some time, maybe 2 to 3Â min. And my environment would be ready. Okay.

602
01:22:40.680 --> 01:22:49.080
Sunny Savita: yeah. So see, bare minimum 3.10. If you are using 3.13, then it is fine, but don't use below 3.10. Okay.

603
01:22:51.450 --> 01:22:58.260
Sunny Savita: And if you are not able to write a code along with me. Then it's fine guys no worries. Later on you can practice.

604
01:23:09.010 --> 01:23:11.319
Sunny Savita: So new environment created.

605
01:23:15.530 --> 01:23:20.329
Sunny Savita: No, if you have already set up, then no need to do it, because I don't ever set up. That's why I'm doing it.

606
01:23:22.550 --> 01:23:33.500
Sunny Savita: Yeah, we can use that environment also, if you have created a environment earlier. Right? So you can use that environment directly over here. I'm just creating fresh because I don't want any dependencies issues as of now.

607
01:23:33.690 --> 01:23:58.890
Sunny Savita: So and you will also be confused, sir, from where you are loading this environment. And all, so 1st of all, guys, what I will do, I will activate this environment. So for activating this environment, here is a command. If you are using command prompt, you can write this conductivate. But if you are using this, get bash. In that case. You will have to use this source. Okay, so source activate. And here give the dot slash and then environment name. So environment name is env.

608
01:23:59.540 --> 01:24:18.219
Sunny Savita: Okay, so my environment is ready. Now, here, I can check. Do we have any dependency or not? So if I will write this pip list, I will not be able to find out any sort of a dependency. Right? So now what I will do, I will simply install it with my pip install hyphen our requirement. Thd, okay.

609
01:24:18.510 --> 01:24:36.460
Sunny Savita: so, guys, I'm installing my record txt. And after installing it, I can start writing a code now. Meanwhile, I can do one more thing. So here now, I can select the correct kernel. Okay? So as of now, I selected a base kernel. My means, my base environment itself. Now, what I will do, guys here, I will select my

610
01:24:36.460 --> 01:25:03.120
Sunny Savita: correct environment. Okay? So I see, many people are not selecting a correct environment over here. Right? So what you have to do, guys, you have to click on this environment option select kernel option. Okay, you will get a select kernel option. Then click on this, select another kernel python environment. And here is your environment. Okay? So the environment basically which you have created right now means you already have it so. I think I no need to drag this part

611
01:25:03.380 --> 01:25:26.249
Sunny Savita: I selected up like the virtual environment which I created just now in my current folder. And now what I will do, guys here, I'll be installing the IP byb kernel also. Okay, that is also required. So simply, I will write here. Print. Okay, okay. And once I will execute. Now it will automatically give me option for installing a kernel. So

612
01:25:26.470 --> 01:25:28.659
Sunny Savita: let me install the kernel also.

613
01:25:31.340 --> 01:25:36.540
Sunny Savita: Okay, so here it is, giving me option for installing a kernel. And the kernel is getting installed.

614
01:25:38.550 --> 01:25:43.869
Sunny Savita: How to confirm. We are using an environment created right hand side, you will be able to find it out.

615
01:25:45.480 --> 01:26:01.078
Sunny Savita: So please. reduce the photo size. It is not in my hand, Sikha. You can do it on it, your on your screen itself. So Zoom will give you this option. You can drag and drop the photo size, and you can resize it accordingly. Okay.

616
01:26:03.817 --> 01:26:21.320
Sunny Savita: Can you show the Recontxt? Yes, I'll show you the recon txt here. I have the link in community files luncheon Google. this one, Jenny pipe. Pdf, I'll come to this one. I'll come to the recontxt. Okay, once I will start writing a code. Okay.

617
01:26:24.470 --> 01:26:32.269
Sunny Savita: so on which basis we should select Llm model. That's a different question. Okay, once we'll deep dive into some projects and different different model, we'll discuss that.

618
01:26:39.460 --> 01:26:46.290
Sunny Savita: Okay, perfect. So my requirement is getting installed guys. And after that I can start writing a code.

619
01:26:48.210 --> 01:26:54.649
Sunny Savita: May I know, guys, you all have this setup in your system. Are you executing a code or not? Are you practicing with the code?

620
01:27:03.860 --> 01:27:04.860
Sunny Savita: Good

621
01:27:11.510 --> 01:27:32.960
Sunny Savita: so kindly? So the Recondot again, here is a recon dot txt. Don't worry. See? You just need to install this package. 5 CPU. So once you will install this package. Now you will be able to like use this files. Only I think, rest of the packaging. You have already installed this election, community luncheon, Google, generative and all. So let me write a code, and then you will get it.

622
01:27:32.960 --> 01:27:43.039
Sunny Savita: So see, guys, we are able to so I'm able to install all the requirements. Now what I will do. I'll here in the code, ipy ipy, Nb file.

623
01:27:43.040 --> 01:28:07.369
Sunny Savita: So 1st I will check whether my kernel is installed or not. So here I'm already installing a kernel. Right inside you can see the process is going on. Once my kernel would be ready, so I will be executing, I will be able to execute myself. So see if my I'm able to execute myself and whatever I will write inside myself, I'll be able to get on my console. Okay? So I hope till here, everything is fine. Now let's start writing a code.

624
01:28:07.580 --> 01:28:14.729
Sunny Savita: So 1st of all, guys what is required, we required an embedding model. So any embedding model you can use?

625
01:28:14.940 --> 01:28:44.239
Sunny Savita: Right? So you can use the open embedding model. You can use the model from the Google generative AI, sorry from the Google Gemini. Okay, you can use the embedding model from the hugging face. And I think so has already shown you the different different configuration with respect to this embedding model. So what I'm doing, guys, I'm going to configure the embedding model from the hugging face itself. So 1st of all what I will have to do. I will have to load my environment variable. Okay, so here, let me write from dot env

626
01:28:44.330 --> 01:28:53.500
Sunny Savita: dot E and B import what I'm going to import here. Load underscore dot env. Okay.

627
01:28:53.500 --> 01:29:20.649
Sunny Savita: so guys here, I'm going to load my environment variable. I already kept my all the key inside the dot env file. See, I have a key for the open. A Google Api grog is there hugging faces there? Right? So whatever key I want to use, I can simply use. Now, here, what I'm doing, guys, I'm going to load the environment variable. Okay? Now, see, it is showing me true, because my keys are there inside the dot env file. Now.

628
01:29:20.880 --> 01:29:50.649
Sunny Savita: after that, what I will do. So after that, guys, I will configure my model. Okay, my embedding model. So I can simply take it from here itself. So already written a code inside this hugging face, dot Ipynb, I'm opening the file. And 1st of all, let me set the environment variable. And after setting the environment variable, okay, I will be loading my model. So it is saying, OS is not defined, so I can simply write import OS.

629
01:29:51.000 --> 01:30:09.930
Sunny Savita: Here, let me write import. OS, okay. Now, after that, what I will do so after that, guys, I will load my model hugging face, embedding model. So I copied this code and I kept it in my new file. Okay, now let me execute it. If everything is perfect, I'll be able to load my model.

630
01:30:09.930 --> 01:30:26.270
Sunny Savita: So it is giving me a it is giving me what guys it is giving me a module not found error. So if you're getting this type of error, so you just need to do one thing, you simply need to install the package. Okay, so mention this particular package inside the recommend txt. So here, I'm going to mention it.

631
01:30:26.470 --> 01:30:44.730
Sunny Savita: And then what you can do. You can install it through the console itself. Okay, through the Cmd, only so, Pip, install. And this lunch and hugging face. So my model. Sorry my package is getting installed inside my current virtual environment. And here, guys, you can see after that, I'll be able to load it.

632
01:30:44.870 --> 01:30:59.739
Sunny Savita: So let me do this setup guys. And after that I'll show you how to store this particular data inside the vector database. So guys tell me, you have this entire code. Now, did you install this entire code? Yes or no.

633
01:31:00.930 --> 01:31:04.910
Sunny Savita: Did you download this entire code? Did you kept this entire packages or not?

634
01:31:05.260 --> 01:31:11.639
Sunny Savita: If you haven't done it, you can do it. If you don't want to do it right now, you can do later on. Okay, it's up to you.

635
01:31:12.850 --> 01:31:18.219
Sunny Savita: So this package is getting installed. It might take some time, 2 to 3Â min. So let it install.

636
01:31:24.330 --> 01:31:27.789
Sunny Savita: Okay, we'll do it later. No worries, guys. You can do it later.

637
01:31:29.130 --> 01:31:30.870
Sunny Savita: Hmm, hmm!

638
01:31:55.300 --> 01:32:00.099
Sunny Savita: How we can define the role security and level that that's a different discussion. Vijay, okay.

639
01:32:00.460 --> 01:32:06.089
Sunny Savita: so while we are going to configure the model there itself, we have to define all the security level and all.

640
01:32:09.260 --> 01:32:16.650
Sunny Savita: Yeah, you can write, pip, install, hyphen, or reconnot pxt, or like manually. Also, you can install that specific package. Both are fine.

641
01:32:17.450 --> 01:32:22.309
Sunny Savita: but please mention inside the recur. If any new package is coming okay.

642
01:32:29.750 --> 01:32:37.009
Sunny Savita: you can use some other embedding. Also, whatever is fine for you. You can use from the Google Gemini this one Google Gemini. Also.

643
01:32:37.390 --> 01:32:43.310
Sunny Savita: you can generate Api Key from the Google AI studio. And then that embedding model. Also, you can use

644
01:32:43.650 --> 01:32:48.519
Sunny Savita: it gives you the access for 15 days. Okay, 15 days free access.

645
01:33:05.960 --> 01:33:15.229
Sunny Savita: So it is installing a torch guys. Why, it is installing, you know, because it is loading a model over the memory, using that sentence, transformer, library.

646
01:33:20.670 --> 01:33:31.750
Sunny Savita: and more. This torch module is a little huge model this one module. Actually, you, if you will see the size of this torch now, it will be in the Mbs, right? So mo more than I think, 500 Mbs.

647
01:33:32.080 --> 01:33:33.800
Sunny Savita: so that's why it is taking time.

648
01:33:36.420 --> 01:33:45.099
Sunny Savita: Yeah, as of now, we are just using for the learning purpose. But whenever you are using in a real time. You can use some good models like open AI based model. And all. Okay.

649
01:33:46.250 --> 01:33:55.850
Sunny Savita: what is the best embedding model? So far, see? We cannot say this directly, you will have to check the different different dashboard. Okay? So I would suggest, you check out with the Arena leaderboard.

650
01:33:56.030 --> 01:34:01.670
Sunny Savita: There you will find out some details there, or the hugging face itself, you'll find out a different different leaderboard.

651
01:34:02.740 --> 01:34:07.489
Sunny Savita: Just go and check which embedding model is leading, as of now. Okay?

652
01:34:16.470 --> 01:34:19.870
Sunny Savita: Oh, okay, guys, let's take time.

653
01:34:45.420 --> 01:34:50.589
Sunny Savita: Okay, perfect guys. So it is there. Now, what I can do. I think I can load the model.

654
01:34:50.770 --> 01:34:54.580
Sunny Savita: So once I will run it. Now I'll be able to load my model.

655
01:35:24.510 --> 01:35:34.650
Sunny Savita: Yeah, Rahul, I'll tell you that. 1st let model load and let me show you some concept. With respect to the similarity, search and all. And then we'll talk about that. Okay.

656
01:35:35.560 --> 01:35:37.559
Sunny Savita: the vector database package. And all

657
01:35:41.550 --> 01:35:47.739
Sunny Savita: this is all the dependencies. If you want to install it inside your system, you can do it. I'm mentioning in the chat. Okay.

658
01:35:53.780 --> 01:36:08.760
Sunny Savita: yeah, I'll give you the break. 1st of all, let me show you the couple of concept. Then I'll give you the break. So see, guys, I'm able to load the model. Now, after loading a model, what I can do so simply, I can embed my query. I can use this embedding model. So let me take this embedding dot

659
01:36:08.970 --> 01:36:20.749
Sunny Savita: here I will write embed underscore query, okay, now, if I will write my query so it will be able to embed it. Let me check out that. So let's say, here I'm writing. Hello, AI,

660
01:36:20.860 --> 01:36:47.139
Sunny Savita: and here, if I am going to execute it. So yes, I'm able to get my. Vector, now, what is this? Vector? As Sarah has told you, this vector is nothing. It's a numerical representation of the given sentence, okay, now, why it is required. So it is required while we are going to be create a rag kind of architecture. Okay? Because they are actually, we perform the similarity search and based on that we fetch some relevant information and we pass it to our model.

661
01:36:47.140 --> 01:36:51.479
Sunny Savita: So 1st of all, guys, let me talk about the similarity search. Okay.

662
01:36:51.590 --> 01:37:06.649
Sunny Savita: at the different different similarity. Such technique we have. So here I will show you 2 similarity. Such technique, first, st is a cosine similarity, and the second is the L. 2 distance. That is also called the Euclidean distance. Okay, so what I'm going to do from the sk, learn

663
01:37:06.900 --> 01:37:12.179
Sunny Savita: that I'm writing as killer dot matrix dot

664
01:37:12.810 --> 01:37:19.440
Sunny Savita: pair wise. Okay, pair wise. Now, here, I'm going to import this cosine similarity

665
01:37:19.700 --> 01:37:49.370
Sunny Savita: cosine similarity. Now, why, I'm showing you this similarity tech similarity techniques and all you will get to know in some time. If you don't have that idea why, to use the similarity, search and all it, it is going to be clarifying in within, within hard itself. Okay. So here I'm going to write cosine. Similarly. Now, what I will do, guys, I will import it. And now tell me, guys you have the setup right till here I am assuming you are able to execute everything. And now I'm going to start from here. Okay, this is the fresh start

666
01:37:49.580 --> 01:37:53.619
Sunny Savita: over here from cell number 10. This is a fresh start.

667
01:37:53.880 --> 01:37:57.740
Sunny Savita: Are you able to get it or not? Tell me, yes or no.

668
01:37:58.810 --> 01:38:22.800
Sunny Savita: Yes. Okay, perfect guys. Now, what I will do. So here I will. like, import the cosine similarity. Okay, now, let me take couple of documents over here. So here, I'm going to write documents. Okay, now, what is the document? So sentence itself is called a document. Okay? So I'm going to write a multiple sentences over here. So multiple sentences like, let's say, Here, I'm writing. What is that

669
01:38:22.960 --> 01:38:28.690
Sunny Savita: capital of what is that capital of U.S.A,

670
01:38:28.890 --> 01:38:35.399
Sunny Savita: okay, now, my next sentence is going to be I'm going to write a next sentence. So here the next sentence.

671
01:38:35.590 --> 01:38:42.350
Sunny Savita: who is a president of who is a precedent?

672
01:38:44.810 --> 01:38:45.820
Sunny Savita: All?

673
01:38:46.080 --> 01:38:52.419
Sunny Savita: Usd, okay, now let's say, here, I'm going to write a next question, who is that?

674
01:38:53.770 --> 01:38:58.820
Sunny Savita: Who is a right minister?

675
01:39:00.910 --> 01:39:01.850
Sunny Savita: Call

676
01:39:02.850 --> 01:39:21.799
Sunny Savita: India? Okay, so here I written 3 documents. Now let me execute it. Okay, now, what I'm doing, guys. So see, this is my document. And I want to do the similarity search I want to check. This sentence is more similar to this particular sentence, this all the sentence. So here I'm going to create one more variable. So my variable name is going to be Michael.

677
01:39:21.870 --> 01:39:33.889
Sunny Savita: Okay, so here I will be writing. My query means, I just, I just want to check the similarity between the 2 sentences. Okay, so here I'm writing my query. My query is going to be, let's say, here I'm writing

678
01:39:34.080 --> 01:39:36.370
Sunny Savita: Narendra modi.

679
01:39:36.770 --> 01:39:42.780
Sunny Savita: Okay, is that Prime Minister

680
01:39:42.980 --> 01:40:05.959
Sunny Savita: of India. Now tell me, guys, this particular sentence is the most similar to which sentence in the given document, whether from the 1st sentence, second sentence, or the 3rd sentence, tell me, guys, 3rd sentence, second sentence, or 1st sentence, someone is saying second sentence, and his second sentence, how it will be related to the second sentence, who is a Prime Minister of Usd.

681
01:40:06.260 --> 01:40:21.149
Sunny Savita: Is a Prime Minister of U.S.A. Or India. So this will be more similar to this 3rd sentence, right? So as a human, you are able to identify it right? Based on your knowledge. So let's see mathematically, are we able to prove it mathematically.

682
01:40:21.290 --> 01:40:36.640
Sunny Savita: Okay. So here, what I'm doing, I'm going to use the the cosine similarity. Okay? But before using the cosine similarity, we'll have to embed this entire data. Okay? So here, what I'm doing, I'm going to use my embedding model. So here I'm writing embedding

683
01:40:37.860 --> 01:41:00.469
Sunny Savita: dot. Okay, here I'm writing embed underscore query, I'll pass my query. Okay, I'll pass my document as well as my query. So here, let me take this document. I can directly pass list of document. That is also fine. Okay, so let me take this document. I'm going to copy and paste over here. Then what I will get, guys. See here. I'll be getting my

684
01:41:00.880 --> 01:41:17.580
Sunny Savita: document embedding. Okay, let me store inside the variable. So my variable name is document embedding. Okay, let me execute it, and yes, I'll be able to embed my data, maybe something is wrong. Let me, check list object has no attribute replace what does it mean

685
01:41:18.220 --> 01:41:21.753
Sunny Savita: list object not having the

686
01:41:23.320 --> 01:41:27.540
Sunny Savita: I have a embedding model. Let me check out guys, whether it is

687
01:41:28.516 --> 01:41:30.800
Sunny Savita: okay, it is embed documents

688
01:41:31.200 --> 01:41:52.389
Sunny Savita: just a second, guys, I think the function would be different. Yes. So instead of the embedding query, I will have to use the embed document. Why? It is required because we have a multiple document. We have a list of document. Okay, we don't have a single query as of now. So let me execute it and see we are able to embed the entire sentences, whatever was there inside the list. Okay.

689
01:41:52.390 --> 01:42:05.970
Sunny Savita: So here you will find out all the 3 sentences. Now, what I will do, guys, I will embed my query, okay, so here, let me do one thing. Let me embed my query so for that, I'm going to use the same function. This embed query, only.

690
01:42:05.970 --> 01:42:17.199
Sunny Savita: so let me copy and paste over here. This one. Okay? And what I will do. I will use this particular variable, this my query, okay, here is my query. Right?

691
01:42:17.200 --> 01:42:28.550
Sunny Savita: So once I'll do it. And this I will assign inside the variable. Okay, so I'm going to assign this inside the variable, and it's going to be

692
01:42:28.580 --> 01:42:33.460
Sunny Savita: query embedding, let me do one thing. Let me

693
01:42:34.320 --> 01:42:46.720
Sunny Savita: right like this. Okay, now, everything is fine, everything is clear. So let me execute this one. So I got my query embedding. If you will go and check with this query embedding, you will be able to get that. Okay. Now.

694
01:42:46.720 --> 01:43:05.659
Sunny Savita: now, what I want to do, I want to do the similarity check. Okay, I want to perform the cosine similarity check. Now, how I can do it. So I already like, imported this function cosine similarity. So I'm just taking this cosine similarity from here. Okay? And after taking the cosine similarity. I will pass my document

695
01:43:05.750 --> 01:43:24.300
Sunny Savita: as well as my query. Okay, you just need to pass 2 things. So here let me pass my query embedding. So I have to pass it inside the list itself. So query underscore embedding. And then what I will do is I'll be passing this document only. Okay, the all the document which I embedded.

696
01:43:24.300 --> 01:43:46.830
Sunny Savita: So let me take this document embedding and let me check the similarity search between all of these. So if I'm going to execute it, guys. Here you will be able to find out a similarity. Now tell me where you will. You are going to find out, like the most most similar score. Tell me the highest similar similar score in the 3rd one itself, so are we able to prove it mathematically or not.

697
01:43:46.970 --> 01:44:00.929
Sunny Savita: Yes or no. Now, why I shown you this concept because you are going to use it further while you are going to create a vector store, or while you are going to be performed, the similar to search right so under under the hood, right? How the thing is working

698
01:44:01.000 --> 01:44:29.429
Sunny Savita: right like this. The thing is working. That's why I wanted to show you this one at a 1st place. Understood or not. Guys tell me, Sanjeev is saying, Sir, you are very fast. Can you slow down, Sanjeev. See, I haven't shown you anything you will have to match with this speed. Okay, if you want to learn. Otherwise it would be difficult for you, and even for us as well, to cover up the entire syllabus. Okay, now tell me, guys, are you able to understand it or not? If you want a revision, I can give you the revision, the complete revision of it.

699
01:44:29.540 --> 01:44:32.600
Sunny Savita: But tell me if the concept is clear or not

700
01:44:34.630 --> 01:44:49.939
Sunny Savita: looks good. Okay? Great. Now, guys, we have a different different metrics is not only the cosine similarity, we have other metrics also. So let me do one thing. Let me show you one more metrics. So one more matrix is called Euclidean distance.

701
01:44:49.940 --> 01:45:14.570
Sunny Savita: Okay, I hope you are familiar with this cosine similarity and the Euclidean distance mathematically, if not in that case you should visit the Nlp Nlp. Session, which was talking about right? So there we have already discussed about the mathematical front of this formulas and all everything with respect to these formulas. 1st of all, let me show you the Euclidean distance, and I will give you the quick revision after that.

702
01:45:14.620 --> 01:45:19.703
Sunny Savita: So here, what I'm doing, guys, I'm going to import one more

703
01:45:20.810 --> 01:45:43.739
Sunny Savita: method. So instead of the cosine similarity, I'm going to import Euclidean distance. Okay, from the same module itself. Now, any of them you can use. But I'll show you when you have to use which one means the cosine similarity or the Euclidean distance. So what I'm doing, guys, instead of this cosine similarity, I'm going to write this Euclidean distance. So you

704
01:45:45.570 --> 01:45:55.730
Sunny Savita: plea, Dn distance. Okay, so let me execute it and see whether it is working or not.

705
01:45:56.050 --> 01:46:03.790
Sunny Savita: Yeah, it is working. Now what I will do, guys, I'll do the same thing. Okay? So I will take this Euclidean distance. And here I will

706
01:46:04.878 --> 01:46:15.620
Sunny Savita: like. I will call this particular method this function. And now I will pass my query embedding as well as the document embedding. Okay? And I will be able to check the similarity in between.

707
01:46:15.920 --> 01:46:24.479
Sunny Savita: So here is my query embedding, and what we have, I have my document embedding both, so let me execute it, and let me check the similarity in between. So see

708
01:46:24.610 --> 01:46:36.040
Sunny Savita: Euclidean distance. What Euclidean distance is doing Euclidean distance. Actually it is checking a distances between the 2 sentences. Now here, tell me, guys, which one is the nearest one.

709
01:46:36.350 --> 01:46:38.130
Sunny Savita: which one is the nearest one

710
01:46:38.590 --> 01:46:44.510
Sunny Savita: 3rd one is a nearest one, correct. So this will be most similar sentence.

711
01:46:44.640 --> 01:46:50.759
Sunny Savita: because Euclidean distance what it is doing it is going to check the distances between 2 vectors

712
01:46:52.120 --> 01:46:56.480
Sunny Savita: getting my point, yes or no. Is it getting clear or not

713
01:46:56.860 --> 01:47:09.600
Sunny Savita: so? No, it is not a normalized one. See, this is not a normalized one, I agree. But, guys here how to identify the nearest document, the nearest similarity search. So you will have to check the

714
01:47:09.750 --> 01:47:22.350
Sunny Savita: what you will have to check, you will have to check the lowest distance. So my 1st 3rd one, the 3rd number is the lowest one. So my 3rd query will be, See here, sorry. My 3rd document will be more closer to this particular query.

715
01:47:22.560 --> 01:47:41.680
Sunny Savita: Okay, this 3rd document will be more closer to this particular query. Okay, now, let me tell you the differences. So just a second. I kept the differences also. If you have any sort of a confusion. Then you can just look into this simple differences. Okay, with that, most of the doubt will be clarified.

716
01:47:41.820 --> 01:48:07.259
Sunny Savita: So, guys here, you can see. Whenever we're talking about the cosine similarity. Okay, so what's the range of the cosine similarity? The range of the cosine similarities minus 1, 2 1, okay. And whenever we talk about the cosine similarity, so what it is doing, it is going to check the direction. Okay means it is going to check the angle, the direction between 2 vectors. Now, whenever we're talking about the

717
01:48:07.720 --> 01:48:21.089
Sunny Savita: L 2 distance. So what this L. 2 distance is doing this l. 2 distance. Actually, it is focusing. Okay, so let me correct one thing over here inside the cosine stability. So it's going to be check the angle between

718
01:48:21.410 --> 01:48:22.340
Sunny Savita: 2

719
01:48:22.830 --> 01:48:30.600
Sunny Savita: vectors. Okay. And whenever we talking about the L 2 distance. So what it is doing, it is going to check the magnitude plus direction

720
01:48:31.040 --> 01:48:57.569
Sunny Savita: right? It is a mathematical thing, the mathematical concept. If you want to know more about it, you should go with the Nlp lectures, where we have already discussed all this stuff. And what is the range of this? L 2 distance. The range is from 0 to infinite. And what's the range of the cosine similarity? So the range of the cosine similarities from minus one to minus one. So this kind of thing people might ask you in an interview. That's why I have discussed this thing.

721
01:48:57.570 --> 01:49:04.990
Sunny Savita: Now, guys, let me give you the quick revision what I'm trying to do. Okay? And with that, after that I'll give you the break and we'll discuss the vector store.

722
01:49:05.070 --> 01:49:22.190
Sunny Savita: So here first, st we have loaded a model. Now, after loading a model, we have embedded that particular like, we have embedded a query embedding is nothing. It just like the mathematical representation of any sort of a document, or or any sort of a this one sentence.

723
01:49:22.190 --> 01:49:41.010
Sunny Savita: Now, what I'm doing here, I'm going to import the cosine similarity. Okay, just to check the similarity between this document and the given query, okay, now, why? I'm doing it because it's a the fundamental concept of the vector, database of any vector, database. So what I what I'm doing here. So here I'm going to embed the query and all the document and all everything.

724
01:49:41.010 --> 01:50:10.040
Sunny Savita: Now, after that what I'm doing, guys. So here I'm going to perform a similarity cell, the cosine similarity. So the cosine similarity, the range will be from minus one to one. Okay, and wherever I'm I'm finding out the most similar score. That will be my nearest document. Okay? The nearest query and document. Now, if I'm talking about the Euclidean distance in the Euclidean distance, basically, we are going to check a distance between 2. Vector so here we are going to be checked. The most the lowest distance. Okay between the 2 document.

725
01:50:10.090 --> 01:50:21.069
Sunny Savita: Now, here, you can see guys here is a like the differences. Okay, if anyone is asking me to interview, you can explain in such a way. But tell me, guys, is it clear or not?

726
01:50:22.200 --> 01:50:26.380
Sunny Savita: This is getting clear or not to all of you? Yes or no.

727
01:50:26.780 --> 01:50:32.820
Sunny Savita: If you don't know about the Sk learn, forget about it. It's a package, actually, which we use inside the machine learned.

728
01:50:33.000 --> 01:50:33.980
Sunny Savita: Okay.

729
01:50:34.600 --> 01:50:39.159
Sunny Savita: if you have any doubt anything you can ask me right now, because I'm looking into the chat guys

730
01:50:39.940 --> 01:50:58.940
Sunny Savita: is Euclidean distance the L. 2. Distance correct. Euclidean. Distance is also called the L. 2 distance Mannet, and distance is called l. 1 distance. Okay, so can you summarize one more time, Sikha, just go through with this particular thing, the code and all everything. You will be able to get it if you're not able to get anything you can ask me in a doubt session. Okay?

731
01:50:59.360 --> 01:51:09.620
Sunny Savita: So why? Query embedding in the list. Because if we have a multiple sorry in the function, actually, we have to pass in this particular way. Okay, we have to pass in a list format. That's it.

732
01:51:10.930 --> 01:51:22.730
Sunny Savita: This is clear. Great guys, clear, clear. So do we need embed documented query both. Yes, you will have to do both how you will be able to get then, the similarity search. In that case.

733
01:51:24.080 --> 01:51:33.040
Sunny Savita: so Cosine used to calculate. Yes, Cosine, actually, it's a mathematical term mathematical formula behind the cosine similarity. And it is being used. Okay.

734
01:51:33.260 --> 01:52:02.509
Sunny Savita: So when to use equilibrium and when to use cosine. So, guys personally, I would suggest to you. If you don't know anything you can go ahead with the cosine. Okay, it will give you the more accurate result. But in between, actually, between both, you can do the some this one. Practical. Okay, you can check out you can do some your own research. Whatever is like. Whether this cosine similarity is good, or this l. 2. Distance is good, right? You can check, based on your own experiments and all.

735
01:52:04.780 --> 01:52:17.260
Sunny Savita: It's very clear. Great, fine. Thank you guys. So let's do one thing, guys, let's take a break. And after that I'll show you the vector, store. Is it fine to all of you. Can we go ahead for the break the next 15Â min of break? Yes or no.

736
01:52:19.350 --> 01:52:29.610
Sunny Savita: So show the file. I'll give you this entire code. And all guys, it is only for you. Okay, so please don't be hurry for this entire code and all, I'll I'll give it to you. Okay, this one

737
01:52:35.380 --> 01:52:59.069
Sunny Savita: great, perfect. Thank you guys. So let's take a break. Let's take 15 or 15Â min break, and after that I'll show you the the vector store. Okay, how the vector store works and all the like, the different different thing, the indexing mechanism and all. And don't worry guys. Not only in terms of practical. We'll discuss in terms of the theory as well. Okay, I'll design a diagram and all everything, and we'll discuss in terms of the theory

738
01:52:59.210 --> 01:53:00.230
Sunny Savita: got it.

739
01:53:04.440 --> 01:53:10.000
Sunny Savita: You should look into the positive score regarding the cosine similarity.

740
01:53:12.400 --> 01:53:21.300
Sunny Savita: We're just saying, please cover all the theory, then. Code. Yeah, because this is a very generic concept. That's why I took it. First, st we'll discuss about the theory and all everything. Okay, don't worry

741
01:53:22.890 --> 01:53:31.070
Sunny Savita: perfect guys. So let's take a break. Let me put the timer for 15Â min, and then we'll start with the again. Okay, thank you. I'm putting a timer

742
01:53:32.740 --> 01:53:38.539
Sunny Savita: and don't worry about the file guys again. I'm saying, Sarita. 1st of all, let me complete it. Then I will give it to you.

743
01:53:38.640 --> 01:53:40.159
Sunny Savita: Okay, thank you.

744
02:08:47.930 --> 02:08:51.369
Sunny Savita: Okay, guys. So can we start again? Everyone is there. Right?

745
02:09:00.170 --> 02:09:04.420
Sunny Savita: Perfectly. So let's start. Let's begin with the session.

746
02:09:08.430 --> 02:09:22.382
Sunny Savita: Okay, so guys, we understood about the the similarity search and all. Now, we have to understand about the vector, databases. Okay, so 1st of all, guys, what you have to do for understanding the vector, databases.

747
02:09:22.990 --> 02:09:28.460
Sunny Savita: you will have see the core fundamental of the vector, database is the embedding itself.

748
02:09:28.470 --> 02:09:42.919
Sunny Savita: I think, which we already know right? And the second thing, basically how to perform the similarity search on top of it. Now, apart from this one, there will be one more thing like how to create an index. Okay, so whenever we are going to initialize any sort of a vector, database.

749
02:09:42.920 --> 02:10:07.959
Sunny Savita: So at 1st place, actually, we have to create an index. Okay. And inside the index itself, we are going to store our entire data in the form of vector and then on top of it, we are going to perform the similarity search. Okay, so let me show you a couple of more step, and then I'll explain you this theory. So 1st of all, you have to import the file size FAIS. S. Now, please make sure you have this particular package inside your system.

750
02:10:08.240 --> 02:10:26.470
Sunny Savita: The package name is what the package name is 5 CPU. If you are working on Gpu, then you can install the 5 Gpu. But if you are working on CPU, that 5 CPU would be fine. Okay, so 5 CPU is one of the package guys which is required for this particular implementation. So here I already install in my virtual environment.

751
02:10:26.470 --> 02:10:40.060
Sunny Savita: If you haven't installed guys, please install. I already given you the requirement inside the chat itself. Okay, and later on, I'll give you this entire code. My voice is clear, guys, yes or no. Can you hear me perfectly? Yes.

752
02:10:40.420 --> 02:10:43.459
Sunny Savita: if you're able to hear me, please do let me know.

753
02:10:44.260 --> 02:11:07.989
Sunny Savita: Perfect. Better. Okay, fine. Now, what I have to do, guys see? I imported a files. Now I will have to import the files one more time. This is from the lunch and itself. Okay, so lunch and also provide us one wrapper. With respect to this files, not only the files. We have so many vector databases, I think. Listen, has already shown you again, we'll look into that. Okay, now.

754
02:11:08.120 --> 02:11:34.530
Sunny Savita: So we have imported the files. Now, apart from this one guys, we'll have to import one more thing so that the import statement is going to be what the import statement is going to be in memory. Doc. Store, I'll talk about what is the in memory, Doc. Store? What is the on disk? Persistence? And what is the cloud one? Okay, each and everything we're gonna discuss. So here I'm going to take the same one this luncheon community. Now from the luncheon community I'm going to write.

755
02:11:34.530 --> 02:12:01.689
Sunny Savita: I'm going to import this Doc store. Okay, this, Doc is stored as T ore. And then here, I'm going to write.in memory in underscore memory. Okay? And I'm going to import what guys I'm going to import in a memory Doc store. So this is again, a class from the inside. The lengthen itself lengthen is giving you each and everything. So no need to worry about anything. you can directly import everything from the link and itself. Okay.

756
02:12:01.690 --> 02:12:14.834
Sunny Savita: So see, I'm able to import all this thing. Now, after that, what I will do after this one, what I will do, guys, I'll use this files. Okay? And using this files, I'll create an index. Okay, so let me do one thing. Let me

757
02:12:15.330 --> 02:12:21.749
Sunny Savita: like, right over here. Index. Okay. So once I will write this index dot

758
02:12:21.920 --> 02:12:30.710
Sunny Savita: index. And here I will have to write one more thing. Flag. Okay, flag, and then I will write here. L, 2. Okay.

759
02:12:30.710 --> 02:12:49.410
Sunny Savita: And so see guys, I'm with this particular command, I'll be able to create my index. Okay? And inside this index itself, I'm going to store my entire data right? If you don't know about the index it will clarify in some time, so I can assign this thing to my variable. My variable name is going to be what index itself.

760
02:12:49.410 --> 02:13:12.470
Sunny Savita: So I created one index. And inside this index itself, I'll be storing my data. Okay, so here, guys, one more thing is there. So guys here, you can mention the embedding also this embedding size. So we have seen the embedding size of this particular model is 7, 68. Okay. If you don't know about it, you can simply check out with the length. So here you can check out with the length right?

761
02:13:12.470 --> 02:13:19.869
Sunny Savita: So the size of the embedding is 384. Sorry it is a Mini model, so the size of the embedding is 3 84. Okay.

762
02:13:19.870 --> 02:13:43.299
Sunny Savita: so mention this. 384. Where inside your index, while you are going to create an index. Now, inside this one, you will have to mention this. 3, 84. Now, whatever size you have with respect to your embedding, right? So please mention that specific size while you are going to create a index. Okay. Now, here, here, guys, see after creating an index. See, here is what here is my index, guys. Now, what is this index?

763
02:13:43.300 --> 02:14:05.389
Sunny Savita: So whenever we initialize any vector store on any vector database for storing a document or for storing a data for storing an embedding right? So we always have to create the index. Okay, now, what does it mean? So we'll try to understand that the index part. Okay. But 1st of all see over here how to create an index. So here I created an index. Now, one question to all of you.

764
02:14:05.410 --> 02:14:12.960
Sunny Savita: Here I created an index using cosine similarity or L 2 distance. Anyone can tell me.

765
02:14:14.690 --> 02:14:15.770
Sunny Savita: Tell megans.

766
02:14:18.690 --> 02:14:34.119
Sunny Savita: Here we have created an index using cosine similarity or L 2 distance. So we have created our index using the L 2 distance. Okay, can we create it using the cosine similarity? Can we do it? Yes, this is also possible.

767
02:14:34.160 --> 02:14:51.070
Sunny Savita: That is also possible, we can create using the cosine similarity also. Okay, now, guys, after creating this index, what I will do. See, let me show you the index object. So here is my index object. Now everything is fine till here. Code wise. I'm asking. Everything is getting clear or not. Yes or no.

768
02:14:51.190 --> 02:15:14.439
Sunny Savita: and I'm going very, very slow, guys. And I hope so. Like, once, you will revise this entire thing. It will give you the more clarity. Okay, now, after this one. See? We have created an index. Okay, now, I'm going to use this files, this wrapper from the link chain. Okay? And inside this lengthen wrapper. Okay, you using this link and wrapper, this files class.

769
02:15:14.590 --> 02:15:38.989
Sunny Savita: I'm going to create my vector, store. Okay, now, see how we can do it. So we're creating a vector, store guys, we'll have to pass couple of parameter over here. Don't worry, guys. I'll give you this entire code. 1st of all, let me show you one more step. Okay, just one more step is required, and after that I will give you the quick revision of each and everything. So here, what I'm doing. I'm going to create my files wrap up. See? I'm going to initialize my files.

770
02:15:39.030 --> 02:16:03.510
Sunny Savita: A class. Okay? This files class. Actually, I got from the lengthen itself. And it is a wrapper for creating the files. Data files vector store. Okay, from the lengthen itself. Now, what is the 3? 84. So it is a dimension size. So here, I'm saying, Okay, I want to create an index with this 3, 84 dimension. That's it. Now, what I'm doing. I'm going to mention the parameter. So this is my, all, the parameter guys just focus over here.

771
02:16:03.540 --> 02:16:15.530
Sunny Savita: So the 1st parameter is the embedding. So here I need to pass my embedding model. Okay, so what is my embedding model? Can I check with my embedding model? Yes, so this is my embedding model which I already loaded.

772
02:16:15.940 --> 02:16:25.369
Sunny Savita: Okay, this one embeddings. Now after like after guys after embedding what is required, what else is required? So this index is required.

773
02:16:25.400 --> 02:16:50.519
Sunny Savita: Okay, then, guys, here, the next thing is required. Doc, store, how we are going to be stored. This data, we are going to be stored this data in memory itself. Okay, so this, doc is stored. This particular parameter is also required. Now, one more thing is required index to dock store id. So I will talk about this particular parameter. Why, it is like why, it is necessary over here. Once we'll store the data, you will get some like the

774
02:16:50.520 --> 02:17:06.669
Sunny Savita: uuid. Okay, with respect to each and every document. And with this particular parameter, we can access those uuid and the respective document. Okay, so here guys, what I'm going to do. Now, I'm going to create my vector store. And all this parameter is required

775
02:17:06.670 --> 02:17:17.760
Sunny Savita: for creating this vector, store. Okay, so let me write here, vector, underscore store, not a store guys, it is a store. Okay?

776
02:17:17.760 --> 02:17:36.990
Sunny Savita: So I have my vector, store. Now, after this one, right, see what I will do. I'll I'm adding my data. Okay, inside this vector, store. So how to add the data inside this vector, store. So simply, you can take this vector store object, and you can call one method on top of it as simple as that. So the method name is going to be, add underscore text.

777
02:17:37.059 --> 02:17:50.550
Sunny Savita: Okay, now, inside this method, see what you can do. Now you can store the. What you can do is you can store the document inside this particular index. Now, how to store that document. So simply, you need to write here. Okay, so I'm going to write

778
02:17:50.920 --> 02:17:54.000
Sunny Savita: some random sentences. Let's say, AI is

779
02:17:54.549 --> 02:18:01.350
Sunny Savita: future. Okay. Now, the next one is AI is powerful. AI is

780
02:18:01.950 --> 02:18:07.460
Sunny Savita: powerful. Okay. Now the next one is going to be. Let's say, here I'm writing dogs

781
02:18:08.330 --> 02:18:22.970
Sunny Savita: are queued. Okay? So this couple of sentences, I'm going to store where inside my vector, data base. Now, once, I will run it, guys. Okay, so see how many, how many sentence we are able to store inside the vector database. Tell me

782
02:18:22.969 --> 02:18:44.440
Sunny Savita: 3 sentence. So with respect to each sentence, with respect to each document, I'll be getting one uuid. Okay, so here, what is the what is this one? This is a uid. Okay, now, if I want to check right? If I want to get all this uid. So simply, I can take this vector store. Okay? And on top of it, I can call this particular parameter index to

783
02:18:44.440 --> 02:19:03.949
Sunny Savita: is store id. So once I will call this parameter guys. So I will be getting my all. The id, so 0 is this one's 1st is this one, and second, is this one. It is a unique Id. With respect to every document, so AI is a future is belonging to the first.st Id AI is powerful, is belonging to the second Id. And the docs are cute, is belonging to the 3rd Id.

784
02:19:03.950 --> 02:19:09.900
Sunny Savita: I hope, till here everything is fine. Now, guys, now, the next thing is what. So let's say over here.

785
02:19:10.150 --> 02:19:23.089
Sunny Savita: Okay, over here. See on top of this vector, database, if I want to perform the similarity search. Okay, if I want to perform the similarity search. So let's say, here, I'm writing vector store, dot, similar? T,

786
02:19:23.510 --> 02:19:34.399
Sunny Savita: search. Okay? Similarity. Underscore. Search. Now, here, I will pass my sentence. Okay, let me pass my sentence. So my sentence is, my sentence is going to be, tell me

787
02:19:35.190 --> 02:19:37.610
Sunny Savita: about, yeah.

788
02:19:37.670 --> 02:20:03.180
Sunny Savita: okay. And here I'm saying, give me only 2 relevant document. Okay? So here I'm mentioning the K parameter, the K parameter is going to be like, how many documents actually, I want. Okay, so I'm writing. K is equal to 2 as of. Now, let's see what I'll be getting over here, I just have single document. So list is not required. Okay, so this is my function. Vector is stored similarity search. Now, what I'll be able to get guys, I'll be able to get my result.

789
02:20:03.180 --> 02:20:22.980
Sunny Savita: So let me do one thing. Let me execute this particular code and let me show you okay, what would be the result. Now, guys, if I'm writing, K is equal to 2. Okay. And with respect to this, tell me about AI. Now tell me what would be there inside the result variable. If we if we are talking about the result, variable guys tell me so we'll be having this 2, 1 AI is powerful and AI is feature.

790
02:20:23.030 --> 02:20:27.640
Sunny Savita: Are we getting a similar result or not from my database? Yes or no?

791
02:20:28.130 --> 02:20:35.290
Sunny Savita: How many data? How many see, Mamta, how much, how many like document we have stored inside the vector database? 3.

792
02:20:35.410 --> 02:21:03.380
Sunny Savita: Okay, how much I want? Tell me, I want, I only want 2 similar document. Okay, so that's why I'm writing. K is equal to 2. So how how many I'm getting? K is equal to means I'm getting 2 document. Only let's say, instead of this, K. Is equal to, I'm writing one, so it will give me only one document. So let me run it. And here, see, guys how many documents we are getting. We are getting 2. If I'm writing 3, it will give me 3. In that case, see? So I'm getting all the 3. But the dogs are cute. It is giving it the end.

793
02:21:04.230 --> 02:21:06.390
Sunny Savita: Getting my point, guys, yes or no.

794
02:21:06.760 --> 02:21:07.740
Sunny Savita: Tell me.

795
02:21:08.200 --> 02:21:16.670
Sunny Savita: yes. Now, why we are storing this data inside the vector store so that we can create a rag on top of it for creating a rag. Only we are doing all this thing.

796
02:21:17.510 --> 02:21:25.420
Sunny Savita: Tell me how many of you you are able to understand this vector store and the similarity search guys. Tell me, is it getting clear or not to all of you.

797
02:21:25.700 --> 02:21:26.990
Sunny Savita: yes or no.

798
02:21:30.620 --> 02:21:32.440
Sunny Savita: Very clear, interesting.

799
02:21:33.450 --> 02:21:44.470
Sunny Savita: Okay, if it is confusing, it will be clear. Okay, don't worry. Now let me do one thing. Let me clarify this concept. Theoretically. So what I'm doing, guys just a second. Let me open my blackboard.

800
02:21:44.700 --> 02:21:49.690
Sunny Savita: And here itself. I'm going to explain you this thing

801
02:21:51.280 --> 02:21:53.569
Sunny Savita: theoretically. Okay, just a second guys.

802
02:21:54.954 --> 02:21:56.610
Sunny Savita: Give me a moment.

803
02:21:57.220 --> 02:22:00.370
Sunny Savita: We can. We can discuss all this thing. Okay, don't worry about it.

804
02:22:00.690 --> 02:22:04.890
Sunny Savita: So my blackboard is visible. Guys, yes or no. Tell me, yes. Can you see it?

805
02:22:11.560 --> 02:22:16.520
Sunny Savita: Okay. Perfect date.

806
02:22:16.900 --> 02:22:20.460
Sunny Savita: So what I'm doing, guys here. See? 1st of all,

807
02:22:22.550 --> 02:22:28.540
Sunny Savita: if you are talking about the vector database, let me write over here. Vector database.

808
02:22:28.990 --> 02:22:32.380
Sunny Savita: Okay, just a second

809
02:22:32.870 --> 02:22:39.910
Sunny Savita: vector database. Okay. Now, guys, whenever we're talking about the vector database. So what is it?

810
02:22:40.550 --> 02:22:47.979
Sunny Savita: So you know the different different databases. So guys, if you're talking about a databases, you are already familiar with the

811
02:22:48.160 --> 02:22:49.949
Sunny Savita: SQL based database.

812
02:22:50.570 --> 02:22:55.710
Sunny Savita: Okay? So just a second, let me take this one.

813
02:22:56.430 --> 02:23:03.250
Sunny Savita: And yeah, so you're already familiar with the SQL. Based databases.

814
02:23:03.490 --> 02:23:07.890
Sunny Savita: Okay? You already familiar with the no SQL databases.

815
02:23:09.030 --> 02:23:13.569
Sunny Savita: Now, there is 3rd type of databases which is called the vector database.

816
02:23:13.830 --> 02:23:27.099
Sunny Savita: Now, as the name is suggesting, why we are using this vector database. We are using this vector database for storing the tell me, guys, why we are using this vector database, we are using it for restoring the vectors.

817
02:23:27.260 --> 02:23:33.729
Sunny Savita: Now, what is a vectors? Guys tell me, if you're talking about a vector so vectors has nothing, it is a numbers.

818
02:23:34.040 --> 02:23:34.940
Sunny Savita: right?

819
02:23:35.160 --> 02:23:38.309
Sunny Savita: It is a numbers, it is array right?

820
02:23:38.760 --> 02:23:40.480
Sunny Savita: It is a error.

821
02:23:40.810 --> 02:23:46.280
Sunny Savita: Or we can say, set of numbers, okay, set of numbers.

822
02:23:46.840 --> 02:24:10.979
Sunny Savita: right? So guys, this vector, database is nothing. It is a set of number. Okay? And what we can use for restoring this vector we can use the vector database. Now, why it is required guys, this is required for rag kind of architecture. If you want to build a rag architecture for that guys, this vector dB will be required. So that later on we can perform the similarity. Such kind of technique.

823
02:24:11.870 --> 02:24:14.149
Sunny Savita: similar to such kind of technique.

824
02:24:14.340 --> 02:24:41.339
Sunny Savita: Okay? And we can create our retrieval pipeline. What we can do. Tell me we can create our retrieval pipeline. Now, what is a retrieval? Pipeline? If you know about the rag, I think you are familiar with the retrieval pipeline also. So we're creating this retrieval pipeline, this vector database is required. So guys, let me talk about the rag architecture. In the 1st place if you are not familiar. So whenever we talk about the rack, okay, so we have the data in the rag.

825
02:24:41.410 --> 02:24:53.679
Sunny Savita: Now, this particular data guys, what we are doing. We are going to be stored this particular data inside the vector database. After what? So if chunking is required, we can do the chunking. Then we can do the embedding.

826
02:24:54.070 --> 02:24:58.170
Sunny Savita: Okay, embedding. Now, guys, after doing the embedding

827
02:24:58.380 --> 02:25:04.569
Sunny Savita: after performing this embedding, we can store the data inside the vector database.

828
02:25:04.710 --> 02:25:21.379
Sunny Savita: Okay, vector database. Now, guys, so we have a vector, database, we are restoring a data inside the vector database. Now on top of it, guys see, let's say, whenever user is coming whenever any user is coming. So this user basically may will make a query to this vector database.

829
02:25:21.850 --> 02:25:29.110
Sunny Savita: Okay? And what it will do, it will perform the similarity. Search similarities. Such

830
02:25:30.840 --> 02:25:35.919
Sunny Savita: got it now, either using the I 2 distance or using the cosine similarity

831
02:25:36.170 --> 02:25:40.709
Sunny Savita: right? And we'll try to find out some relevant documents, some relevant data.

832
02:25:41.970 --> 02:26:03.500
Sunny Savita: some relevant data. And after fetching some relevant documents, some relevant data. Okay? What it will do, guys, it will pass this particular data, the relevant data with respect to the query to where guys tell me, it will pass this relevant data to the Llm, okay, so let me, create one more box over here that is belonging to the Llm.

833
02:26:03.720 --> 02:26:26.249
Sunny Savita: Now we are passing a relevant data along with the user query to the Llm. And then finally, we are generating my output. Okay, so this is nothing. Right? This is my rag architecture. This itself is called rag, and this particular pipeline which I'm showing you over here. This this pipeline from here from here to here, right? So this pipeline is called the retrieval pipeline.

834
02:26:26.520 --> 02:26:36.720
Sunny Savita: This is called the retrieval pipeline. And for creating this retrieval pipeline. Only we use the vector databases. Now, you are getting some idea, yes or no.

835
02:26:37.170 --> 02:26:42.240
Sunny Savita: Tell me, guys, are you getting little idea over here? Why, we use this vector, database

836
02:26:42.550 --> 02:27:10.249
Sunny Savita: getting little clarity? Yes or no. Okay, if you're getting this clarity, then it is good. Now, guys, whenever we talk about the vector database, see? One more question the interviewer can ask to you. So whenever we talk about the vector database, right? Why we cannot use the SQL databases and no sequel databases. So you simply, you can say, we cannot perform the vector based operation vector based operation vector based operation inside the SQL and the No SQL databases

837
02:27:11.070 --> 02:27:18.419
Sunny Savita: vector based operation means what? So we're talking about the vector based operation. The very common operation is a similar T search only.

838
02:27:18.720 --> 02:27:43.069
Sunny Savita: Okay, similarity search only. So we cannot perform this similarity. Such kind of operation inside the no sequel and the SQL. Database. And because of that guys, we are using the dedicated vector, databases. Okay, we are using this dedicated vector databases. I hope this thing is getting clear to all of you. Tell me, guys, is it clear or not? Yes or no? Tell me, yes

839
02:27:43.290 --> 02:27:53.459
Sunny Savita: or no. Very clear. Okay. Great. Now, coming to the next part over here. Okay, so what I'm doing, guys. So here, let's say, if if I want to create any vector, database.

840
02:27:54.690 --> 02:28:11.420
Sunny Savita: okay, what I want to do I want to create a vector database. Now for creating a vector database or vector store. Okay, both are same guys. Don't be confused with this vector database and vector store right? Both is going to be, hold the document only right? So we can do it in a 3 ways.

841
02:28:11.550 --> 02:28:17.610
Sunny Savita: So the 1st ways is called in memory database. So let me write over here in a memory database.

842
02:28:18.780 --> 02:28:23.119
Sunny Savita: The second is called the second is called on disk database.

843
02:28:24.710 --> 02:28:25.770
Sunny Savita: Okay.

844
02:28:25.950 --> 02:28:47.929
Sunny Savita: on this database, and the 3rd is called cloud database. Okay, Cloud. Wise means we are going. We are not going to be. Use our local. We are going to be configured this database over the cloud itself. So we are talking about this 2 guys. So in that case we are going to be configure it over over the server right over our own server. Okay, so this is

845
02:28:48.030 --> 02:29:16.649
Sunny Savita: over our own server. Now, whenever we are talking about server, it is nothing. It's a machine, our machine, right? So we are doing it over for the server itself. Now we are talking about the Cloud guys so it could be any cloud, it could be. Aws. Gcp, right? Azure. Or we are going to use any managed services right? Like Pinecone. Baby 8. Okay, we are going to use pinecone baby 8, or we have couple of more like quadrant and all. So quadrant is also there. Quadrant.

846
02:29:16.650 --> 02:29:28.850
Sunny Savita: So, guys in back end right? These these particular services, the manage services also, also in back end. They are using this particular cloud. Okay, this aws, Gcp and azure for configuring the server

847
02:29:29.340 --> 02:29:30.630
Sunny Savita: clear or not

848
02:29:31.410 --> 02:29:38.319
Sunny Savita: tell me so in today's class. I'll show you in today's class guys what I will do. I'll show you this in memory

849
02:29:38.430 --> 02:29:39.400
Sunny Savita: and this

850
02:29:40.860 --> 02:29:55.630
Sunny Savita: in memory. I'll show you and this on disk. I'll show you okay how you can persist over the disk also, and why we are doing it, guys, if if you are thinking that. Okay? Why? Why we are doing this thing. So we are doing it for creating a rag for the rag application.

851
02:29:56.050 --> 02:29:59.770
Sunny Savita: Okay? Which is very important concept in generative AI.

852
02:30:00.250 --> 02:30:18.790
Sunny Savita: Understood. Tell me, yes or no. Is it getting clear to all of you? Now tell me now, you are getting little more clarity with respect to this vector databases. Okay, now, whenever we're talking about the vector database, okay, let me discuss couple of more things over here. So whenever we're talking about the vector database guys, you need to keep few things in your mind.

853
02:30:19.180 --> 02:30:21.810
Sunny Savita: The 1st thing is going to be index.

854
02:30:22.780 --> 02:30:24.990
Sunny Savita: Okay, index.

855
02:30:25.220 --> 02:30:30.790
Sunny Savita: The second thing is going to be similar to such.

856
02:30:32.300 --> 02:30:34.780
Sunny Savita: Similarly, such.

857
02:30:38.730 --> 02:31:02.000
Sunny Savita: Okay, the 1st thing is what guys tell me, indexes. The next thing is going to be what similar research. Okay, now, we have a different different way of creating an indexes. We have a different different way of performing a similar research. Now let me tell you how the thing will work. Okay, let's try to visualize each and everything. Okay? So what I'm doing, guys, let's say you have some. Pdf.

858
02:31:04.030 --> 02:31:09.669
Sunny Savita: you have some. Pdf, now, from this. Pdf, you extracted some pages.

859
02:31:11.250 --> 02:31:21.120
Sunny Savita: Okay. Now, after extracting of pages, what you will do, guys, you will create a document. Object, document, object.

860
02:31:22.800 --> 02:31:29.640
Sunny Savita: Now, inside this document object, what would be there? Inside this document? Object? There would be 2 things

861
02:31:29.980 --> 02:31:33.609
Sunny Savita: always. 1st will be a page content.

862
02:31:37.350 --> 02:31:43.500
Sunny Savita: Okay? And the second would be, what metadata. Now, can anyone tell me what is the meaning of the metadata?

863
02:31:43.930 --> 02:31:46.329
Sunny Savita: Metadata means some data, some

864
02:31:46.930 --> 02:32:08.759
Sunny Savita: basically the information about the data. Okay, the information about the data is called the metadata. Okay, this 2 thing would be there inside one single document. Okay? And we can have a multiple document like this means we have a pages using the pages. Guys see, we are going to be, see, one more step would be there. If you want to like visualize more. So what we can do we can do the chunking right.

865
02:32:08.840 --> 02:32:24.729
Sunny Savita: chunky, so we can do the chunking and the whenever we are doing a chunking of these pages, we can create a document object. Okay? And inside the document object there will be a page content. And there will be a metadata. Now, this particular data guys, we're gonna store inside the vector, database.

866
02:32:25.750 --> 02:32:34.489
Sunny Savita: Okay, now, whenever we store this data inside the vector, database guys. Right? So first, st what we do for storing this data, we always create an index.

867
02:32:35.260 --> 02:32:41.189
Sunny Savita: Okay, so let's say, this is my index. What we do guys tell me we create a index always.

868
02:32:41.760 --> 02:32:52.929
Sunny Savita: So here is my index. Now, what is the meaning of index? Tell me so. Just forget about the database forget about everything. Okay, just tell me the basic meaning of the index. What is the index

869
02:32:53.240 --> 02:33:14.609
Sunny Savita: so index means? If we're talking about the index, have you seen the index of any book? Right? Tell me, have you seen? Have you? Have you seen the page content of any book? Index of any book, right? So what this index is doing. So index is pointing. At which page, okay, at which page my, this particular information would be available.

870
02:33:14.610 --> 02:33:25.110
Sunny Savita: Right? Means, I can say, I can say, index is nothing. Index is nothing. Just a way, just a way of referring a data, just a way of referring them.

871
02:33:25.110 --> 02:33:27.800
Sunny Savita: Basically the different different pages.

872
02:33:28.090 --> 02:33:29.100
Sunny Savita: Okay.

873
02:33:29.200 --> 02:33:36.360
Sunny Savita: getting my point, right? So here, guys, what we do. So we create an index. Okay, now see this index.

874
02:33:36.470 --> 02:33:44.189
Sunny Savita: Whenever we are talking about the index guys. Right? So we can create a multiple type of index. The 1st kind of index is called a flat index.

875
02:33:44.380 --> 02:34:09.430
Sunny Savita: Okay, the second type of index is called Hnsw. Index. Okay? And the 3rd type of index is called the Ibf Index. Okay, we'll talk about this Ibf, and all means. I'm not going to discuss the mathematical term. But I'll give you some idea. Okay, so flat index in the flat index. What we do in the flat index guys, we navigate each and every record. Okay, so this is called the exact search exact match.

876
02:34:10.490 --> 02:34:14.089
Sunny Savita: This is called the exact match, MATC. H.

877
02:34:14.310 --> 02:34:23.690
Sunny Savita: Okay. Now, whenever we're talking about this Hnsw and Ivf index. Okay, this particular index. So this is called approximate match.

878
02:34:23.850 --> 02:34:28.310
Sunny Savita: a proxy approximate match.

879
02:34:30.930 --> 02:34:47.640
Sunny Savita: Okay, this is called approximate match, and this is called flat is called the exact match. So whenever we're talking about the flat guys, okay, so we're talking about the flat. So in the flat index, what we are doing, you know. So in the flat index, actually, we are navigating every record.

880
02:34:47.870 --> 02:34:50.490
Sunny Savita: Okay, let's say my query is coming.

881
02:34:50.750 --> 02:34:52.419
Sunny Savita: My query is coming.

882
02:34:52.490 --> 02:35:21.289
Sunny Savita: Okay. Now, after getting my query, what we are doing, we are going to be checked with every record. So whatever data is there inside my index? Whatever document data is there? Let's say, first, st document, second, document, 3rd document, 4th document, 5th document. So whenever my query will come. Okay. So I will navigate each and every record. First, st record, second, record, 3, rd record, 4, th record, 5. Record. Okay? And wherever I will find out the most similar result, most similar result. I'll try to pick up that result.

883
02:35:21.560 --> 02:35:27.699
Sunny Savita: I'll try to pick up that reserve. Let's say, with respect to this particular query, my 3rd document is a most similar document.

884
02:35:28.200 --> 02:35:34.020
Sunny Savita: My 3rd document is a most similar document. So what I will do I'll pick up 3rd document.

885
02:35:34.970 --> 02:35:37.640
Sunny Savita: I will pick up 3rd document.

886
02:35:37.990 --> 02:35:43.850
Sunny Savita: Okay, now, whenever we're talking about the other indexes like, Hn, SW.

887
02:35:44.790 --> 02:35:47.730
Sunny Savita: Okay? Or the Ivf.

888
02:35:47.960 --> 02:36:08.120
Sunny Savita: right? So this is not a here. Actually, we are not doing every. We are not navigating to the every document. Okay? So this Hnsw, actually, it is called a graph based, indexing mechanism graph based. So it is working in that node and the entity basis. This Ibf, actually, it is called the cluster based.

889
02:36:08.440 --> 02:36:35.309
Sunny Savita: So here we are going to be, create a cluster of the data, and in each and every cluster we are trying to find out a similar account. Right? So whenever someone is asking to you. Okay, if we're talking about the index, what does it mean? So index is nothing in just in index means index means we are just going to be store our data. Okay, inside the vector database while we are going to be stored, our data. So it form one single index means, let's say, we have this. Pdf.

890
02:36:35.690 --> 02:36:46.329
Sunny Savita: okay, we have this Pdf guys now using this. Pdf, let me do one thing. See? Using. See? We have this. Pdf, right now, I took this. Pdf, just a second.

891
02:36:46.990 --> 02:36:49.959
Sunny Savita: I took this particular. Pdf.

892
02:36:50.260 --> 02:36:57.280
Sunny Savita: let me take the Pdf and I convert it into the document object. And I store inside the vector database.

893
02:36:58.280 --> 02:37:21.489
Sunny Savita: Okay, now, while I'm storing this document instead of vector, database in the form of document, right? So that is called an index. Now, there is a different different way of creating this index. Now, if we are talking about the flat index now, the flat index, what will happen, you know. Let me explain you that part also. So let's say, we have stored data inside the vector, database means we have formed the index. See, this is all my document

894
02:37:21.490 --> 02:37:32.639
Sunny Savita: which I got from my Pdf, okay? And I created a flat index. Now, whenever any query will come to this vector, database. Now, I will perform the similarity search.

895
02:37:32.720 --> 02:37:40.510
Sunny Savita: similarity search. Okay. Now, the similarity search. It could be based on the cosine similarity, or it could be based on the

896
02:37:40.640 --> 02:37:49.970
Sunny Savita: L. 2 distance. There is one more guys dot product. Okay, there is one more. That is for Jack. Add right, there is a different different way of performing this similar research

897
02:37:50.150 --> 02:38:18.499
Sunny Savita: getting my point. So Jack add, is there dot product? Is there? L. 2. Is there cosine similarities there? So whenever any query will come, I will perform the similarity search. Now, I wanted to know one answer from all of you. Now, guys, if we are, if you have created this as a flesh flat index. If we have stored our data as a flat flat index. Now tell me, guys, while I'm going to perform the similarity search, will it be? Go through with each and every record or not. Tell me, yes or no right? Why? Because it is called the exact match.

898
02:38:18.500 --> 02:38:38.750
Sunny Savita: Right? Flat indexes always create the exact math. This is also called the brute force. Right? But, guys, let's say, whenever we have created a Hnsw. Or Ivf index, right? So will it do a will, will it match with respect to each and every document? No, it will not do it, because here this is the approximate match.

899
02:38:39.140 --> 02:39:05.770
Sunny Savita: Ann match. Approximate nearest neighbor. Right? So in Hnsw, whenever we're talking about Hnsw, so in inside the Hnsw. What it is doing, it is going to be create a graph based mechanism. There is certain like rules behind it. And if we are talking about this Ibm guys, right? So they are. They are going to be create a cluster in packet means I'm going to divide this particular data into the cluster and based on that particular cluster we are going to perform a similar research.

900
02:39:05.830 --> 02:39:14.879
Sunny Savita: Now, did you get some idea? Yes or no? So let me revise this entire thing. Okay, let me revise this entire thing. 1st of all, tell me, guys, did you understand or not?

901
02:39:15.390 --> 02:39:16.589
Sunny Savita: Yes or no?

902
02:39:17.190 --> 02:39:18.100
Sunny Savita: Didn't.

903
02:39:18.250 --> 02:39:31.809
Sunny Savita: Okay. Now let's discuss one more time. So what I was saying, guys see, let's let's like, look into this architecture. Okay, now, you will get a much clarity. So whenever we have a data, okay.

904
02:39:32.010 --> 02:39:33.860
Sunny Savita: whenever we have a data.

905
02:39:34.050 --> 02:39:39.209
Sunny Savita: this data is nothing it could be in any sort of a form. Or let's say, we have a data in the form of Pdf.

906
02:39:39.530 --> 02:39:45.340
Sunny Savita: so this data, basically, I'll convert into the see? I'll I'll convert into the chunks. Okay.

907
02:39:45.830 --> 02:39:48.649
Sunny Savita: then I'll create a document object.

908
02:39:48.780 --> 02:39:56.119
Sunny Savita: Okay, from this data inside the document. Object. We'll be having 2 things. First, st is the page content. And second is a metadata.

909
02:39:56.430 --> 02:40:17.169
Sunny Savita: Okay, then, guys, this, using this particular data, I'm going to create my index. Okay, now, this index could be a flat index. This could be a Hnsw. Index. This could be an Ivf index. Okay, now, if it is a flat index. So this is called an exact match. Now, if it is a Hnsw. Or Ivf index, this is called the approximate match.

910
02:40:17.360 --> 02:40:45.600
Sunny Savita: Okay, now, what does it mean? Let me explain you. So, guys, whenever the query is coming, any sort of a query is coming right? So we always perform the similarity search. Okay? So we have a different different way of performing a similar research. So let's say, we have this cosine similarity. We have this add to distance, dot product, similarity. Right. So if we have created this index with this flat index, so we are going to be, go through. We are going to be navigate to each and every document, and we are finding out the best

911
02:40:47.480 --> 02:40:51.050
Sunny Savita: nearest document.

912
02:40:52.120 --> 02:41:04.689
Sunny Savita: Okay, best nearest document. Now, if we're talking about this Hnsw and Ivf. Guys in that case we are not going to be walk through with respect to each and every document. Instead of that, we have some smart mechanism.

913
02:41:04.690 --> 02:41:25.079
Sunny Savita: Okay, so as of. Now, I'm not going into the that particular detail. What is this Hnsw. Mechanism or this Ibf mechanism? Right? But just think it is having some mechanism. That's it. Right? And later on you can explore that. Now, if you are thinking, that is why we use this vector, database. So again, I'm repeating this part. So whenever we have to create a rag.

914
02:41:25.420 --> 02:41:42.759
Sunny Savita: okay? So while we create a rag guys, okay, at that time, actually, we use this vector database. Now, why inside the rag, what is the requirement? What's the requirement of this vector, database? So the requirement is basically to create a retrieval pipeline.

915
02:41:43.300 --> 02:41:47.389
Sunny Savita: If you want to create a retriever, pipeline, retrieval, pipeline.

916
02:41:47.600 --> 02:41:48.700
Sunny Savita: So

917
02:41:48.850 --> 02:41:55.839
Sunny Savita: for that guys, what we do, we use the vector database. Now, if someone will ask you in an interview, why not? No SQL database?

918
02:41:56.040 --> 02:42:03.649
Sunny Savita: Why not SQL database? So you can say in no SQL database we generally create the Json schema.

919
02:42:03.950 --> 02:42:08.709
Sunny Savita: Okay? In no. SQL in SQL based database, we create a rigid schema.

920
02:42:09.230 --> 02:42:30.009
Sunny Savita: Okay? And in both of this schema guys, vector operation is not possible as simple as as simple as that. Right? So in both of the schema guys, vector operation is not possible. Now, someone will, someone will ask, okay, what is the vector operation? Which vector operation is not possible. So you can simply say, we cannot perform the similar to such kind of technique.

921
02:42:30.250 --> 02:42:34.850
Sunny Savita: On top of this nosql in the SQL-based database.

922
02:42:34.960 --> 02:42:46.629
Sunny Savita: okay, which is exclusively available inside the vector. Database which will help us to create a retrieval pipeline for our rag architecture. Now tell me, guys, now tell me about your understanding.

923
02:42:46.990 --> 02:42:52.140
Sunny Savita: Now, how how like, how much you got it? 1st of all, tell me from 100%,

924
02:42:52.420 --> 02:42:55.500
Sunny Savita: 10%, 20%, 30%, 50%.

925
02:42:55.890 --> 02:43:03.050
Sunny Savita: Are you able to get right? So now the clarity of it? So once we do the practical of this entire thing.

926
02:43:03.400 --> 02:43:11.860
Sunny Savita: Once we'll do that practical of this entire thing. Most of the thing is going to be clear. Okay, so can we begin with the practical guys now? Yes or no.

927
02:43:14.250 --> 02:43:22.289
Sunny Savita: Yes, okay. Basics is clear now, we'll start with the practical. So 1st of all, guys see

928
02:43:22.865 --> 02:43:49.450
Sunny Savita: here. First, st I will show you with a basic document. Only, okay. Now, one more thing. Here I created a index with the L 2. Okay. Here I created a flat index with the L 2 means whatever similar to such I will perform on top of it. I will perform using this L. 2 distance only, and here my index type is a flat flat. L. 2. Right? Likewise, we can create Ibf index. We can create the H. And SW. Index any sort of index.

929
02:43:49.450 --> 02:44:07.830
Sunny Savita: So 1st of all, let me give you some table. Okay with that. Maybe you will get some clear cut idea. So guys, I'm just going to be copy and paste. So this small small thing I kept for all of you, so that later on you can go through with it. And you, you can answer in an interview. Okay. So here, where? Where I can keep it.

930
02:44:08.200 --> 02:44:10.720
Sunny Savita: this one, I can keep it over here.

931
02:44:14.510 --> 02:44:27.559
Sunny Savita: this one, guys. So can you see this one, yes or no flat Ibf inverted file index, and the next one is the graph based index. Hnsw. Is it visible to all of you? Yes or no, now, I can keep one more table over here. So

932
02:44:27.670 --> 02:44:40.340
Sunny Savita: let me keep it over here with that. Basically, you will be getting much more clarity than when we have to use which index. Okay, I think many of you. You were asking this thing. So let me do one thing. Let me copy and paste. See, you guys, this one

933
02:44:40.772 --> 02:44:49.259
Sunny Savita: can you see data size recommended index. So, guys, if you have up to one lakh rows, okay, in that case, create a flat index, it will work fine.

934
02:44:49.710 --> 02:44:52.929
Sunny Savita: But if you have up to 1 million rows.

935
02:44:53.040 --> 02:45:07.150
Sunny Savita: okay means up to 10 lakh rows. In that case create the Ivf. Or the Hnsw. Index, because it will help you for the fasting search. But let's let's assume if you have more than 1 million rows.

936
02:45:07.150 --> 02:45:30.549
Sunny Savita: Okay. In that case, also, you have to create Ibf, and the Hnsw only Ivf is a more. This Ibf is a more recommended one. Okay, but in the Ivf. Also, there are, like the different different variants is available in the Hnsw. So you can explore this on your own label. But I just given you the the starting over here like how you can start with this indexing

937
02:45:30.580 --> 02:45:53.139
Sunny Savita: and the different different type of similarity. Such and all and for sure, once we'll move ahead into into the upcoming session. You will get a more clear cut idea getting my point, guys, yes or no, so will it help to you or not. Tell me, guys, this type of thing so like easily like you can go through with it. And you can understand the basics. And even you can answer in the interview also. Okay, now.

938
02:45:53.190 --> 02:46:12.190
Sunny Savita: coming to the next part. So whenever we have a data guys now, how to store that particular data. So 1st of all, let me show you with the basic document which was given in the documentation itself, the basic example. Then I'll come to the Pdm, okay, we'll load our own custom. Pdm, okay, so what I'm doing, guys, I'm just going to be copy some document.

939
02:46:13.160 --> 02:46:16.239
Sunny Savita: Give me a moment, guys, I'm going to copy some document. Okay.

940
02:46:17.920 --> 02:46:21.200
Sunny Savita: ha, ha! Where is the document?

941
02:46:21.440 --> 02:46:23.190
Sunny Savita: This is the document.

942
02:46:28.000 --> 02:46:42.819
Sunny Savita: Can you see this document, guys? Yes or no? Please do let me know the chat if you are able to see them. So which type of index will be different from any other vector database or all the vector databases having same indexes. Yes, all the vector databases having same kind of index. Okay.

943
02:46:44.710 --> 02:47:08.310
Sunny Savita: can I have mix of Pdf and text? Yes, why not? You can have mix of Pdf. And text how metadata is getting used for the indexing specify in this example? Yes, for one, I'll talk about it. See here, I've mentioned the metadata. Now, right, everything is going to be clarified. Guys. Just be here for next 1Â h. Okay, within half an hour and 1Â h. I'm going to clarify each and everything with respect to the vector database up to the rag only

944
02:47:08.520 --> 02:47:09.890
Sunny Savita: got it. No.

945
02:47:10.140 --> 02:47:31.149
Sunny Savita: Can we create a indexing with the cosine similarity. Why, we cannot create definitely. We can do it. I'll show you that part as well. Okay, so just wait. Now. What is Ibfpq, you can check out the full meaning of it. Ibfpq, I don't know the full form. Okay, you need to check out that this one. It's a like different variant. Is that the Ivf itself?

946
02:47:31.210 --> 02:47:59.899
Sunny Savita: Okay. Now, here I have one, the 1st document. Now, instead of the 1st document, I have the page content. Okay? And this is the metadata. Now, what a metadata is! Nothing. It is a like some ex additional information about this particular data. That's it. Now we have a second document, we have a 3rd document. We have a 4 document. We have a 5th document. Likewise, we have in total 10 document. Okay, now, this particular document. I want to store inside the vector database. Now, how I can do it, guys, how I can store inside the vector database.

947
02:47:59.900 --> 02:48:09.509
Sunny Savita: So simply, you will create a list of the document over here. Okay, if you are not able to follow to me right now, you can stop writing a code. Just listen to me what I'm saying. Okay.

948
02:48:09.510 --> 02:48:30.000
Sunny Savita: so here, what I did guys, I created a document. Okay, the list of the document. But this particular data I'm going to store where inside the vector is stored, the vector is stored which I already created. Okay, let me again re initialize it because earlier, I have installed like, store, something else over there. So I'm going to take this vector store. Okay?

949
02:48:30.490 --> 02:48:38.810
Sunny Savita: And here was my index. But tell me, guys, I created an index using the output. Yes or no.

950
02:48:39.560 --> 02:48:43.430
Sunny Savita: Let me show you the index. Okay, this one.

951
02:48:43.820 --> 02:48:53.610
Sunny Savita: So I created an index using the L 2. If we have 100 pages, 1,000 pages, everything we can do user. Don't worry about that. Okay.

952
02:48:54.450 --> 02:48:56.930
Sunny Savita: As a developer, we can take care of everything.

953
02:48:57.280 --> 02:49:05.900
Sunny Savita: Okay. Now, I see this, F files. Index flat. L, 2. Okay, we have created an index using this. L, 2. Now.

954
02:49:06.040 --> 02:49:17.419
Sunny Savita: what I'm doing. I'm going to create the index. Okay, using some different using the basically cosine similarity. So for that, instead of this, L 2, I just need to write this. IP,

955
02:49:17.480 --> 02:49:42.089
Sunny Savita: okay, so let me take that one also. Let me paste it over here. This, all the detail you will get over the files documentation itself. So once I will write this flat index flat. IP, IP means, what inner product? Okay, so it is. applying the cosine similarity. Now, okay, for the similarity search. It's going to be applied the cosine similarity. Now let me execute it. And here, yes, we are able to create a vector store.

956
02:49:42.090 --> 02:49:53.449
Sunny Savita: Now, after creating a vector, store. What I will do, guys, I'll be storing inside the vector database. Okay, so simply, I need to write over here vector store, dot add documents, and I have to pass my document. That's it.

957
02:49:53.450 --> 02:50:04.049
Sunny Savita: So once I will run it, guys, once I will execute it. See, we are able to store all the 10 document inside the vector database. So is it getting clear or not? Tell me, yes or no.

958
02:50:04.830 --> 02:50:11.329
Sunny Savita: This is getting clear to all of you how to store the document inside the vector? Database along with the metadata.

959
02:50:15.320 --> 02:50:19.159
Sunny Savita: Can you tell me the significance of the dog store? Where is the dog store.

960
02:50:19.840 --> 02:50:20.720
Sunny Savita: Huh?

961
02:50:24.610 --> 02:50:26.259
Sunny Savita: Where is the docker store? Here.

962
02:50:27.490 --> 02:50:39.600
Sunny Savita: guys don't do like this. First, st try to understand that. Okay, see? I would suggest you, Doc. Store in memory will come to that.

963
02:50:39.700 --> 02:50:48.790
Sunny Savita: at least give me the chance, step by step, only I'll show you that. Or should I take my IP when we file or run it in half an hour. Do you want that? Tell me.

964
02:50:49.710 --> 02:50:50.590
Sunny Savita: hmm!

965
02:50:51.870 --> 02:50:57.710
Sunny Savita: Do you want that? Can I? Can I take the entire file in a single shot and run it like within half an hour.

966
02:50:57.920 --> 02:51:20.150
Sunny Savita: Will will you be happy? With that you will be happy. You will get a code. But, guys, what will be your learning in that case, how I can share my experience, my learning, with all of you. So please like, let's see, little patient, and try to understand the process in whatever way I am showing you. Later on, when, whenever you will revise now, you will appreciate.

967
02:51:20.200 --> 02:51:44.869
Sunny Savita: Okay, because nowhere you will find out this kind of detail. And the basically this kind of thing, I'm not saying nowhere. But yeah, you will have to put extra effort. So if you have paid over here. Then, like, just focus over here itself. Now, okay, instead of going here and there. And really, I will show you each and everything whatever is required. Now to building this vector database, rag and all. All, the thing is going to be clarified over here

968
02:51:45.380 --> 02:52:08.049
Sunny Savita: understood. No. So here, guys, I kept the embedding size. The 384 is nothing. It's a embedding size. Okay? And here is what here's my vector store. Okay, this is my object, and what I did. I store all the document, this document, along with the metadata on top of it. Now, if I have to perform the similarity search on top of it. Can we do it or not? Yes, we can do it. So simply, I can take this vector store.

969
02:52:08.510 --> 02:52:12.189
Sunny Savita: Okay, and I can call this similarity

970
02:52:14.690 --> 02:52:34.979
Sunny Savita: search. Sca, rch, okay? So once I'll perform the similar. CC, now, I will ask my question. There will be a user question. Okay, there will be a user question, guys. So I'll be writing my question over here. And I can give the metadata also metadata for what metadata for the filtration.

971
02:52:35.200 --> 02:52:39.868
Sunny Savita: Right? So let's say, here, I'm going to ask a question whatever question you can ask.

972
02:52:40.310 --> 02:52:42.350
Sunny Savita: I'm going to pass a question.

973
02:52:42.630 --> 02:53:04.979
Sunny Savita: Okay, so let me copy and paste this specific portion. My question is lunch and provide app section to make working with the Llm. Easy. I want to. I want to check the similar document with respect to this given query, okay, so let me execute it and let me check what I'm getting. So I'm getting answer or not so by default. How many document it is returning to me? Tell me

974
02:53:05.210 --> 02:53:10.919
Sunny Savita: it is returning? 4 document by default to me. Okay, can I regulate this behavior.

975
02:53:11.330 --> 02:53:28.050
Sunny Savita: Yes, for sure, I can regulate this behavior. So for regulating this behavior, I just need to pass the number of K, okay, how many number of document I want to retrieve from the vector database. So if I'm writing, K is equal to, let's say 2.

976
02:53:28.190 --> 02:53:32.420
Sunny Savita: So once I will learn it, guys see here it is giving me. K. Is equal to 2.

977
02:53:32.570 --> 02:53:38.700
Sunny Savita: Let's say, if I'm writing, K. Is equal to 5 over here. Okay, so it will give me. K. Is equal to 5

978
02:53:39.700 --> 02:53:46.259
Sunny Savita: getting my point. Now here, if I'm giving K. Is equal to 7. So it is giving me 7 document

979
02:53:47.780 --> 02:54:02.929
Sunny Savita: getting my point, guys, yes or no. Tell me, yeah, I will stop Rajus within like, 20Â min. I will stop that. Okay, just I want 20 more minute of yours got it. So here you can see we are able to fetch as many as document. Now, guys.

980
02:54:03.060 --> 02:54:10.349
Sunny Savita: why I didn't perform the embedding of this query, because everything is taken care by this particular vector store class.

981
02:54:10.510 --> 02:54:32.660
Sunny Savita: Okay, vector store object automatically, it is doing an embedding and all everything. We just need to provide this embedding function, and everything will happen in a back end. You don't need to like worry about it, embedding and all. That's why we are using a link chain. Okay, so we can ease our process. So whatever process we are doing right, we can easily do it right now.

982
02:54:32.700 --> 02:54:56.399
Sunny Savita: how much K. Guys, it is a hyper parameter. So if you will ask to be sunny, how much KI can use. So again, I would say, it's a hyper parameter. So let me write. The K is equal to 2 over here as of now, and it is fine. Now, one more thing. So guys, can we filter out the data based on the given metadata. Let's say I want all the data where I'm getting this Tweet.

983
02:54:57.090 --> 02:55:12.749
Sunny Savita: Can I filter out that particular data? Yes or no. Is it possible or not? Yes, it is also possible. Okay, so let me do one thing, let me filter out that data using this variable. So my variable name is going to be

984
02:55:12.780 --> 02:55:31.549
Sunny Savita: filter. And here I will passing my source. Okay, my key name. So my key name is what source if you will go and check with the key. Okay, so what is the key name, guys this source. Now, what I will do here, I will write my key name, so let me put the source over here.

985
02:55:31.730 --> 02:55:34.539
Sunny Savita: and here I'm going to write the parameter.

986
02:55:35.130 --> 02:55:43.899
Sunny Savita: so my parameter is going to be. See, there is a different, different parameter equivalent, or greater than or less than right. So here I am writing equal

987
02:55:44.160 --> 02:55:45.660
Sunny Savita: equal to 20.

988
02:55:46.240 --> 02:55:47.270
Sunny Savita: Okay.

989
02:55:47.590 --> 02:56:06.179
Sunny Savita: so let me put it over here, this filtering. And here, let me remove this. K, also, let's see what I'll be getting now. So if I'm putting this filter over here. Okay. So, guys, if I'm putting this filter over here, let me do one thing. Let me keep this particular value inside the dictionary itself. The dictionary which I created over here this one.

990
02:56:06.450 --> 02:56:13.190
Sunny Savita: So if I'll put this filter, okay? So what I'll be getting, I'll be getting only those result which is having this Tweet.

991
02:56:14.460 --> 02:56:19.100
Sunny Savita: Can you see, guys, are we able to filter out the data or not? Tell me, yes or no?

992
02:56:23.440 --> 02:56:30.600
Sunny Savita: How do you know user question belong to which source we know about it. Now as a end user, we'll be knowing about it.

993
02:56:31.220 --> 02:56:39.390
Sunny Savita: Okay, as a developer, also will know about it. If we don't know about it. We'll have to inform to the end user. You can put the source or something

994
02:56:39.960 --> 02:56:41.810
Sunny Savita: getting my point. Yes or no.

995
02:56:42.120 --> 02:56:49.829
Sunny Savita: sir, I have a doubt, when I create an index. Okay, flat index 3, 0 5. It is okay to write an index. No, if you write it like this, you will get an error.

996
02:56:49.930 --> 02:56:52.480
Sunny Savita: it will ask you about the embedding size.

997
02:56:53.430 --> 02:56:56.530
Sunny Savita: How do you determine? I determine the key

998
02:56:56.650 --> 02:57:22.859
Sunny Savita: as equal to equal to means. It will be equal to this particular word. See, there is a couple of this filter word. Actually, you will find out this inside the documentation itself. If you want, I can show you that later on. Okay. But as of now, I don't want to increase the complexity. That's why I'm not going into that part. Okay, so here you can provide the multiple filter equivalent or the different different other. Is there okay? Greater than less than not equal to something like this?

999
02:57:23.060 --> 02:57:24.890
Sunny Savita: Understood? Yes or no

1000
02:57:25.510 --> 02:57:30.859
Sunny Savita: is getting clear or not. Later on we'll talk about it. Yes, dollar sq. Means it is equal to.

1001
02:57:31.400 --> 02:57:41.659
Sunny Savita: Okay. We'll talk about it. I'll show you that part also. Okay, I don't want to break the flow. So that's why I'm not going through with any documentation or something. 1st of all, I want to show you the straightforward functionality

1002
02:57:42.310 --> 02:57:43.430
Sunny Savita: understood.

1003
02:57:44.500 --> 02:57:47.679
Sunny Savita: Okay, now, guys, you can do one more thing. See

1004
02:57:47.810 --> 02:57:54.600
Sunny Savita: here, instead of this, equal to greater than you can directly mention. Let's say, if you don't want to mention that, do one thing

1005
02:57:54.730 --> 02:58:04.400
Sunny Savita: here, pick the source and remove everything, remove everything, write the news over here, run it!

1006
02:58:04.830 --> 02:58:11.039
Sunny Savita: See, are you getting all the data with respect to news with without any filter and all? Tell me yes or no?

1007
02:58:13.200 --> 02:58:16.379
Sunny Savita: Tell me yes yes or no.

1008
02:58:18.260 --> 02:58:23.739
Sunny Savita: Yes. Now, from this particular document, let's say, here, I'm keeping the result. Okay, result.

1009
02:58:24.130 --> 02:58:28.690
Sunny Savita: Now from this result. Let's say, I want to take only single document, this one.

1010
02:58:29.800 --> 02:58:48.219
Sunny Savita: So let me take a single document. And on top of this document, let's say I want to get a metadata. So just write metadata over here. That's it, guys, you will get a metadata. And let's say, if you want to get a page content. So simply write the page content over here. Page underscore content and see what I'm getting.

1011
02:58:51.660 --> 02:58:59.969
Sunny Savita: Yes or no. Are you getting guys? Yes or no? Tell me why this 3 document is coming. Because there is only 3 document. With respect to the news.

1012
02:59:00.180 --> 02:59:01.190
Sunny Savita: that's odd.

1013
02:59:02.580 --> 02:59:10.039
Sunny Savita: Okay, what is a metadata? Metadata means information about the given data, some information of the data.

1014
02:59:10.460 --> 02:59:11.340
Sunny Savita: Okay.

1015
02:59:13.210 --> 02:59:20.129
Sunny Savita: tell me, till here everything is perfect. Everything is clear, everything is getting clear or not. Whatever I have explained.

1016
02:59:20.540 --> 02:59:21.450
Sunny Savita: Yes.

1017
02:59:22.050 --> 02:59:26.710
Sunny Savita: Do you like the session. Did you understand the concept of the vector databases or not?

1018
02:59:31.330 --> 02:59:43.989
Sunny Savita: Just. And guys, it's all about your revision as well. So once you will revise this thing. Maybe it will be more clear to you. Now let me show you a couple of more thing. If you want to use this thing, this vector is stored in your

1019
02:59:44.361 --> 03:00:03.690
Sunny Savita: Rack pipeline, how you can do it. So simply, you can take this vector store. Okay, you can use it as a retriever. Also, there is one more function inside the vector. Store itself. Okay, inside this files class only inside the lang chain. The function is called the as retriever. So once you will call this as retriever. Now, so, guys

1020
03:00:04.340 --> 03:00:12.940
Sunny Savita: using this as a retriever, you can call the invoke method on top of it, and later on you can use it inside your rack, Pipeline. I'll show you that just a second.

1021
03:00:13.040 --> 03:00:21.239
Sunny Savita: So let me mention some parameter over here inside this, as as a retriever. So my parameter is going to be what? Search? Kwr, GS.

1022
03:00:21.580 --> 03:00:28.119
Sunny Savita: Okay, let's say I want to fetch 3 document over here. I'll mention K, 3. And now this is going to be my retriever.

1023
03:00:28.430 --> 03:00:43.560
Sunny Savita: And this particular retriever guys I'm going to use inside, my vector, sorry inside, my rat pipeline. Now how to use it? I'll show you that part. Okay. So now, on top of this retriever, what I can do, I can invoke. Okay, I could call the invoke method

1024
03:00:43.650 --> 03:01:00.490
Sunny Savita: this invoke method. Okay? Now, I can ask the same question. Let's say, this question itself. I can check out the similar document. With respect to this question itself, I'll be getting the same answer. Okay, so here, let me do one thing, let me execute it, and see

1025
03:01:00.600 --> 03:01:10.550
Sunny Savita: how many document we are getting. We are getting 3 document. Now. Why we have created this vector. Stored as a retriever. So further, we can use it inside our rack. Pipeline.

1026
03:01:11.030 --> 03:01:14.089
Sunny Savita: Okay, now, one more thing, guys as of now tell me

1027
03:01:14.520 --> 03:01:16.279
Sunny Savita: one question to all of you.

1028
03:01:16.550 --> 03:01:18.689
Sunny Savita: Is it in a memory?

1029
03:01:20.500 --> 03:01:32.059
Sunny Savita: Is it on desk, or it is over the cloud, the it is in memory.

1030
03:01:32.590 --> 03:01:36.339
Sunny Savita: Now, if I want to save this particular index.

1031
03:01:36.450 --> 03:01:38.559
Sunny Savita: Okay, this vector, is stored index

1032
03:01:38.870 --> 03:01:42.419
Sunny Savita: over the inside, my folder itself. Can I do it?

1033
03:01:42.740 --> 03:01:50.559
Sunny Savita: Can I do it, guys? Yes, I can do it. So simply, I will use this vector underscore store

1034
03:01:50.740 --> 03:01:59.110
Sunny Savita: dot save underscore local. And here I will write the name. So my name is going to be today's

1035
03:02:01.530 --> 03:02:11.360
Sunny Savita: today's class files. Index. Okay? Today's class size index. Now see, guys, now you will see the magic see?

1036
03:02:12.310 --> 03:02:15.600
Sunny Savita: Can you see this index now? Yes or no? This one.

1037
03:02:16.040 --> 03:02:17.550
Sunny Savita: Is it visible to you?

1038
03:02:19.090 --> 03:02:25.230
Sunny Savita: Now tell me, guys, is it in a memory? Is it on disk, or is it on cloud? Tell me, guys.

1039
03:02:28.360 --> 03:02:33.399
Sunny Savita: is it in memory? Is it on disk, or it is on cloud, it is on disk.

1040
03:02:33.570 --> 03:02:35.749
Sunny Savita: So this is in your server.

1041
03:02:37.680 --> 03:02:39.560
Sunny Savita: This is in your server.

1042
03:02:39.660 --> 03:02:41.569
Sunny Savita: This is also in your server

1043
03:02:42.040 --> 03:02:47.489
Sunny Savita: cloud. Yet to discuss. Okay, let me write over here year to discuss

1044
03:02:48.550 --> 03:02:51.580
Sunny Savita: getting getting guides. Yes or no. Are you getting my point?

1045
03:02:52.080 --> 03:02:54.260
Sunny Savita: Yes or no?

1046
03:02:56.750 --> 03:03:07.269
Sunny Savita: Now, are you getting a more clarity with respect to this indexes or not. Yes, now let's say, if I have to load this index, so what I will do simply, I will write over here. See

1047
03:03:08.320 --> 03:03:17.000
Sunny Savita: files FAIS. S. Dot load local. Okay, load underscore local.

1048
03:03:17.320 --> 03:03:22.079
Sunny Savita: And here, what I will do, guys, I'll give my index name. So what is my index? Name? This one?

1049
03:03:23.130 --> 03:03:31.692
Sunny Savita: Okay, this one. I'll give my index name, and after giving the index name you can give the other parameter. Also, let's say you can give this

1050
03:03:32.300 --> 03:03:34.080
Sunny Savita: embedding also. Okay.

1051
03:03:34.150 --> 03:03:45.629
Sunny Savita: So here is my embedding model embedding. Okay, now, after this, one, guys see? Once I will load it. What I'll be getting I'll be getting my vector database. See? Let me load it.

1052
03:03:45.660 --> 03:04:10.690
Sunny Savita: It is giving me. I show. Okay, it is saying, deserialization is required. Okay, we'll have to mention about the deserialization. So it is saying, allow dangerous deserialization is true. This is a parameter which we'll have to enable. So let me enable this particular parameter. Otherwise we'll be getting an error. So we'll have to deserialize the tickle file. So just mention this allow dangerous deserialization.

1053
03:04:10.780 --> 03:04:20.859
Sunny Savita: and just write equal to. And ERUI think now everything is perfect. So if I'm going to be executed guys here, I will be able to get my vector database.

1054
03:04:21.260 --> 03:04:23.890
Sunny Savita: Are we getting it, guys or not? Tell me

1055
03:04:24.750 --> 03:04:32.220
Sunny Savita: load. So here, I can write. What I can write guys, new vector, store, new, vector.

1056
03:04:32.440 --> 03:04:41.100
Sunny Savita: is stored. Okay. Now, on top of it again, I can perform any sort of a similar research or anything. Let's say, here, I'm writing a new vector, store dot

1057
03:04:41.500 --> 03:04:48.699
Sunny Savita: invoke. Okay? Simply, I can call the invoke with this lamp chain. So once I'll run it and see what I'm getting

1058
03:04:48.850 --> 03:04:52.939
Sunny Savita: new vector store object. And no, okay. Here, I will have to write the

1059
03:04:53.470 --> 03:05:05.069
Sunny Savita: similarity search. 1st of all, I will have to convert into the retriever with as a retriever command, then only I can do it. So here I can only perform the similarity. Search. So let me do the similarity search.

1060
03:05:05.860 --> 03:05:11.640
Sunny Savita: And here, see, guys, if I'm going to be executed. We are getting my document

1061
03:05:11.750 --> 03:05:15.149
Sunny Savita: understood. Tell me, yes or no. Is it getting clear or not.

1062
03:05:19.070 --> 03:05:34.010
Sunny Savita: sir, are the embedding should be same when we creating a vector yes, it should be same. Can we say comparison via in memory and saving in disk? Yes, no. See? First, st we were running into the in memory. Now we are saving it on test. So later on anytime we can use it as a physical file.

1063
03:05:34.260 --> 03:05:52.979
Sunny Savita: If you are going to be, stop the server later. Also, we can load into the memory. Okay, we process this database, or that is, anyhow, we are going to be run everything in the memory only now, right in our like the this one CPU only is processing everything now, so we'll have to load inside the RAM. Right? Surya.

1064
03:05:56.190 --> 03:06:08.993
Sunny Savita: you can check Ravi. I think you will have to use the this inbuilt function. Only, okay, what is a deserialization? Deserialization means you will have to. Like what I can say.

1065
03:06:09.560 --> 03:06:21.520
Sunny Savita: you have closed that file. And now again, you have open the file. Okay, serialization means you pack that file and you have unpacked that file deserialization. There could be more technical term. But just think, in this particular way. Okay.

1066
03:06:25.100 --> 03:06:31.489
Sunny Savita: tell me, tell me, tell me, guys, how's the expression so far? Did you understand everything with respect to this rag and all, yes or no.

1067
03:06:31.670 --> 03:06:49.709
Sunny Savita: because I try to explain everything in a like a very like a small small pieces, so that your basics and the fundamental is going to be clear. Okay? And now let's do one thing, guys, can we create a rack quickly, guys, within 10Â min, if you'll permit to me, I'll do it. Do this thing.

1068
03:06:51.330 --> 03:06:54.349
Sunny Savita: yes or no. Tell me fast. Yes.

1069
03:06:56.270 --> 03:07:08.850
Sunny Savita: okay, let's do one thing. Let's create one rag now. So creating a rag. What is required. We required a data. Okay, so inside this folder, inside this data, folder guys, I kept one. Pdf, can you see this? Pdf.

1070
03:07:11.000 --> 03:07:30.129
Sunny Savita: so when you do scroll up, annoying. Sorry for the okay. I'll do very, very slowly for you. Okay, see? I'll do like this like this like this. Okay, I'll make sure that you can read everything from the file itself. Okay, perfect. Now, guys, can we load the llama to Pdf, yes or no?

1071
03:07:30.600 --> 03:07:39.419
Sunny Savita: Can we load it at, can we create the complete rag on top of it? Okay, let's begin. Let's start. So 1st of all, guys what is required. Tell me.

1072
03:07:39.730 --> 03:07:41.240
Sunny Savita: So here.

1073
03:07:42.002 --> 03:07:48.659
Sunny Savita: We require the document loader. So we are going to be, use it from the blank chain itself.

1074
03:07:49.050 --> 03:08:02.300
Sunny Savita: So here I'm writing from blank sheet underscore community community. Okay, then, dot document underscore loader.

1075
03:08:02.810 --> 03:08:03.800
Sunny Savita: Okay?

1076
03:08:05.180 --> 03:08:09.520
Sunny Savita: Load us, then import by Pdf, load.

1077
03:08:13.700 --> 03:08:22.280
Sunny Savita: right? So let me cross check whether it is correct or not so. Here is my 5 period loaded.

1078
03:08:22.950 --> 03:08:29.839
Sunny Savita: Let me execute it. And now what I can do, I can create object of it.

1079
03:08:30.180 --> 03:08:33.250
Sunny Savita: So here I can write my file path.

1080
03:08:33.880 --> 03:08:40.830
Sunny Savita: So pile underscore path and let me keep it in a double code. Okay.

1081
03:08:41.160 --> 03:08:46.359
Sunny Savita: So here I'm copying the path, and I'm keeping it over here. I hope this is perfect.

1082
03:08:46.510 --> 03:08:58.050
Sunny Savita: Now what I will do, so it is showing me the unicode error. I'll put the R. Over here. Okay, now here I will pass the file path and see whether we are able to load the Pdf or not.

1083
03:08:58.620 --> 03:09:07.160
Sunny Savita: So here is my Pdf guys. So see, I'm able to load my Pdf, now for loading the Pdf, I will have to call one more method.

1084
03:09:07.370 --> 03:09:09.809
Sunny Savita: Okay, so this is my loader.

1085
03:09:09.920 --> 03:09:22.480
Sunny Savita: and I have to call one more method on top of it, and the method name is going to be loaded. Load load. Okay? So once I will run it, guys here, I'll be able to load my data.

1086
03:09:23.220 --> 03:09:24.639
Sunny Savita: So see, it is loading.

1087
03:09:25.900 --> 03:09:41.710
Sunny Savita: It's loading, loading, loading. Don't worry. I'll give you this particular notes and everything. Guys, please. Let me complete this part I'll give you, and I'll make sure from next class you might get in a class itself. Okay, so it is taking time, and it might take time. See?

1088
03:09:42.000 --> 03:10:06.610
Sunny Savita: I'm able to load my data, and it is loading all the pages you can check out. How many pages is there? Simply, you can call the load function sorry length function, because it is a list only, and if you want to load it a little faster. So instead of this load, not what you can do, you can call call this a load. Okay, a lazy load. So what will happen? Now, guys, it will perform the Async process, and it will be loaded faster.

1089
03:10:06.760 --> 03:10:15.120
Sunny Savita: Okay, so there is a method. Lazy load. You can put this one. Now see, it is showing

1090
03:10:15.590 --> 03:10:21.689
Sunny Savita: loader dot a lazy load has no document. Length. Let me check.

1091
03:10:22.070 --> 03:10:24.150
Sunny Savita: Let me load it one more time.

1092
03:10:24.770 --> 03:10:28.049
Sunny Savita: Yeah, this is fine. So what I can do.

1093
03:10:29.040 --> 03:10:31.419
Sunny Savita: Lazy load loaded now.

1094
03:10:32.905 --> 03:10:53.330
Sunny Savita: Okay, I think we'll have to like, run the for loop on top of it. Okay, later on. I'll show you this lazy load as of now forget about it. Okay, if you want to try it, you can simply run the for loop on top of it. Now you can check out the length of this particular data so simply, you can write the length le NLEN functions. And here

1095
03:10:53.490 --> 03:11:16.080
Sunny Savita: you can check how many pages are there? So it will show you the number of pages, and I think there would be around 50 to 60 pages inside this particular. Pdf, I took little bigger Pdf, okay, so this llama is having around 50 to 60 pages itself. And that's why it is taking a time? Because synchronizingly, synchronizely, it is processing the entire request.

1096
03:11:16.080 --> 03:11:26.110
Sunny Savita: So it is having total 77 pages. Okay, instead of Pdf itself. So guys, can we divide this data into the different different chunks? Yes or no? Tell me.

1097
03:11:26.160 --> 03:11:27.860
Sunny Savita: can we do the chunking of it?

1098
03:11:28.880 --> 03:11:30.899
Sunny Savita: It's possible to do the chunky.

1099
03:11:33.130 --> 03:11:59.970
Sunny Savita: Okay, so here, guys, I'm going to perform the chunking. Now for the chunking. I'm going to use the recursive character tax splitter. Okay, so let me create a recursive character. Texas splitter class. And here, guys, this is going to be my splitter. Let's see, this is this. I'm going to copy from my from the previous code itself. I think Chris has already explained you in the previous session. So here is my splitter, guys. Now to this particular splitter. I will pass my data.

1100
03:12:00.030 --> 03:12:09.010
Sunny Savita: Okay, so let me pass the data over here. So splitter, dot split underscore documents.

1101
03:12:09.160 --> 03:12:32.089
Sunny Savita: Okay? And what I'll pass guys here I'll be pass my pages. So pages means what pages means this particular pages. Okay, now, we'll have to collect this pages. 1st of all. So let me do one thing. Let me use this loader dot load. Okay? And here I can keep this thing inside the variable. Now, what is my variable guys, what could be my variable over here where I can collect this entire data.

1102
03:12:32.380 --> 03:12:39.079
Sunny Savita: So this is going to be a pages. Okay, so let me do one thing. Let me write the pages.

1103
03:12:39.120 --> 03:13:08.460
Sunny Savita: Got it, guys, so I'm able to get my all the pages once it will be completed, I'll pass it to my recursive character, Texas printer and guys. If it is taking time, you can run this lag load. I can give you the code for this as well, so it will be working in the Asynchronized mode, and it will be a little faster compared to this one. So here is a code for this one, this one. Okay, to use this one, it will be loading little faster. Let me show you how. So if I'm going to execute it, see? Within, I think 4 to 5 second night will be able to load your data.

1104
03:13:08.950 --> 03:13:12.029
Sunny Savita: So loader dot a lazy load.

1105
03:13:12.620 --> 03:13:32.239
Sunny Savita: I think so many thing is going on in my system. Yeah, see, it is able to load in 11. Second, okay, but it could be a little faster also. So I got my pages. Now, what I will do, guys, I'll split my data. Would you like to see the splitted data? Tell me, here, I've done some chunk size and overlapping. So again, I'm saying, guys, this is nothing. This is a hyper

1106
03:13:32.540 --> 03:13:38.820
Sunny Savita: parameter. Okay, now, this is again, hyper parameter.

1107
03:13:42.220 --> 03:13:51.979
Sunny Savita: Okay, so hyper parameter, hyper parameter. Now to this particular splitter. I'll give the data. Sorry this pages. Okay, and this is going to be my splitted docs

1108
03:13:54.950 --> 03:13:57.060
Sunny Savita: is splitted dots.

1109
03:13:58.050 --> 03:13:59.600
Sunny Savita: Just a second guys.

1110
03:14:00.130 --> 03:14:15.319
Sunny Savita: Let me take this one. Yeah, so this is going to be my splitted data. Okay, now, let me show you how the data looks like. But tell me, guys, there would be a 77 pages still, or there will be a multiple pages. Now means multiple document object. Now.

1111
03:14:15.490 --> 03:14:29.550
Sunny Savita: there will be a still 77 or multiple multiple document. Object, multiple document object. Let let me show you that. So here, if I'm going to check out with the length of this split document, you will get the number. See, there is total 6, 1, 5. Why?

1112
03:14:30.120 --> 03:14:34.140
Sunny Savita: Because we have divided our page into the chunk.

1113
03:14:34.270 --> 03:14:46.220
Sunny Savita: and in everything we have 500 character tokens. Sorry. Character. Okay. Now, what I'm doing here. So this particular data where I will store guys tell me where I will store this particular data. Anyone any. Guess

1114
03:14:46.780 --> 03:14:50.740
Sunny Savita: it'll be fast where I'm going to store it.

1115
03:14:51.180 --> 03:14:52.570
Sunny Savita: We are, we are, we are

1116
03:14:53.190 --> 03:14:59.340
Sunny Savita: yeah great guys. I'm going to store it inside the vector, database. Now, are you getting a clarity or not?

1117
03:15:00.290 --> 03:15:02.049
Sunny Savita: Are you getting a clarity?

1118
03:15:02.550 --> 03:15:03.890
Sunny Savita: Yes or no?

1119
03:15:04.430 --> 03:15:09.229
Sunny Savita: Okay, great. I hope so. Everything is going to be clear, and

1120
03:15:09.350 --> 03:15:34.649
Sunny Savita: whatever effort I like given there. Right, everything is going to be clear now. Okay, so what is the overload overlap? I'll come to that. You can ask me this doubt, Sarita, in a doubt session. I'll clarify that, even though, sir, has experience in the previous class. But you can ask me in a doubt session. That part. Okay, now, what I'm doing, guys again, I'm going to be initialized my vector, store freshly. I'm going to initialize that. So let me take this one. And I'm going to

1121
03:15:35.250 --> 03:15:40.519
Sunny Savita: executed. Okay, so here, here, here, here, here, here

1122
03:15:41.060 --> 03:15:49.569
Sunny Savita: we are here. Okay, so this is my vector, store. Now instead of vector store guys, what I will do, I'll add my data. So let me add my data.

1123
03:15:49.890 --> 03:15:55.530
Sunny Savita: Okay, so see guys, we are able to add the data inside the vector, store itself

1124
03:15:55.680 --> 03:16:01.629
Sunny Savita: got getting guys, yes or no. Are you able to understand this? Every process, whatever I'm doing over here?

1125
03:16:01.850 --> 03:16:05.880
Sunny Savita: Tell me, fast, guess or no.

1126
03:16:06.220 --> 03:16:07.779
Sunny Savita: Is it making sense?

1127
03:16:07.820 --> 03:16:29.289
Sunny Savita: Okay, now, after creating this vector, store, what I will do, guys. So here, I'm creating a retriever on top of it so that we can use it in our vector, in, in our rag pipeline. Okay, so let me do one thing, let me create a retriever on top of it. So here is my retriever. Okay, vector store.as a retriever. And here I can pass how much document we want to keep. We want to take right?

1128
03:16:29.290 --> 03:16:44.810
Sunny Savita: How many document we want to fetch from the vector, database? Now, I can write anything over here, right? I can write any number of K value. Let's say I'm going to write 10. I'm going to write 20. I'm going to write 50. Okay? So as of now, I'm just keeping it. 10, this one.

1129
03:16:45.100 --> 03:16:46.940
Sunny Savita: I'm just keeping it. 10

1130
03:16:47.660 --> 03:16:56.500
Sunny Savita: getting my point. This is a hyper parameter. Again, I'm saying, guys, this is a hyper parameter. Let me write over here. Hyper.

1131
03:16:56.600 --> 03:17:03.800
Sunny Savita: better meter. Okay. Now, what what is the meaning of the hyper? Parameter hyper parameter means?

1132
03:17:04.320 --> 03:17:09.110
Sunny Savita: You have to try it. Work. Try it with a multiple like experiments.

1133
03:17:09.320 --> 03:17:23.810
Sunny Savita: Okay, now, so after doing this one I have to create as create my retriever, I have to create. This vector is stored as a retriever. So once I will execute it, guys, I'm able to get my retriever. Now, I can simply invoke it.

1134
03:17:23.960 --> 03:17:37.790
Sunny Savita: I can simply invoke it. So if I'm writing over here, invoke, and if I'm checking, what is a llama model? Okay? So it will give me how many documents. Guys tell me how many document is going to be written to me? Tell me fast.

1135
03:17:39.760 --> 03:17:42.519
Sunny Savita: It's going to return to me. 10 document.

1136
03:17:44.080 --> 03:17:49.620
Sunny Savita: Can I get more than 10. Let's say 20. Yes, I can get 20. Let's say 20. Also

1137
03:17:50.400 --> 03:17:52.529
Sunny Savita: making sense or not. Tell me

1138
03:17:54.550 --> 03:18:01.000
Sunny Savita: it's making sense. Okay, now tell me, guys, did we completed our rag pipeline or not here

1139
03:18:01.110 --> 03:18:03.680
Sunny Savita: did we completed our Rec. Pipeline or not?

1140
03:18:04.580 --> 03:18:10.580
Sunny Savita: No, we haven't completed a rag pipeline. Okay, let me show you the rag architecture, how it looks like.

1141
03:18:10.810 --> 03:18:13.880
Sunny Savita: So what I can do, I can again open my blackboard.

1142
03:18:14.590 --> 03:18:16.260
Sunny Savita: And there I can explain.

1143
03:18:17.050 --> 03:18:30.250
Sunny Savita: Okay, guys. So this is the final one. Now, after this one I will close the session. Okay, then tomorrow we'll talk about the pine, cone and all, and we'll start with the line graph if the time will permit. Okay, so here what we have guys 3,

1144
03:18:30.370 --> 03:18:32.539
Sunny Savita: we have a Pdf, yes or no.

1145
03:18:34.760 --> 03:18:38.990
Sunny Savita: We have a Pdf means we have a data. Yes.

1146
03:18:39.470 --> 03:18:45.769
Sunny Savita: Now, after that, after that, what we have done after taking the Pdf. Did we load it

1147
03:18:47.790 --> 03:18:56.910
Sunny Savita: after this one? Did we get the pages or not after this one, guys, did we have chunking?

1148
03:18:57.710 --> 03:18:59.479
Sunny Savita: Did we perform the chunking?

1149
03:19:00.820 --> 03:19:07.579
Sunny Savita: Yes. So whatever configuration I made in a files because of that, it is able to do the embedding. Also.

1150
03:19:10.190 --> 03:19:14.899
Sunny Savita: this is clear or not. Guys tell me, this particular diagram line diagram is clear. Yes.

1151
03:19:15.070 --> 03:19:19.080
Sunny Savita: Now, here where I'm going to store it.

1152
03:19:19.710 --> 03:19:29.580
Sunny Savita: I'm going to store it inside the terminus. We are insertop fights.

1153
03:19:33.660 --> 03:19:34.690
Sunny Savita: Okay.

1154
03:19:35.250 --> 03:19:39.479
Sunny Savita: So guys here, what I'm going to store. I'm going to store our data in the form of document. Object.

1155
03:19:40.310 --> 03:19:43.299
Sunny Savita: There we have 2 things. One is a page content.

1156
03:19:44.220 --> 03:19:47.099
Sunny Savita: One is what guys tell me, one is a page content.

1157
03:19:52.250 --> 03:19:54.980
Sunny Savita: And the second is the metadata.

1158
03:19:57.330 --> 03:20:05.070
Sunny Savita: Okay, now tell me, guys, this particular process is called what this is called data ingestion.

1159
03:20:15.060 --> 03:20:23.660
Sunny Savita: Okay. Now the second one, what is the second one? Guys tell me, second one is a retriever. Now, whenever we'll pass any query.

1160
03:20:24.220 --> 03:20:32.470
Sunny Savita: okay, let me write over here? Query, whenever we'll pass any query, this query will come there.

1161
03:20:32.870 --> 03:20:35.860
Sunny Savita: This query will come to this vector database.

1162
03:20:36.740 --> 03:20:40.140
Sunny Savita: this vector database we are using as a retriever.

1163
03:20:46.770 --> 03:20:52.029
Sunny Savita: Okay, this vector database we are using as a retriever. So again, this query will also embed

1164
03:20:52.360 --> 03:20:54.259
Sunny Savita: internally, it will be embedding.

1165
03:20:55.250 --> 03:21:00.470
Sunny Savita: And what will fetch how many document we are able to fetch. Guys. Tell me how many document we are able to fetch.

1166
03:21:00.680 --> 03:21:02.340
Sunny Savita: K. Is equal to N.

1167
03:21:03.180 --> 03:21:09.450
Sunny Savita: This N could be 10. This N could be 20, this N could be 30. This N could be 40.

1168
03:21:09.610 --> 03:21:17.690
Sunny Savita: Okay, one question, can we apply the filtering while we are fetching the data, yes or no.

1169
03:21:19.250 --> 03:21:29.180
Sunny Savita: Can we apply the filtering? Yes, we can apply the filter. Okay. Now, this second pipeline is called guys. Tell me what it is called the second pipeline is called.

1170
03:21:29.420 --> 03:21:30.770
Sunny Savita: Tell me anyone.

1171
03:21:31.070 --> 03:21:38.550
Sunny Savita: The second pipeline is called the retriever, pipeline Retriever, pipeline.

1172
03:21:40.320 --> 03:21:47.930
Sunny Savita: Okay. Now, guys, see the second pipeline is called the Retriever pipeline. And the question is.

1173
03:21:48.030 --> 03:21:51.750
Sunny Savita: why we use that? Why we use vector database.

1174
03:21:52.050 --> 03:22:01.450
Sunny Savita: Anyone can answer for this question. Now, why we use vector database. Tell me. So we use vector database

1175
03:22:02.240 --> 03:22:06.730
Sunny Savita: for creating, for creating. Tell me, guys, why.

1176
03:22:07.110 --> 03:22:12.430
Sunny Savita: for creating a retriever pipeline. Okay, for creating

1177
03:22:18.060 --> 03:22:23.510
Sunny Savita: a retriever pipeline.

1178
03:22:25.950 --> 03:22:36.859
Sunny Savita: Now, your question have been answered, yes or no. Tell me now, your now. Your doubt is clear or not. Now, after this one, what we'll do, so whatever data we have fetched from here.

1179
03:22:36.980 --> 03:22:41.439
Sunny Savita: Where? Where will we pass this data? Where will we pass this data? Tell me, guys.

1180
03:22:41.730 --> 03:22:44.060
Sunny Savita: we'll pass this data to the Llm.

1181
03:22:44.400 --> 03:22:47.760
Sunny Savita: And will generator output.

1182
03:22:48.000 --> 03:22:52.550
Sunny Savita: So let me generate output over here. Not here, let's say, here we are going to generate out.

1183
03:22:54.750 --> 03:23:02.360
Sunny Savita: Now this 3rd pipeline is called. What? Tell me, guys, this 3rd pipeline is called generation.

1184
03:23:03.870 --> 03:23:12.240
Sunny Savita: Okay? And combinedly, this architecture is called what, combinedly, this architecture is called rap.

1185
03:23:15.600 --> 03:23:24.989
Sunny Savita: Now the thing is clear. Now the there he, this is generation. Actually, it is called the augmentation. Okay, augmentation is a very technical term.

1186
03:23:26.580 --> 03:23:36.499
Sunny Savita: Augmentation is a little technical term. Okay, you can think this retrieval and generation okay, both all together is called argument generation.

1187
03:23:38.220 --> 03:23:50.180
Sunny Savita: After retrieving whenever we are going to perform the generation now. So altogether. This term is called the argument generation getting my point, yes or no. It's a little technical term. But don't be confused with that.

1188
03:23:50.460 --> 03:23:51.500
Sunny Savita: Okay.

1189
03:23:51.600 --> 03:23:57.470
Sunny Savita: tell me, guys, is it getting clear? The rag architecture is clear or not to all of you? Yes.

1190
03:23:58.250 --> 03:23:59.410
Sunny Savita: T. Or C.

1191
03:24:00.600 --> 03:24:09.240
Sunny Savita: I explain you everything in a very detail, so you can understand. Now, can we apply the rag? Sorry can we apply the generation also there?

1192
03:24:09.620 --> 03:24:16.899
Sunny Savita: Can we apply the generation there? Yes or no? Now for performing a generation. Guys what would be required? Any guess what would be required

1193
03:24:17.480 --> 03:24:19.230
Sunny Savita: for performing a generation?

1194
03:24:19.380 --> 03:24:20.680
Sunny Savita: We required

1195
03:24:21.210 --> 03:24:44.739
Sunny Savita: Llm. Model. Correct. So here, guys, I'm going to use the Llm model from the Google AI studio. Okay, it's a Gemini model. I already configured that you can utilize any model. I don't have any issue. You can use the model from the Grok itself. Okay, so here is my model. I got my model. Now, what I will do, guys tell me so. Chris has explained you one concept. Did you remember the chaining concept?

1196
03:24:45.750 --> 03:24:53.929
Sunny Savita: Have you remember the chaining concept? So what all thing I have to chain over here. Tell me, guys, now. So I have to chain. Tell me, guys, context.

1197
03:24:54.250 --> 03:24:57.119
Sunny Savita: okay, I have to change prompt.

1198
03:24:59.310 --> 03:25:03.860
Sunny Savita: I have to change here. Model and parser.

1199
03:25:05.030 --> 03:25:08.579
Sunny Savita: can we change all this? 3 things? Yes or no? Tell me fast.

1200
03:25:09.360 --> 03:25:16.700
Sunny Savita: Can we chain or not this entire 3 things? Sorry. 4. Thing. Okay, do we have prompt as of now? Do we have prompt as of now?

1201
03:25:16.840 --> 03:25:21.480
Sunny Savita: We haven't written a prompt can you write a prompt can you write a prompt.

1202
03:25:21.820 --> 03:25:44.760
Sunny Savita: Yes, you can write a prompt but why we like do? Why, we need to write those prompt and all when the template is already applicable. So for the basic Reg and all automatically, you'll find out the template. Okay, let me show you where you will get the template. So once you will check with the lunch and hub. I'll show you that links and hub. Okay? So over the lunch, and how this template is already clear. See?

1203
03:25:45.050 --> 03:26:08.959
Sunny Savita: Oh, from the Link Channel. I'm going to take a rag. Prompt template now, once I will run it, guys, I will be getting my prompt. Let me show you how the prompt looks like. If you don't know about this hub and all you'll get in some time. So here I'm going to import this P. Print. P. Prints with pretty print. Okay? And what I can do. I can like import it 1st of all. And then here I can simply write the

1204
03:26:09.110 --> 03:26:10.710
Sunny Savita: P print, dot print.

1205
03:26:11.240 --> 03:26:13.710
Sunny Savita: P print, dot print. Okay.

1206
03:26:14.240 --> 03:26:21.649
Sunny Savita: just a second. And here I can pass my Prom dot message. So let me take the message from here.

1207
03:26:21.900 --> 03:26:24.109
Sunny Savita: Let me show you how the prompt looks like.

1208
03:26:24.690 --> 03:26:28.750
Sunny Savita: Okay, so this is my prompt guys. See here this one.

1209
03:26:28.940 --> 03:26:30.980
Sunny Savita: So if I'll show you this one. Now see.

1210
03:26:32.110 --> 03:26:44.770
Sunny Savita: this is a prompt. So the prompt, basically which you are creating by yourself. No need to do it. See? You can like. Take the template, the predefined template also, and here I'm pasting it in the Markdown.

1211
03:26:44.970 --> 03:26:46.439
Sunny Savita: Can you see this prompt?

1212
03:26:49.330 --> 03:26:52.209
Sunny Savita: Is it visible to all of you or not. Tell me, yes or no.

1213
03:26:58.810 --> 03:27:01.280
Sunny Savita: This is a prompt for the rack.

1214
03:27:01.780 --> 03:27:07.679
Sunny Savita: Okay, so context would be there. A question would be, there. Now, guys tell me, do we have context?

1215
03:27:08.780 --> 03:27:10.960
Sunny Savita: This, I will get from the retriever.

1216
03:27:13.510 --> 03:27:18.389
Sunny Savita: Okay, do we have prompt this? I got from the hub.

1217
03:27:19.830 --> 03:27:23.800
Sunny Savita: Okay, do we have model. So this I got from the Google.

1218
03:27:25.090 --> 03:27:28.830
Sunny Savita: do we have Parser? Yes. So this I will get from the link chain.

1219
03:27:29.880 --> 03:27:54.749
Sunny Savita: Okay, now let me import the parser also. Now, which parser is required. Guys tell me output parser is required. So let me sorry str output parser is required, but it could be any parser Json Parser, or anything, but as of now we'll get the answer in a string itself, so this parcel would be required. Now, apart from this one run able pass through one more package is also one more module will also required. So let me take it from the lengthen core itself.

1220
03:27:54.750 --> 03:28:03.130
Sunny Savita: Okay, so this all the code Christa is already written. So that's why I'm not putting too much effort over here. I believe you know about it. Okay. So run ables.

1221
03:28:03.240 --> 03:28:26.199
Sunny Savita: And here I can import the runnable pass through. Now, why we use this runnable pass through. So just to take a question on a runtime. And because of that only we use this run able pass through. Okay, so run able, pass through, is there? And we have this output, password and all everything. Now, finally, I'm going to create a chain guys. Okay. Finally, I'm going to create a chain. Now, what I'm doing.

1222
03:28:26.480 --> 03:28:33.109
Sunny Savita: I am going to create a chain. Okay, let let me copy and paste the chain. Okay, to see over here. This is my chain.

1223
03:28:33.330 --> 03:28:47.649
Sunny Savita: this one. So here I have a prompt. Here I have a model. Here I have. I have a output part, sir. Okay, now, this context is coming from the Retriever, and it is going to this format, Docs format docs what it will do, it will fetch the

1224
03:28:47.940 --> 03:28:53.810
Sunny Savita: page content. Okay? And this question, actually, it is coming on, Runtime. Now, once I'll run it

1225
03:28:54.210 --> 03:29:04.880
Sunny Savita: okay, and on top of it, if I invoke the rack chain. So let me do the format, Doc, as well, and let me show you what is there inside the format, Doc? So here I can write this tab

1226
03:29:05.190 --> 03:29:30.599
Sunny Savita: format. Doc would be there. This will take the document. Okay, it will take the document and what it it will provide to us, it will provide us the page content. Let me show you the written statement of it. It is very, very simple. Nothing is there. So whatever documents will pass over here. So it will provide the page content out of that particular document. Okay, from that particular document. Object.

1227
03:29:30.630 --> 03:29:49.489
Sunny Savita: Now. So we have the Retriever. Okay, Retriever is there which we have created. We have a format, Doc, so whatever output will get from the Retriever will pass you through the format. Docs. Okay? And here is a question which will come on over the runtime. So this is my retriever pipeline. So, using this one, we are able to fetch the context.

1228
03:29:49.750 --> 03:30:08.320
Sunny Savita: Then here is a prompt, here is a model. Here is the output parser. Now, once we'll combine all this thing. Now, this is called my rag. Now, why we are using this runnable pass through so that we can take a question on Runtime. Okay, let me show you that. So this is really now here I can write this rack chain.

1229
03:30:08.670 --> 03:30:10.759
Sunny Savita: and here Dot invoke.

1230
03:30:11.750 --> 03:30:18.860
Sunny Savita: Now I will write. What is llama model?

1231
03:30:19.170 --> 03:30:20.480
Sunny Savita: Okay, I'll see.

1232
03:30:22.890 --> 03:30:30.340
Sunny Savita: Okay, guys, are we getting? Answer or not? Yes or no? Now tell me this answer. We are getting based on what? Based on this

1233
03:30:31.890 --> 03:30:33.820
Sunny Savita: data, this retriever?

1234
03:30:35.470 --> 03:30:36.310
Sunny Savita: Yes.

1235
03:30:36.520 --> 03:30:44.710
Sunny Savita: Is it clear, guys? Yes or no? I think we are done with today's session. So this is a complete rag along with the data base.

1236
03:30:45.930 --> 03:30:46.980
Sunny Savita: All good.

1237
03:30:47.250 --> 03:30:50.789
Sunny Savita: Tell me how much you got it from this particular tutorial.

1238
03:30:51.130 --> 03:30:56.900
Sunny Savita: I'll revise the thing if you want, then otherwise, in tomorrow's session, I'll give you the walkthrough again. Okay.

1239
03:30:57.160 --> 03:31:16.760
Sunny Savita: so if you are following from starting this thing, then from here to here. See? 1st we understood the embedding. Then we understood about vector, store. Then we understood about the indexing and all everything. Okay, then here we have loaded our own Pdf, and using our own. Pdf, we have created a

1240
03:31:17.140 --> 03:31:20.399
Sunny Savita: rag. Guys. Okay, the complete rag chain.

1241
03:31:21.370 --> 03:31:33.599
Sunny Savita: clear or not runnable, is not clear. If runnable is not clear. Now, in that case you can think. See whatever question I'm passing out Runtime now. So this runnable, actually, it is picking this question and keeping it over here.

1242
03:31:33.920 --> 03:31:38.779
Sunny Savita: So it is taking a caution on Runtime, using this invoke.

1243
03:31:38.930 --> 03:31:39.930
Sunny Savita: Got it?

1244
03:31:43.170 --> 03:32:08.040
Sunny Savita: Okay, where you define the model in the Runtime. See, here is a model, this one i i define a model over here. Now I I took the model here, this this Germany model, and then I kept it over here. So, guys, whatever question you have, you can ask me. Now, in a doubt session, I'll be clarifying that. But 1st of all, tell me, guys, how much you got it from this particular session, I would like to know, in a percentage out of 100.

1245
03:32:13.980 --> 03:32:21.210
Sunny Savita: Okay, so if you are below 2, 70 or 60, that mean you have to revise the thing.

1246
03:32:21.340 --> 03:32:31.800
Sunny Savita: Okay, if you are below 2 50, then revise 2 time. If you are like 0 to 20 or 30, then ask me the question, because in that case, maybe you are blank. You don't know anything.

1247
03:32:32.340 --> 03:32:34.910
Sunny Savita: Okay, yeah.

1248
03:32:38.970 --> 03:32:44.570
Sunny Savita: great, perfect. So I think many of you. You are able to understand more than 70%. Great guys.

1249
03:32:49.000 --> 03:32:56.309
Sunny Savita: Yeah, I'll give you this notebook so that like, you can go through with it. Okay? So what I can do. I can

1250
03:32:57.820 --> 03:33:02.110
Sunny Savita: Jip all the thing. Or should I give you the notebook? Only

1251
03:33:04.040 --> 03:33:06.740
Sunny Savita: just a second guys. I'm giving you the note properly.

1252
03:33:19.850 --> 03:33:21.350
Sunny Savita: Dip everything.

1253
03:33:24.140 --> 03:33:32.389
Sunny Savita: sir. You are scrolling up very fast. Okay? But I think I'm writing a code with a motorist speed. Okay? So

1254
03:33:32.580 --> 03:33:38.490
Sunny Savita: yeah, fine. I think, guys, I can give you the Jip, just a second. I am doing a jip. Okay, wait

1255
03:33:41.530 --> 03:33:48.670
Sunny Savita: vector, databases here. And twice, okay, perfect.

1256
03:34:39.110 --> 03:34:42.100
Sunny Savita: Give me a moment, guys, I'm giving you the chip. Okay.

1257
03:34:44.330 --> 03:34:47.050
Krish Naik: So, guys, I hope everybody liked the class session.

1258
03:34:51.510 --> 03:34:53.790
Krish Naik: Yeah, perfect.

1259
03:34:53.900 --> 03:34:54.880
Krish Naik: Great.

1260
03:34:56.400 --> 03:35:00.959
Krish Naik: So sunny. I'll tell you something about Sunny is already working.

1261
03:35:01.160 --> 03:35:05.930
Krish Naik: And Langraf. He's building application in his company right now.

1262
03:35:06.470 --> 03:35:12.519
Krish Naik: So this, including Sunny in this batch, will definitely add a lot of values, you know.

1263
03:35:12.820 --> 03:35:21.710
Krish Naik: because when you're working in real terms, real life, right? All different different things. You'll be doing right you'll he'll be facing different problems.

1264
03:35:22.370 --> 03:35:29.859
Krish Naik: I think, Sunny, you also probably talk it. Talk about the use case that you do in the company right like how you are creating your own document, Parser.

1265
03:35:30.450 --> 03:35:34.689
Sunny Savita: Oh, yeah, sports shows. I can give that knowledge as well.

1266
03:35:36.293 --> 03:35:41.139
Sunny Savita: Just a second guys, it is an agent. Aki 2.2.

1267
03:35:41.850 --> 03:35:44.660
Sunny Savita: Oh, okay. I found the file.

1268
03:35:45.040 --> 03:35:46.230
Sunny Savita: Good old

1269
03:35:50.370 --> 03:35:54.650
Sunny Savita: yeah. Guys, did you get a file or not? Tell me I given you the chat.

1270
03:35:56.010 --> 03:35:59.289
Krish Naik: It's uploading. Yeah. Now, I think everybody is able to see.

1271
03:36:03.550 --> 03:36:17.720
Sunny Savita: Okay? Great. So yes, sir, I completed one vector, database files. So tomorrow I'll show you the pine cone or any cloud based database. Okay? And then we can close this rag one. And we can move to the agents after that. Okay.

1272
03:36:23.680 --> 03:36:29.170
Sunny Savita: yeah, it just the file will be available in the resource section. Also from there as well. You can download that. Okay.

1273
03:36:34.460 --> 03:36:44.520
Sunny Savita: Notes. I'll keep there. Okay, I will save the notes from here. I'll keep there. Okay? And from like next class onwards, I'll write in my blackboard itself. Okay.

1274
03:36:51.150 --> 03:36:55.319
Sunny Savita: requirement dot txt is not there.

1275
03:36:55.490 --> 03:37:12.709
Sunny Savita: I think. See? Already you have a requirement of txt. Just add these libraries. Okay, over there lengthen community files. Google, Germany. By Pdf, that's it. And if you are getting any module, no found error then. Do one thing try to install it with a pip. Command, Pip, install.

1276
03:37:12.960 --> 03:37:18.494
Sunny Savita: Yeah, we are done today, and you can go through again with this code, the entire code.

1277
03:37:19.080 --> 03:37:22.940
Sunny Savita: And if you have any doubt you can ask me now. Okay, I'll be taking the doubts.

1278
03:37:23.940 --> 03:37:45.970
Sunny Savita: And the code was a pretty easy guys. Nothing was there. So we just initialize the vector database. And after that, see? What we have done. So after initializing the vector database. So here we have load the data. After loading a data, we perform the chunking on top of it. Okay, after doing the chunking. See here, we have initialized the index. This is my vector store index.

1279
03:37:46.020 --> 03:37:49.779
Sunny Savita: Now on top of it, after storing, after creating an index

1280
03:37:50.125 --> 03:38:05.380
Sunny Savita: we have created a retriever. Okay? Why, we have created retriever. So we can consume in our pipeline. Okay? Now, after that, what we have done, we have initialized the model. We have initialized the prompt from the hub hub itself. We have fetch that prompt. Okay?

1281
03:38:05.380 --> 03:38:28.490
Sunny Savita: And then, here is my final chain. Now, what this final chain is doing. It is just going to be combined. All the component and lengthen gives us one common interface on top of it. We can call this invoke method. So all this individual component is having the invoke method, this retriever, this prompt, this model, this output parser, and all. That's why we are able to call this invoke on top of it. Okay.

1282
03:38:28.490 --> 03:38:43.809
Sunny Savita: so we are able to face the context, using the retriever here. My question will come, then, my prompt model and parcel. That's it, guys. Once you will revise it, you will get that. Okay, as will progress. We'll take some typical example. With that your understanding will be much clearer. Got it?

1283
03:38:44.130 --> 03:38:49.000
Sunny Savita: Yes, sir. So I'm done with the like sessions now, so I can go ahead with a doubt. Okay.

1284
03:38:49.290 --> 03:38:55.010
Sunny Savita: so, guys, I'll just require 2Â min. Let's take a quick water break. Okay? And then we'll start with the doubt session.

1285
03:38:55.180 --> 03:38:55.950
Sunny Savita: Okay.

1286
03:38:58.320 --> 03:39:16.980
Sunny Savita: so can you please also share the llama dot. Pdf, file. I did haven't share that. Okay. Guys see whatever is not there. Now, I'll keep in the resource section, and from next class onwards I'll make sure that everything would be there. Okay, because I'm not very much familiar with this Jip and all. So don't worry. I'll keep that. Bye.

1287
03:39:17.890 --> 03:39:41.739
Sunny Savita: Yeah, okay, guys. So let's take a 2Â min of break, a quick break, and after that I'll be coming. Your doubts. Whatever doubts you have. You can ask, and don't worry about this material and all. Again, I'm saying it will be available in the resource section, and let's say, if any, if this lama Pdf is not there, see, it is not a big thing. You can use any Pdf, whatever is there inside your system.

1288
03:39:41.770 --> 03:39:53.599
Sunny Savita: Right? I I shown you with this llama. Pdf, you can use any Pdf transformer. Pdf, your own. Pdf, this Pdf, that Pdf, that will be more realistic like the experience. For you

1289
03:39:53.870 --> 03:39:54.980
Sunny Savita: understood?

1290
03:39:55.250 --> 03:39:56.730
Sunny Savita: Okay, bye.

1291
03:39:56.880 --> 03:40:09.080
Sunny Savita: So putting a timer guys for the 5Â min, and then we'll start with the doubt session. Thank you. If you don't have any doubt you can drop the session, and tomorrow we'll discuss one more database, and then we'll close this database chapter.

1292
03:45:37.440 --> 03:45:44.749
Sunny Savita: Yeah. Okay, guys. So let's start with the doubt session. If you have any doubt you can ask me or give me a moment. Gayatri.

1293
03:45:55.910 --> 03:45:58.669
Sunny Savita: Yeah. So let's begin now.

1294
03:45:59.020 --> 03:46:07.779
Sunny Savita: sir. Can you elaborate more on the hub? And any link? Read more? Tomorrow we'll discuss that. Okay, vishujit. So don't be like the

1295
03:46:08.090 --> 03:46:14.540
Sunny Savita: the overflow right in the single session itself. Step by step, one by one we'll try to discuss those also.

1296
03:46:14.610 --> 03:46:27.500
Sunny Savita: So the Pdf that you created. Now can you show what type of Meta test store in the vector database you can print that metadata value. I even written inside the notebook once you will print that metadata value. You will get the metadata. Okay? Other.

1297
03:46:27.500 --> 03:46:45.090
Sunny Savita: how to find token consumption in rack pipeline. So token, consumption wise. You will have to calculate the token. Okay, you will have to configure the just. Do one thing, configure the language as of now. It will give you the number of tokens as well as like, apart from this one, you can, whatever Api you are using.

1298
03:46:45.090 --> 03:46:55.059
Sunny Savita: Okay? For reading the models that MoD, that Api also it gives you the dashboard. How? What is your token, consumption limit, and all, or manual pipeline? Also you can create

1299
03:46:55.060 --> 03:47:01.350
Sunny Savita: whatever is fine, but as of now the easiest way configure the language with it will give you the detail. Okay?

1300
03:47:03.779 --> 03:47:10.619
Sunny Savita: Can you please show the print complex, complete, prompt with the context which you send to the rag.

1301
03:47:12.330 --> 03:47:16.159
Sunny Savita: Shrikant is asking this question. Yes, Shrikant, I can show you that

1302
03:47:16.750 --> 03:47:24.299
Sunny Savita: just a second. And guys, even you can unmute yourself. Sorry you can raise the hand, and I'll unmute you. Okay, don't worry. You can ask the doubt.

1303
03:47:24.680 --> 03:47:27.399
Sunny Savita: So this one

1304
03:47:28.040 --> 03:47:43.380
Sunny Savita: we have fetched the prompt first.st This prompt we have configured the model we have fetched up, prompt. We have configured the model. And after that we have created a chat. Okay, just analysis. This part, Srikan, you will get to know. Okay, what is happening there inside the pipeline understood. Now.

1305
03:47:43.660 --> 03:48:08.539
Sunny Savita: okay, see? Once you will revise now. I can understand in a single class, it is not possible to get everything so do one thing. Try to revise this part, and later on, miss. Tomorrow you can ask that doubt with respect to the code and all, if you have any major doubt. Okay, now, guys, I'm giving you the access. You can talk with me. So what's your doubt. Please go ahead with the doubt. Syria.

1306
03:48:16.510 --> 03:48:19.850
Sunny Savita: Hey? Hi, Surya! We are you there? I'm waiting for you

1307
03:48:26.920 --> 03:48:31.229
Sunny Savita: just a second. Yeah. Now I can hear you, Surya? Yeah, go ahead with the doubt, please.

1308
03:48:31.230 --> 03:48:38.829
Suryavi Lohia: So here, as you said in the search part, it is using canon algorithm for each iterative by searching.

1309
03:48:38.830 --> 03:48:39.390
Sunny Savita: Hmm

1310
03:48:42.920 --> 03:48:44.010
Sunny Savita: sorry.

1311
03:48:44.544 --> 03:48:50.210
Suryavi Lohia: For flat index search. It is using knl algorithm at the backend for iteratively searching.

1312
03:48:50.210 --> 03:48:58.700
Sunny Savita: Not pnn algorithm. I was saying it was the exact match. Okay, it is using. The similarity met similar to such mechanism.

1313
03:48:58.870 --> 03:49:05.560
Sunny Savita: the cosine similarity and all. Again, it is not using the Knn algorithm over here. Got it.

1314
03:49:05.700 --> 03:49:29.810
Sunny Savita: But we can configure that. That is also possible. Okay, if you will explore the about this vector database more. Okay? So you can create an index with that Knn also with the K nearest neighbor as of, now, don't go into that complexity. If you want to explore it from your own, you can do just understand over here that we have created an index. We have created a flat index, and on top of it we are performing a similar research. That's it. Okay.

1315
03:49:30.500 --> 03:49:43.440
Suryavi Lohia: Okay, so let's say, if if in case I try to do customization, but can it work very slow? Right? It's we call as a lazy learner, so will it be good for to use, for when we have a large data sets.

1316
03:49:43.440 --> 03:49:48.407
Sunny Savita: For see, ma'am, again, it depends on the configuration of a system. Right?

1317
03:49:48.790 --> 03:49:49.400
Suryavi Lohia: Bye.

1318
03:49:49.400 --> 03:49:51.749
Sunny Savita: Right on which, like this is.

1319
03:49:51.750 --> 03:49:57.109
Sunny Savita: you are executing that part. If you have a good configuration where you have configured the database and all.

1320
03:49:57.280 --> 03:50:10.560
Sunny Savita: it will work fine. Otherwise do one thing if you are using the Kn right. K, nearest neighbor, in that case create a different index like I've shown you the Ivf the quantized Ivf, okay, or the Hnsw. And all right, maybe it will work well with them. Got it.

1321
03:50:10.960 --> 03:50:13.200
Suryavi Lohia: Okay. Okay. Thank you.

1322
03:50:13.500 --> 03:50:14.470
Sunny Savita: Thank you, man.

1323
03:50:14.590 --> 03:50:19.060
Sunny Savita: Okay. So Shyam, what's your doubt? Please go ahead with the doubt. Shyam and Ravi.

1324
03:50:20.550 --> 03:50:22.129
Shyam Kumar: Hi! Hi! Sunny sham! This here.

1325
03:50:22.130 --> 03:50:22.920
Sunny Savita: Yes, ma'am.

1326
03:50:23.680 --> 03:50:28.359
Shyam Kumar: So yeah, actually, I wanted to talk to Chris, sir, is he available.

1327
03:50:29.100 --> 03:50:34.370
Sunny Savita: Chris, sir, actually is not available right now. You can discuss with me. If anything is there. Tomorrow you can discuss with the Christ. Okay.

1328
03:50:34.780 --> 03:50:35.450
Shyam Kumar: Oh, okay.

1329
03:50:35.450 --> 03:50:42.940
Shyam Kumar: okay, actually, I'm actually working in an organization. So I have already developed and deployed 2 gen, a applications.

1330
03:50:43.520 --> 03:50:50.270
Shyam Kumar: One is, we extracted around 32 different types of documents. Each document contains 300 pages.

1331
03:50:50.530 --> 03:50:51.010
Sunny Savita: Hmm.

1332
03:50:51.010 --> 03:51:02.209
Shyam Kumar: Around. We were extracting around 600 plus fields, using same methods, all, everything like whatever you're showing. We just done. Last year we deployed one application that is for Canada client

1333
03:51:02.370 --> 03:51:08.649
Shyam Kumar: and mean, like, yesterday. Yeah, yesterday we deployed one more. So everything.

1334
03:51:08.650 --> 03:51:09.200
Suryavi Lohia: Oh, yeah.

1335
03:51:09.200 --> 03:51:10.339
Shyam Kumar: Sure ashore. Network

1336
03:51:10.540 --> 03:51:19.979
Shyam Kumar: for function app. We use function, app for backend Apis and then web app for front end apis. We will link the both, and we use the Gpt-four for

1337
03:51:20.120 --> 03:51:22.270
Shyam Kumar: Canada Project and Gpt. 4. Row

1338
03:51:22.470 --> 03:51:26.609
Shyam Kumar: for the recent one that we did so.

1339
03:51:26.890 --> 03:51:29.760
Shyam Kumar: I have one small request.

1340
03:51:29.890 --> 03:51:44.239
Shyam Kumar: Sunny, so I was looking for an particular notes. Okay, I mean, like, kind of like, whatever you're teaching. Yeah, it's it's really good, very good, Chris, sir, and your side. So we want an organized notes.

1341
03:51:44.480 --> 03:52:03.539
Shyam Kumar: I mean, like the handwritten notes is a kind of you know, after going back right? I mean, like, say, I'm looking into that notes some a week back, and I'm not going to correlate with whatever the. So if you can organize notes with Pdf, kind of data that would be useful for.

1342
03:52:03.540 --> 03:52:06.199
Sunny Savita: Video was not shared with you. The last class video.

1343
03:52:06.800 --> 03:52:09.069
Shyam Kumar: Oh, not not the Pdf. In the sense of

1344
03:52:09.180 --> 03:52:13.959
Shyam Kumar: it's like in regular document, generated. Pdfm thing, I'm saying.

1345
03:52:14.160 --> 03:52:16.279
Shyam Kumar: with all the flow and everything.

1346
03:52:16.430 --> 03:52:21.009
Sunny Savita: That handwritten notes you want in the form of the Pdf. That generated Pdf. Is it.

1347
03:52:21.010 --> 03:52:24.240
Shyam Kumar: Yes, yes, yes, I mean, like in regular notes, right? We'll.

1348
03:52:24.240 --> 03:52:31.550
Sunny Savita: Yeah, I got your point. So see whatever we are writing right? So handwritten, whatever we are explaining. Okay, so we'll

1349
03:52:31.690 --> 03:52:39.169
Sunny Savita: we will save as a Pdf. And we'll share with you. And even we are sharing with that with like, I think, in all the last classes.

1350
03:52:40.000 --> 03:52:56.690
Sunny Savita: Okay, so don't worry about it. We'll keep it more organized and like, with a beautiful handwriting and all. And don't worry. So, going forward, we are going to add on one more new feature in the upcoming session. So whatever we are speaking and saying right and whatever we are writing it will automatically will be converted into one single book.

1351
03:52:56.690 --> 03:53:11.699
Sunny Savita: Okay, the single Pdf itself, and with the entire transcript and all. And our team is working on it. Okay? And it will be integrated inside the session itself automatically in the form of Pdf, okay. But as of now, just for the like, the solution, right? So what I will do, whatever we are.

1352
03:53:11.700 --> 03:53:16.649
Sunny Savita: Think we'll to write in a more organized way, and we'll share with the Pdf, okay, as a Pdf.

1353
03:53:16.650 --> 03:53:37.260
Shyam Kumar: I mean writing part is, everything is clear. I mean, like, I'm not saying that you're writing and all. But the thing is like, it's right now. It's in bits and pieces, right? So if it isn't like and start and where it ends, it's like, even if I'm looking at 6 months later. So if it is like in start to end like in one single Pdf, that's what I was a bit. The small request from my side.

1354
03:53:37.260 --> 03:53:40.779
Sunny Savita: I got. Yeah, I'll I'll consider that. Okay, we'll get back to you.

1355
03:53:41.290 --> 03:53:42.440
Shyam Kumar: Yeah, thank you. Son.

1356
03:53:42.440 --> 03:53:43.170
Suryavi Lohia: Thank you.

1357
03:53:44.610 --> 03:53:47.208
Sunny Savita: Okay. Now, Robbie, any doubt is there?

1358
03:53:47.770 --> 03:53:54.409
Sunny Savita: Please go ahead with the doubt. Shyam is done. Now, Devo Prata, Shubham pawan guys, please go ahead.

1359
03:53:54.790 --> 03:54:04.770
Sunny Savita: sir, kindly, please enable the copying from the Zoom chat I'm unable to copy, is it, guys? Okay, we'll we'll check that if any setting is there. With respect to that, we'll enable that part. Okay.

1360
03:54:04.890 --> 03:54:10.899
Sunny Savita: by the note that Sunny is asking for more than a description contest from the brief in the deliberate. Pdf.

1361
03:54:11.330 --> 03:54:26.300
Sunny Savita: okay, that's what I was saying now like, we'll generate a transcript of this entire session and all we'll give you give you in a more beautiful manner as I like the complete Pdf, and all. Okay, don't worry. In the upcoming days you'll find out that feature.

1362
03:54:26.450 --> 03:54:27.420
Sunny Savita: Got it.

1363
03:54:27.420 --> 03:54:28.110
Pawan: Yeah.

1364
03:54:28.110 --> 03:54:31.260
Sunny Savita: They will. Yeah, for one. Please go ahead with it, Dominic.

1365
03:54:31.610 --> 03:54:39.430
Pawan: Yeah, I have 2 questions. Sunny 1st is the in today's session. You said that we create the index using the metadata.

1366
03:54:39.550 --> 03:54:47.349
Pawan: Right? So I did not understand what is the role of metadata and creating the index I mean, index creating is just specifying the algorithm.

1367
03:54:47.350 --> 03:54:56.910
Sunny Savita: When I told you, we create index with a metadata, we include the metadata also along with the data I told you. Now see, when we create an index, we store the document.

1368
03:54:57.120 --> 03:54:59.239
Sunny Savita: yes or no, for getting a call.

1369
03:54:59.240 --> 03:55:01.799
Pawan: If that in that case the the confusion is not there.

1370
03:55:02.130 --> 03:55:02.860
Sunny Savita: Sorry.

1371
03:55:02.860 --> 03:55:03.540
Pawan: Okay.

1372
03:55:03.760 --> 03:55:10.289
Pawan: In that case, if you say I mean, there is no rule of Meta return creating the index. The confusion is clear.

1373
03:55:10.510 --> 03:55:11.250
Sunny Savita: Oh!

1374
03:55:12.080 --> 03:55:26.370
Pawan: Okay, second question is, I was trying with the Pdf parsing the Pdf, so I I am facing issue in my one of my project there where the cells are. I've been the table cells are merged.

1375
03:55:26.410 --> 03:55:46.789
Pawan: I mean rows, rows, and columns are mult. So I tried with 8 to 9 libraries, including prime Pdf. And unstructured, and all different libraries in the Linkedin document loader. But I'm not able to pass those merger rows and columns tables inside the Pdf, so is there any library you have seen the issue.

1376
03:55:46.790 --> 03:55:53.749
Sunny Savita: So for that, actually, what you will have to do, you will have to like work on a Xml level. Okay? So whenever we talk about.

1377
03:55:53.750 --> 03:55:54.129
Pawan: Told you.

1378
03:55:54.130 --> 03:56:16.456
Sunny Savita: Pdf for any document correct. So in a back end, actually, it's going to be maintained. One xml. Right? So just do one thing, try to pass on that level that Xml level. Try to extract that table. Okay? And once you will extract the table from that Xml level, you will be able to merge that row. Spend column, span everything. Okay? And

1379
03:56:17.250 --> 03:56:23.339
Sunny Savita: That specific format, you will be able to fetch your data and then do whatever whatever you want to do with that data. Okay.

1380
03:56:23.340 --> 03:56:31.410
Pawan: So first, st I need to fetch the Xml Xml format from the table itself, from the Pdf table, right.

1381
03:56:31.410 --> 03:56:40.240
Sunny Savita: One thing, just check how you can. Like the past document on that Xml level. Okay, for fetch out any table or any kind of data. You will get that part.

1382
03:56:40.240 --> 03:56:42.380
Pawan: But the table is in Pdf. Itself. No.

1383
03:56:43.064 --> 03:56:44.710
Sunny Savita: It's as a Pdf. Only done.

1384
03:56:45.360 --> 03:56:46.190
Pawan: Yeah, right.

1385
03:56:46.190 --> 03:56:51.789
Sunny Savita: Yeah, that's what I'm saying. So you can pass it on that Xml level. Okay, I pass document.

1386
03:56:51.790 --> 03:56:52.260
Pawan: Okay.

1387
03:56:52.260 --> 03:57:01.079
Sunny Savita: Okay, I fetch the like table. I most the cell. Okay, there is a properly of the table row is spent. Column is fine. Okay, with that, actually, we can.

1388
03:57:01.080 --> 03:57:01.670
Pawan: Right, right.

1389
03:57:01.670 --> 03:57:24.649
Sunny Savita: Right? So once you will fetch the data in that particular format, the Xml or Stml level Stml, basically, it's for the web pages right? And with Xml, basically, it's for this document. And the this. X xlx, right, the excel format. And all right. So once you will fetch the data on that level, you can easily get it, and you can easily merge it. And you can retain the context, table and all got it.

1390
03:57:25.240 --> 03:57:28.420
Pawan: Okay, is there any library for the same? I mean passing.

1391
03:57:28.420 --> 03:57:33.439
Sunny Savita: I would suggest, you see, you can use a dockets, python dockets.

1392
03:57:33.860 --> 03:57:41.249
Sunny Savita: Okay, direct. Live ready. Will not give you any solution here. You will have to create your custom wrapper in the low level code. You will have to write.

1393
03:57:41.650 --> 03:57:42.410
Sunny Savita: Okay.

1394
03:57:42.540 --> 03:57:43.270
Pawan: Got it.

1395
03:57:43.270 --> 03:57:43.950
Sunny Savita: Yeah.

1396
03:57:43.950 --> 03:57:46.169
Pawan: Python. What was that library docket?

1397
03:57:46.170 --> 03:57:47.689
Sunny Savita: Cited dockets, correct.

1398
03:57:49.430 --> 03:57:50.260
Pawan: Thank you.

1399
03:57:51.900 --> 03:57:53.080
Debobrata: Hey! Hi, sonny!

1400
03:57:53.360 --> 03:57:55.640
Sunny Savita: Yeah. Devoprata. Please go ahead with it.

1401
03:57:55.980 --> 03:58:11.869
Debobrata: So 1st thing is that when we use the cosine similarity, right? So we know for passing the query, input we convert that into embedding site. But when we try to use this vector store right.

1402
03:58:11.870 --> 03:58:12.310
Sunny Savita: Yeah.

1403
03:58:12.310 --> 03:58:30.009
Debobrata: While adding, while using a similarity search function. And we put the query right and the hyper parameter right? So in that case, shall we not convert that input into embeddings and then pass it as part of the similarity search function? Is it not required.

1404
03:58:32.179 --> 03:58:35.470
Sunny Savita: Sorry I didn't get let me share the code just.

1405
03:58:35.470 --> 03:58:37.389
Debobrata: Right, so, yeah.

1406
03:58:38.950 --> 03:58:39.990
Sunny Savita: Yeah, we are.

1407
03:58:40.880 --> 03:58:55.603
Debobrata: Yeah, is this? Yeah? So 1st example, we saw the cosine similarity right where? We saw the different cosine similarity. L, 2 distance, where for matching that sentence right with the

1408
03:58:56.430 --> 03:58:58.419
Debobrata: not here in the code.

1409
03:58:58.660 --> 03:58:59.380
Sunny Savita: Correct. That's true.

1410
03:58:59.860 --> 03:59:10.900
Debobrata: So you convert that input into the embedding site because both has to match because your diction your corpus has a embeddings. Yeah.

1411
03:59:11.370 --> 03:59:14.030
Debobrata: And you can go above a little bit.

1412
03:59:16.020 --> 03:59:18.600
Debobrata: Yeah, where you are using the cosine similarity.

1413
03:59:18.710 --> 03:59:20.820
Sunny Savita: Cosine similarity. And this is the one.

1414
03:59:21.910 --> 03:59:26.540
Debobrata: Correct. So now this, my query, you converted that into embeddings correct.

1415
03:59:27.630 --> 03:59:41.390
Debobrata: Cell number 12. My query, right? But we knew when we are using in vector, search, right? In in the vector, search, similarity function. Similarity, search function. We are not

1416
03:59:41.630 --> 03:59:45.130
Debobrata: converting that input right into embeddings.

1417
03:59:45.130 --> 03:59:49.340
Sunny Savita: Okay, you are saying explicitly, why we are not converting that like we are converting over here.

1418
03:59:49.340 --> 03:59:50.410
Sunny Savita: Correct? Right?

1419
03:59:50.410 --> 03:59:54.959
Sunny Savita: That is not required. Lengthen has already done that. Okay, in backend.

1420
03:59:54.960 --> 03:59:59.840
Debobrata: How it is doing it. Yeah, means in that function in the similarity search function.

1421
03:59:59.840 --> 04:00:02.619
Sunny Savita: Let's see. First, st we are creating an index.

1422
04:00:03.110 --> 04:00:03.780
Sunny Savita: Okay.

1423
04:00:03.780 --> 04:00:04.220
Debobrata: Alright!

1424
04:00:04.220 --> 04:00:14.830
Sunny Savita: This one, then we are creating the vector store while we are creating the vector store. Now, this particular object. Okay, we are initializing this variable embedding function. So here only we are giving this embedding model. See.

1425
04:00:15.010 --> 04:00:17.459
Debobrata: Correct. So that is the halving fix image.

1426
04:00:17.460 --> 04:00:23.519
Sunny Savita: Yeah in memory. And this one okay, the other parameter. Now, we have called this add document method.

1427
04:00:24.320 --> 04:00:27.000
Sunny Savita: Alright. Then we have called this

1428
04:00:27.369 --> 04:00:32.490
Sunny Savita: which method, similarity search method right where we have called this just a second. Let me show you that.

1429
04:00:32.980 --> 04:00:57.959
Sunny Savita: So here we have called the similarity search. Right? So whenever we are giving this query now so automatically, the code have been written in such a way in back end. Okay? So this query is going to the embedding, embedding function. It is going to be convert into the embedding. Okay? And then automatically doing the similarity search and all. And you are getting an output. So you can, you can visualize it in such a way that someone has written this class

1430
04:00:58.770 --> 04:01:07.180
Sunny Savita: pillars, files. Okay, now, inside this class, we have an init method in it.

1431
04:01:08.030 --> 04:01:11.159
Sunny Savita: Now, this init actually is taking this 4 parameter.

1432
04:01:12.340 --> 04:01:14.220
Sunny Savita: It's all about the python coding.

1433
04:01:14.220 --> 04:01:16.060
Debobrata: Index in meeting stock storage.

1434
04:01:16.060 --> 04:01:26.389
Sunny Savita: Okay, so this init method. It's taking just a second, this 4 parameter.

1435
04:01:30.790 --> 04:01:34.960
Sunny Savita: Okay. Now, inside this one, we have another method of depth.

1436
04:01:35.880 --> 04:01:41.689
Sunny Savita: This one add document, okay, this tab at document.

1437
04:01:41.810 --> 04:01:49.235
Sunny Savita: This is also a class method that inside this one again, we have one more method. Tab, similar

1438
04:01:51.300 --> 04:01:59.070
Sunny Savita: search. Okay. Now, what they are doing inside this similarity search itself. They have written such kind of logic whenever this query.

1439
04:01:59.070 --> 04:02:02.450
Debobrata: Calling the okay internal function to do the computation.

1440
04:02:02.450 --> 04:02:08.480
Sunny Savita: Whenever the query will come automatically, it is it will be using this embedding.

1441
04:02:08.480 --> 04:02:30.599
Debobrata: Yeah, I understood. Now, now, my question is that, is it possible that I can have 2 different embeddings? So let's say, my input query. I wanted to use a different embedding techniques. And my base vector, database has, let's say, like hugging face embeddings, is that possible? Can I have 2 different embeddings, or it has to be always consistent. Only one.

1442
04:02:32.930 --> 04:02:34.809
Sunny Savita: Sorry I didn't get that. Can you come back.

1443
04:02:34.810 --> 04:02:41.509
Debobrata: I'm saying, can I use 2 different? Let's say, my input query should fall into a different embedding category. Where.

1444
04:02:43.150 --> 04:02:50.829
Sunny Savita: Same. No, this this embedding function should be same. Otherwise we'll show you the mismatch issue. No, this one, the Dimension Mismatch itself.

1445
04:02:50.830 --> 04:02:53.870
Debobrata: Okay, okay, so it has to match the dimension.

1446
04:02:54.190 --> 04:03:08.210
Debobrata: Otherwise, okay. And second thing is in the doc store since we are using in memory. Db, that's why you're using in memory, Doc store, or like that is this in memory, Doc Store. Why is that.

1447
04:03:08.450 --> 04:03:21.190
Sunny Savita: This end. Memory deck dock is store. No, it is like one of the function of the from the lengthen itself, so automatically by default, it is going to be create this files only. Okay, so even though we are not using it over here directly. But yeah, so yeah, here. See.

1448
04:03:21.300 --> 04:03:25.400
Sunny Savita: we can use directly as well, and we can use over here.

1449
04:03:25.400 --> 04:03:28.420
Debobrata: This is specific to files, or it can be for other.

1450
04:03:28.420 --> 04:03:43.550
Sunny Savita: It is for the files as of now. Okay, I'm not sure it is. For the other one is also like the chroma, and all see, for sure it will be for the chroma it will be for the cord, and whatever database we can store we can configure in memory, it would be there. With respect to that. Okay.

1451
04:03:43.970 --> 04:03:44.300
Debobrata: Thank you.

1452
04:03:44.300 --> 04:03:55.989
Sunny Savita: Just do one thing. Check out with the documentation while you are going to be. Configure any other database like open search spice, chroma, quadrant, whatever you can configure in memory. Okay, for sure. It would be there. This particular parameter.

1453
04:03:56.280 --> 04:04:12.530
Debobrata: Okay. So this is, since we are using in memory. Right? That's why we have to use this parameter. But let's say, if we try to use it as a let's say on our disk, right? Because you save those indexes. Yeah, you save those indexes on the dates, and how you

1454
04:04:12.530 --> 04:04:26.460
Debobrata: I do not want to use in memory, because I I will like have a local dB right where I have a local disk. Right? Then why I need to use that in memory stored as a parameter, because I do not want to use it in memory.

1455
04:04:26.460 --> 04:04:30.169
Sunny Savita: Where I'm using the while I'm loading it, while where I'm using the in.

1456
04:04:30.170 --> 04:04:33.089
Debobrata: Not here in the creating, the vector, dB.

1457
04:04:34.125 --> 04:04:39.630
Sunny Savita: Whatever operation you perform you perform in the memory itself. No, okay.

1458
04:04:39.630 --> 04:04:40.350
Debobrata: Hmm, okay.

1459
04:04:40.350 --> 04:04:43.229
Sunny Savita: So after saving it, I'm not using it. See? Go again.

1460
04:04:43.230 --> 04:04:50.090
Debobrata: No, no, correct. Correct, then then that in memory should happen for all. Vector Dv, right? Because all the computation, anyway, will happen in the memory.

1461
04:04:50.090 --> 04:04:58.880
Sunny Savita: That's what I'm saying. Whatever vector database you can configure in memory for sure it should be there. I haven't explored with all the database. As a result, you can check it out there. Okay.

1462
04:04:58.880 --> 04:05:09.200
Debobrata: Okay, so even for cloud based we may not use right? For let's say, pinecone we are using, we need not to use in memory right, correct.

1463
04:05:09.200 --> 04:05:12.280
Sunny Savita: Correct, correct. We don't need to use any memorial order. Then.

1464
04:05:12.530 --> 04:05:25.600
Debobrata: Okay, so and an index to Doc store id right? That was only for this identifier like in database in a normal Rdb.

1465
04:05:25.600 --> 04:05:26.710
Sunny Savita: Yeah, we can use.

1466
04:05:26.710 --> 04:05:29.950
Debobrata: That id as an identifier right, which is auto generated right.

1467
04:05:29.950 --> 04:05:30.390
Sunny Savita: Each other.

1468
04:05:30.390 --> 04:05:33.960
Debobrata: So is it similar like that where it will create this uid.

1469
04:05:34.450 --> 04:05:41.600
Sunny Savita: Yeah, it will create a uuid. Okay, it will map it, basically with every document. So if you want to fetch the data, okay, let me show you how to fetch the data. Using this.

1470
04:05:41.600 --> 04:05:42.660
Debobrata: Correct, right.

1471
04:05:42.935 --> 04:05:46.789
Sunny Savita: Just a second. I capped that code, basically. But I haven't shown that one.

1472
04:06:05.190 --> 04:06:08.390
Sunny Savita: So this is the code for us to say.

1473
04:06:10.180 --> 04:06:17.169
Sunny Savita: actually, we can iterate on top of it, using the for loop and all. So let's say, here's my index. 1st index 1st means this one.

1474
04:06:18.360 --> 04:06:18.970
Debobrata: With 8.

1475
04:06:18.970 --> 04:06:30.010
Sunny Savita: Okay. So what I will do, I will use this vector store index to talk a store. This is my dictionary. I'll give this particular id, okay, id number. So once I run it now.

1476
04:06:30.720 --> 04:06:34.750
Sunny Savita: So see, we will be able to get.

1477
04:06:35.070 --> 04:06:42.070
Sunny Savita: we are using this vector store Doc, search, search. We are giving the rock. Id. And with respect to that, we'll be able to get the page content.

1478
04:06:42.070 --> 04:06:44.820
Debobrata: Okay, okay? So based on the idea, you can get the.

1479
04:06:44.820 --> 04:06:47.849
Sunny Savita: It is just able to data as well as a page content.

1480
04:06:47.850 --> 04:06:48.380
Sunny Savita: But.

1481
04:06:48.940 --> 04:07:13.889
Debobrata: Okay, okay. Now, my last question. So now in vector store you, you used as retriever. Right? Where? using that you're calling that invoke by passing the query, it is able to do it now, can I, without using as retriever? Can I still use the similarity? Search there also.

1482
04:07:14.070 --> 04:07:15.150
Sunny Savita: The nosinger tribute.

1483
04:07:15.150 --> 04:07:22.140
Sunny Savita: you will have to convert it into into the azure retriever. Okay, if you want to consume it inside this pipeline, this chaining. Okay.

1484
04:07:22.600 --> 04:07:31.909
Debobrata: Okay, so this is required for training. So if I so I cannot use similarity. Search here, right like, which you have used in the before.

1485
04:07:31.910 --> 04:07:51.949
Sunny Savita: You cannot call the similarity search on top of it. It is a cloud specific function. But if you are going to be converting to the as a retriever. So some functionality have been written in such a way that we'll be able to call the invoke so invoke where it will help to us. It will help to us over here while we are creating a chain. Right? So it will be a in the common interface. So prompt model. Sdr output. Parser, retriever.

1486
04:07:51.950 --> 04:07:53.329
Sunny Savita: Okay, it doesn't.

1487
04:07:53.330 --> 04:07:55.670
Sunny Savita: Common interface. We can call the invoke. Okay? One.

1488
04:07:55.670 --> 04:08:17.830
Debobrata: Okay, that's why, like what we have used for prompt template, for creating the prompt also and chaining with the prompt with output. Parser, we have used that format similarly for retriever. If we have to use this format, we have to use the as retriever function right? Without that. The this particular chaining won't work.

1489
04:08:17.830 --> 04:08:23.740
Sunny Savita: Correct on top of the vector store. You'll have to use that as a retriever function.

1490
04:08:23.740 --> 04:08:27.230
Debobrata: This is the only option, or I have other context.

1491
04:08:27.230 --> 04:08:30.410
Sunny Savita: Only option. Obviously, we are using someone else framework. Right? If you want.

1492
04:08:30.410 --> 04:08:30.740
Debobrata: Thank you.

1493
04:08:30.740 --> 04:08:32.740
Sunny Savita: In the own way. You can create anything so.

1494
04:08:32.740 --> 04:08:52.750
Debobrata: No, you mentioned in the context right as a retriever. Are there any other way to do it? Or is it the only option retriever. And that's why you used retriever function right? As retriever function, because you have used con context as a retriever. So my question is that is there any other way also possible or.

1495
04:08:53.060 --> 04:08:57.899
Sunny Savita: No, this is the way actually to fetch the data from there. Okay, there could be another. You can explore that part. Okay.

1496
04:08:57.900 --> 04:09:02.533
Debobrata: Okay, so this is the basically the context, template kind of right?

1497
04:09:02.920 --> 04:09:10.049
Sunny Savita: Fetching. Using this retriever automatically is happening back end. While we are going to be call this invoke. Okay? Everything is being run in a sequence itself. Okay.

1498
04:09:10.050 --> 04:09:35.050
Debobrata: So that's why you are using this retriever. And then only we can use that as retriever function. Okay? And that as runnable. It just fetches on the fly right? Whatever query we are giving it, it is actually that invoke in in the invoke which that what is lama model? Right? It is actually putting that value as a runnable pass through right? So that is how that mapping is happening.

1499
04:09:35.050 --> 04:09:40.659
Sunny Savita: One thing, just check out with my Youtube channel. I created once video, Lcl, okay, you will get about all this.

1500
04:09:40.660 --> 04:09:42.090
Debobrata: What? Video? Lc.

1501
04:09:42.090 --> 04:09:49.010
Sunny Savita: Lc, EL. Okay, just search sunny Savita. Lcl, okay, you will get the complete video on top of this renewals and all, okay.

1502
04:09:49.010 --> 04:09:52.230
Debobrata: Okay, got it. Okay. Thank you. Thank you so much.

1503
04:09:53.220 --> 04:10:03.389
Sunny Savita: Okay, so Debu Bratha is done. Fine. Now, Ravi is not having any doubts is done.

1504
04:10:03.600 --> 04:10:10.450
Sunny Savita: And give me a moment, Bhaga Abhishek. Guys, please go ahead. Watch it out.

1505
04:10:10.450 --> 04:10:13.059
abhishek: Hey, Hi, sunny Abhishek! This side.

1506
04:10:13.060 --> 04:10:13.450
Sunny Savita: Publish it.

1507
04:10:13.450 --> 04:10:32.970
abhishek: Actually right. Now, we just seen a simple text. We are reading a text document, and then, based on that, we are answering the query, let's I have a Pdf which have multiple media format. It has some images, some tables, and some text. And when user is asking a query.

1508
04:10:32.970 --> 04:10:33.400
Sunny Savita: Hmm.

1509
04:10:33.400 --> 04:10:44.800
abhishek: So let's suppose in answer, it is like, it is taking some part of from text section. And then for illustration purpose, it has some images and and tables also.

1510
04:10:44.800 --> 04:10:45.310
Sunny Savita: Hmm! Oh.

1511
04:10:45.310 --> 04:10:50.329
abhishek: How can those things I can? I can retrieve means, or how can I store and retrieve.

1512
04:10:51.090 --> 04:11:00.020
Sunny Savita: So for that, sir. 1st of all, you will have to design your ingestion. Pipeline. Okay? So in that ingestion, pipeline, the 1st thing will come. That is a document passing.

1513
04:11:00.310 --> 04:11:01.040
Sunny Savita: Okay?

1514
04:11:01.040 --> 04:11:27.030
Sunny Savita: So there itself, you will have to put a lots of effort how to extract the data using which library or you need to write a code from the scratch. Right? Once you will get the data how to arrange it inside the vector database, you are able to like create this pipeline, then retriever is nothing for you. It is very simple thing, just a similarity search. And all your 90% effort will go in the data passing and the data storage got it.

1515
04:11:27.260 --> 04:11:33.153
abhishek: Okay. But what I would like to know means how this text a table, and

1516
04:11:33.500 --> 04:11:51.819
Sunny Savita: Yeah, let me tell you that while you are exiting a table, right? So either you can extend in a Json format or you can extend into the list and list format. Okay, so that Jason or list and list format, you can keep it inside your metadata. Okay? And the table generated summary right? Whatever summary you are going to be generated from the table, you can keep it inside the page content.

1517
04:11:51.820 --> 04:12:12.652
Sunny Savita: Now let's say whatever you are going to be fire any query. So it will match with that page content. Okay, with that particular summary, and it will give you the complete document. Now, from that particular document you can fetch the metadata. That would be your table. And then, further, whatever you want to do, you want to reconstruct the table. You can. Do. You want to ask any question? You can do whatever you want to do, sir. Okay.

1518
04:12:12.910 --> 04:12:22.340
abhishek: Yeah, so my, so it means from metadata. It will get context. What are the tables and images it? It can also, it need to retrieve from the database.

1519
04:12:22.560 --> 04:12:23.270
Sunny Savita: Hmm.

1520
04:12:23.570 --> 04:12:24.680
abhishek: Is it right?

1521
04:12:24.680 --> 04:12:29.050
Sunny Savita: Metadata will always automatically come, while when you will retrieve that specific document.

1522
04:12:29.050 --> 04:12:32.439
abhishek: Oh, okay. Okay. Okay. Thanks. Thanks. A lot.

1523
04:12:32.440 --> 04:12:35.780
Sunny Savita: Just do one thing just deep. Dive into my solution. This solution.

1524
04:12:35.780 --> 04:12:36.130
Sunny Savita: Okay, okay.

1525
04:12:36.130 --> 04:12:44.980
Sunny Savita: on top of it. See? I created one playlist on Multimodel Drag. Okay, once you will say, Sunny savita multimodal drag, you'll get that playlist. Just follow that one. I think.

1526
04:12:44.980 --> 04:12:53.439
abhishek: Multimodel rack will have means each, for each media type will have a separate rate. Right? And later we, we combine output.

1527
04:12:53.440 --> 04:13:17.850
Sunny Savita: Each word like data, each data model we can fetch from the documents. That's the meaning of the multimodal right. And then we can store it, how we can store in our vector database and how we can get a retrieval piper on top of it again. I'm saying retrieval and generation is very easy. Retrieval is also like when we want to achieve a more and good accuracy right in some cases. But the most difficult part is the data passing and the storing it inside a vector database

1528
04:13:17.850 --> 04:13:18.310
Sunny Savita: database.

1529
04:13:18.310 --> 04:13:21.449
Sunny Savita: If you are able to achieve that, then retriever, you can create easily.

1530
04:13:21.450 --> 04:13:28.329
abhishek: Oh, oh, oh, thanks, thanks! I will try, and if possible, if I have some issue I will. Next week I will get back to you.

1531
04:13:28.330 --> 04:13:30.560
Sunny Savita: Sure. Sure. Obviously, no, thanks.

1532
04:13:30.680 --> 04:13:34.210
Sunny Savita: Okay. Abhishek is done. Now anyone's there. Guys, please go ahead.

1533
04:13:36.430 --> 04:13:46.320
Swapnil Gosavi: So you mentioned mentioned that you can use different algorithm based on the number of rows. Right? So the number of rows is equal to the number of documents in the vector database.

1534
04:13:47.360 --> 04:13:49.189
Sunny Savita: Number of rows means sorry which one.

1535
04:13:49.190 --> 04:13:54.079
Swapnil Gosavi: Oh, said that, depending on the number of rows in the vector TV.

1536
04:13:54.080 --> 04:13:54.520
Sunny Savita: Oh!

1537
04:13:54.520 --> 04:13:55.340
Swapnil Gosavi: Oh!

1538
04:13:55.510 --> 04:13:56.720
Srinivas: Or the Count.

1539
04:13:56.850 --> 04:13:59.069
Swapnil Gosavi: Can you share the code.

1540
04:13:59.070 --> 04:14:03.280
Sunny Savita: Okay, that number of row means, how many rows are there, then, which indexing technique you have to use.

1541
04:14:03.280 --> 04:14:04.090
Swapnil Gosavi: Right, right.

1542
04:14:04.610 --> 04:14:10.239
Sunny Savita: So that's that's what I'm saying. See, whenever we have the larger number of rows right like like.

1543
04:14:10.240 --> 04:14:10.740
Swapnil Gosavi: You too.

1544
04:14:10.740 --> 04:14:23.720
Sunny Savita: One cr, 2 cr, 10 cr, right, you know, use databases or not. In that case we have to use a different indexing technique just to navigate up fast. I can give you very real time example. Let's say you have 100 people.

1545
04:14:23.720 --> 04:14:24.510
Manikanta: I will!

1546
04:14:25.060 --> 04:14:32.129
Sunny Savita: Okay, and from those peoples, from those people, you have to pick up the person with the

1547
04:14:32.250 --> 04:14:33.629
Sunny Savita: a name of Amit.

1548
04:14:33.700 --> 04:14:43.959
Sunny Savita: Okay? So what you will do. This is a 1st way. You will go through with each and every person, and you will ask their name. Okay, you are amit, you are amit. You are amit, you are amit, you are amit right.

1549
04:14:43.960 --> 04:15:07.080
Sunny Savita: or else you will take a smart approach. A smart approach means, you will say, Okay, can you? See all the people? Can you arrange yourself in a form of like the alphabetical order, or in a form of cluster? Let's say whatever person name is going to be. Start from A, you can form this cluster, be that, see that something like that. So once the people will form the cluster. You will simply go in that a cluster. Okay? And you will easily pick the amit from there.

1550
04:15:07.080 --> 04:15:18.119
Sunny Savita: Got it. So that's a way that's a way of see. Indexing is nothing. The different indexing Mason mechanism, just a way of arranging a data and to fetch out the best possible form here.

1551
04:15:18.120 --> 04:15:22.140
Swapnil Gosavi: Understand the indexing. But the Count.

1552
04:15:22.701 --> 04:15:27.139
Sunny Savita: It's a hyper parameter. I've just given you the very estimated value. Okay.

1553
04:15:27.850 --> 04:15:28.470
Manikanta: Hello!

1554
04:15:29.460 --> 04:15:30.680
Sunny Savita: Okay, stop. There.

1555
04:15:31.050 --> 04:15:31.880
Swapnil Gosavi: Oh, yeah.

1556
04:15:32.240 --> 04:15:32.840
Sunny Savita: Yes.

1557
04:15:32.840 --> 04:15:33.510
Manikanta: Hello!

1558
04:15:34.010 --> 04:15:37.659
Sunny Savita: Just a second manikanta Bhagwat. Are you there

1559
04:15:39.460 --> 04:15:44.160
Sunny Savita: coming to you? Yeah, Bhagwar, please go ahead with the doubt.

1560
04:15:44.919 --> 04:15:57.050
Bhagwat Chate: Yes, sunny. It's not a technical but little bit different. See, I have a total 5 plus years of experience and currently working as a team lead, and I am looking forward for the abroad opportunities.

1561
04:15:57.050 --> 04:15:57.440
Sunny Savita: Hmm.

1562
04:15:57.440 --> 04:16:01.050
Bhagwat Chate: So may I know. How should I prepare my portfolio for this? In.

1563
04:16:02.217 --> 04:16:05.990
Sunny Savita: Abroad opportunity to working on in client location, or Whatsapp.

1564
04:16:06.602 --> 04:16:10.970
Bhagwat Chate: No, I mean I'm looking forward to to ship to the abroad.

1565
04:16:10.970 --> 04:16:11.700
Sunny Savita: Hmm.

1566
04:16:12.280 --> 04:16:38.839
Sunny Savita: so abroad, wiser. See? You can like, go for the Ms, right? You can do the distance. Ms, okay? Or else basically, you can go to any client location. Right? You can find out some company where basically, they are placing to you directly on some different location apart from the India, there are several ways of it. Let's say, if you have 5 year of experience, if you are going to write an exam for completing your Ms. And all again. It will take 3 year.

1567
04:16:39.070 --> 04:16:56.849
Sunny Savita: Right? So once you will clear the exam, you'll go to the abroad, or maybe not like, via any exam direct. You are taking admission in some universities, right? Private university, or any other one. Okay? So that procedure is going to be a little longer means you will have to be. Wait for 2 to 3, and next right

1568
04:16:57.020 --> 04:17:23.800
Sunny Savita: after that. After completing your Ms. Or whatever respective degrees. There, then you will find out a job in a similar way you are doing over here getting my point. So that's the one way. The second way, if you're working in any company, you can be placed yourself for the for the client location, you can figure out that opportunity so you could be there for the longer period of time for the 2 year 5 year, 10 year, and then there itself. You can find out a job once you will place yourself, you know, abroad, right?

1569
04:17:24.100 --> 04:17:38.210
Sunny Savita: Based on the client itself. Okay? So there are multiple ways. You need to decide. With which route you need to go through right? And how you are going to be placed wherever right you are thinking to go us Uk, or wherever got it.

1570
04:17:39.139 --> 04:18:01.530
Bhagwat Chate: Yes, I got your point, but see, the the thing is that I'm working in AI product based company. And I don't see any opportunities over there, you know, at least up for next one or 2 years. So what I thinking that from India itself look for the opportunities which are available abroad, or specifically for the German, Us. And

1571
04:18:01.930 --> 04:18:11.740
Bhagwat Chate: I'm sorry. For the Europe Australia line. So what kind of portfolio that should I have in place so that I'll get a more opportunity. That is my main question.

1572
04:18:13.851 --> 04:18:17.459
Sunny Savita: Portfolio. Wise, sir. Seed

1573
04:18:17.830 --> 04:18:23.749
Sunny Savita: they are calling you over the location or not. Right? It depends on the those companies itself.

1574
04:18:23.870 --> 04:18:47.909
Sunny Savita: Portfolio. Wise. if you are preparing for an exam, right? So there they ask you the portfolio on the the project which you are doing, the work you are doing in your company, you can mention that same itself. Nothing is like different. Okay there as well. So whatever experience or whatever work you have done regarding AI development whatever you can put the same as it is.

1575
04:18:47.990 --> 04:19:12.240
Sunny Savita: Okay? So yeah, actually. But you will have to more research on top of that part, see directly how we can apply and see we can get a remote work. And I'm also working with the Us. Client right? And my couple of friend like they are. working on on site. Right? They are onto the like client location from like last 6 months. One year, right? And

1576
04:19:12.540 --> 04:19:22.779
Sunny Savita: I haven't seen like they are mentioning any special thing in that resume, and all apart from their regular work and the project whatever, in whatever domain they are. Okay. So

1577
04:19:23.450 --> 04:19:27.730
Sunny Savita: one way, go through with the like, the the academic procedure.

1578
04:19:27.830 --> 04:19:53.750
Sunny Savita: Okay, you will. Yeah, you will. You will have to create your own portfolio in that case, and the project, and all everything you can mention in the same way. The second thing if you are placing yourself in a client location. I think that is not required. Any specific portfolio just required little networking over there. Okay, networking in the sense you need to be like good connection with your manager, whoever whoever is taking care of this type of project, or your up like the director, right.

1579
04:19:53.750 --> 04:20:08.889
Sunny Savita: or whoever is like onto you right. So if they are having those project in the connection, right? So for sure you can talk with them, and you can place yourself here. Got it, and once, after going over there, you can look into the more opportunity that that's my understanding regarding it.

1580
04:20:08.890 --> 04:20:11.210
Bhagwat Chate: Okay, yeah, that's helpful.

1581
04:20:11.800 --> 04:20:23.629
Bhagwat Chate: Yes. So one more thing. Yes, I learned a lot from you. And Chris, sir, I'm there. Since 2020, I mean 22. I'm learning from both of you. Thank you.

1582
04:20:24.300 --> 04:20:25.570
Sunny Savita: Thank you. Thank you, sir.

1583
04:20:25.860 --> 04:20:26.960
Manikanta: Hello!

1584
04:20:26.960 --> 04:20:28.090
TANMOY PAL: Hey! Hi! Sunny!

1585
04:20:28.490 --> 04:20:30.032
Sunny Savita: Yeah, you not done right?

1586
04:20:31.150 --> 04:20:31.920
Manikanta: Okay.

1587
04:20:31.920 --> 04:20:33.350
TANMOY PAL: Thank you.

1588
04:20:33.350 --> 04:20:34.860
Manikanta: I mean, Hello!

1589
04:20:35.400 --> 04:20:40.730
Sunny Savita: It's done now, just a second guys than me. Yeah. Please go ahead.

1590
04:20:41.800 --> 04:20:42.640
Manikanta: Hey!

1591
04:20:42.640 --> 04:20:45.939
TANMOY PAL: Can you? I can share. I need to share my screen. Can I?

1592
04:20:45.940 --> 04:20:48.599
Sunny Savita: Okay, I am just adding you to Panelist. You can share them. Okay.

1593
04:20:49.090 --> 04:20:49.620
TANMOY PAL: Okay.

1594
04:20:49.620 --> 04:20:51.340
Sunny Savita: Yeah. Mani ganta, was it? Down?

1595
04:20:52.294 --> 04:21:08.010
Manikanta: Hi, Sunny! The session was very good. Have a question here in the relation databases. Also we can search the words. And if you, if you can see in the vector dB, also based on the words only it is searching.

1596
04:21:08.150 --> 04:21:16.929
Manikanta: My question is, why do we have to go with the vector dB, even, we can achieve that same such functionality in the relational databases also.

1597
04:21:17.940 --> 04:21:19.559
Sunny Savita: Which relational database.

1598
04:21:19.590 --> 04:21:24.750
Manikanta: If you can see my SQL. Or pushgres, SQL. Also, we can use.

1599
04:21:24.750 --> 04:21:32.229
Sunny Savita: They are giving you the specific functionality for creating a vector indexes. If you will look into the postgre and all with the

1600
04:21:32.380 --> 04:21:37.399
Sunny Savita: the tabular schema, the rigid schema. You cannot perform this operation in any of the database.

1601
04:21:37.560 --> 04:21:38.410
Sunny Savita: Got it.

1602
04:21:38.600 --> 04:21:49.940
Manikanta: And another question in the code you used. In the rag model used format docs. Right? Can you little bit explain about that format, Doc?

1603
04:21:49.940 --> 04:22:00.859
Sunny Savita: Yeah. So format docs, what it is doing. It is reiterating on each and every document, whichever you are fetching from the vector database. Okay? And from the document, it is like, fetching the page content.

1604
04:22:01.370 --> 04:22:08.759
Sunny Savita: Okay, page, content is what it's a raw string data, the data itself. And that data we are passing to the Llm. Model. Got it.

1605
04:22:09.330 --> 04:22:11.449
Manikanta: Okay. As a context, we are passing to the.

1606
04:22:12.176 --> 04:22:13.629
Sunny Savita: Correct. Okay.

1607
04:22:14.880 --> 04:22:15.740
Vij ay: Yeah, thank you.

1608
04:22:15.740 --> 04:22:17.330
Vij ay: Question is about, can you understand?

1609
04:22:17.330 --> 04:22:18.430
Vij ay: Same document rating.

1610
04:22:18.430 --> 04:22:20.330
Sunny Savita: Than me. Yeah, please.

1611
04:22:20.840 --> 04:22:28.049
TANMOY PAL: Yeah, sunny. Actually, I modified your code. Not. Just assess a bit to to

1612
04:22:28.522 --> 04:22:31.129
TANMOY PAL: like, get from the grok Api. Okay.

1613
04:22:31.830 --> 04:22:38.330
TANMOY PAL: So 2 things I'm getting one is just trying to.

1614
04:22:38.560 --> 04:22:44.280
TANMOY PAL: I think this is the commenting like, this is not not any any kind of syntax right? I think so. Right.

1615
04:22:45.830 --> 04:22:50.209
Sunny Savita: Context retriever from? No, this is not a syntax. This is just a information.

1616
04:22:50.210 --> 04:22:50.790
TANMOY PAL: Yes, yes.

1617
04:22:50.790 --> 04:22:51.670
Sunny Savita: One, issue, yeah.

1618
04:22:51.670 --> 04:22:58.299
TANMOY PAL: Okay? And this one, I'm getting like it is not defined. Do I need to import any library for this.

1619
04:22:58.300 --> 04:23:00.220
Sunny Savita: Import. No import. Preprint one.

1620
04:23:00.850 --> 04:23:01.730
Sunny Savita: Run it.

1621
04:23:01.880 --> 04:23:04.439
TANMOY PAL: This is, but there is not that much required right?

1622
04:23:04.990 --> 04:23:08.430
TANMOY PAL: So I missed this like, what is the this event?

1623
04:23:08.940 --> 04:23:16.260
Sunny Savita: No, this is just to check the data on over the console in a very pretty format. Pretty print. Right? That's it.

1624
04:23:17.550 --> 04:23:18.969
TANMOY PAL: Okay, got it, got it, got it.

1625
04:23:18.970 --> 04:23:19.810
Sunny Savita: It is not.

1626
04:23:19.810 --> 04:23:25.510
TANMOY PAL: Just a minute. Let me then it will be required. Actually.

1627
04:23:28.880 --> 04:23:32.520
Sunny Savita: Run it. Now run! Run this line, line number 57, and all run that.

1628
04:23:32.890 --> 04:23:34.349
TANMOY PAL: Okay, okay, just a minute.

1629
04:23:45.250 --> 04:23:47.480
Srinivas: Sunny. Meanwhile you can go ahead with my question.

1630
04:23:47.950 --> 04:23:49.740
Sunny Savita: Yeah, she knows coming. Just a sec.

1631
04:23:52.100 --> 04:23:56.930
TANMOY PAL: Yeah, okay. So here, what I have done like.

1632
04:23:59.850 --> 04:24:03.810
TANMOY PAL: I uploaded my Pdf, then I tried to get the details.

1633
04:24:03.970 --> 04:24:09.299
TANMOY PAL: But here I'm not getting like, is it? Is it? Is it got or not?

1634
04:24:10.200 --> 04:24:16.060
TANMOY PAL: Something it got. But how? I can check the accuracy of that particular answer which he got.

1635
04:24:16.660 --> 04:24:30.649
Sunny Savita: So that is a different case. Okay, for that. Actually, you will have to write a ground truth and all you will have to like, write evaluation matrixes. If you are interested for the evaluation matrixes and all follow the framework. Raga's framework. Okay, there you will get it.

1636
04:24:30.770 --> 04:24:34.850
Sunny Savita: Pardon, you know. Yeah, RAGA.

1637
04:24:35.870 --> 04:24:36.790
TANMOY PAL: This time.

1638
04:24:38.000 --> 04:24:39.239
TANMOY PAL: Will you talk? There.

1639
04:24:40.386 --> 04:24:44.303
Sunny Savita: I can show you in the upcoming project. And all, okay,

1640
04:24:44.770 --> 04:24:50.130
Sunny Savita: we can discuss that. It is just like a 5 to 6 line of code only which we have to integrate here. That's it.

1641
04:24:51.080 --> 04:24:58.430
TANMOY PAL: Okay. But like this is the Pdf, so if I if I do this P. Print, it will be something like that. It will show in a good manner, right.

1642
04:24:58.730 --> 04:24:59.189
Sunny Savita: No, there's.

1643
04:24:59.190 --> 04:25:01.120
TANMOY PAL: So in go after you go.

1644
04:25:01.360 --> 04:25:02.339
TANMOY PAL: Got it? Okay?

1645
04:25:09.410 --> 04:25:14.569
Vij ay: Hey? My question is more of audio and video stuff and image stuff.

1646
04:25:14.850 --> 04:25:18.260
Vij ay: After reading, can I able to drink.

1647
04:25:18.260 --> 04:25:20.859
Sunny Savita: To use universe. Can you go ahead now? Yeah.

1648
04:25:20.860 --> 04:25:32.419
Srinivas: Yeah, Sammy. So in my nation I'm doing a kind of capstone project based on flow wise. So they have some commercial with flow wise. So I need to choose that only so

1649
04:25:32.910 --> 04:25:56.349
Srinivas: there is a capstone project like vehicle configuration. So we need to use Llms and Car Api, so user will input his car preferences. So I need to extract the vehicle information from that input and get his, the get him. The preferred cars based on his preference and dealers information.

1650
04:25:56.350 --> 04:26:06.189
Srinivas: So I'm thinking, kind of idea. Please improvise like first, st an Llm. Node which takes the input and extracts the parameters like the type of

1651
04:26:06.220 --> 04:26:12.240
Srinivas: car. Or suppose he has a preference is a fuel type budget. Then

1652
04:26:12.310 --> 04:26:27.130
Srinivas: use the Llm. To get the parameters for a car Api and get the available models based on the models. Call the dealer Api, and get the dealers or vendors. For how is looks like this?

1653
04:26:27.580 --> 04:26:28.730
Srinivas: How this looks like.

1654
04:26:29.920 --> 04:26:32.329
Sunny Savita: No. So what you want to do over here.

1655
04:26:33.310 --> 04:26:46.629
Srinivas: So user will give his input. It's kind of a chatbot application where he puts like, I want a petrol vehicle in $30,000 something like so Rn. Suv, he, he will

1656
04:26:46.810 --> 04:26:58.400
Srinivas: put his preferences so based on that. I need to give him some 10 to 15 models. Once he chose a model, I need to give him the dealers and vendors to that model in his area.

1657
04:26:58.880 --> 04:26:59.530
Sunny Savita: Hmm.

1658
04:26:59.720 --> 04:27:06.930
Sunny Savita: okay? So you want to provide a natural query. Let's say I'm looking for an automatic petrol. Suv, or something like that. Right?

1659
04:27:06.930 --> 04:27:07.550
Sunny Savita: Yeah.

1660
04:27:07.550 --> 04:27:19.960
Sunny Savita: So then you will pass that particular like the query to the Llm. Right Llm. Should extract the parameter from there. Let's say, what is the budget, fuel type, car type and all.

1661
04:27:20.080 --> 04:27:27.430
Sunny Savita: Okay? And then, based on that, like the you should fetch, you have to fetch. Answer, correct. It's your.

1662
04:27:28.360 --> 04:27:36.100
Srinivas: And call the Apis basically car A, there is a car Api. There is a dealer Api, which gives the it output of based on the.

1663
04:27:36.100 --> 04:27:37.840
Sunny Savita: So what you can do. Now see.

1664
04:27:38.200 --> 04:27:42.980
Sunny Savita: there is a way of agentic flow for for this one. Actually, you can create a proper agentic flow.

1665
04:27:43.140 --> 04:27:46.439
Srinivas: Okay? First, st you can convert a query into the structure. Output.

1666
04:27:47.010 --> 04:28:05.889
Sunny Savita: Okay, using the Llm itself. Let's say someone has. Someone is writing on your portal. I'm looking for an automatic Diesel petrol suv under 15 lakh, with a good mileage, something like this. Okay? So you can take a budget. You can take a fuel type. Let's say you can take a transmission.

1667
04:28:06.120 --> 04:28:10.099
Sunny Savita: And I'm this automatic or something car type priority.

1668
04:28:10.100 --> 04:28:12.999
Srinivas: I can use the Llm. Node to get these parameters right.

1669
04:28:13.000 --> 04:28:20.570
Sunny Savita: Yeah, you can do that. Even. You can configure that structure output also from any of the framework from lang graph. Or you can.

1670
04:28:20.570 --> 04:28:21.069
Srinivas: I need the.

1671
04:28:21.070 --> 04:28:21.430
Sunny Savita: No.

1672
04:28:21.430 --> 04:28:25.669
Srinivas: Low, wise a local platform where I can have all types of Llm.

1673
04:28:25.670 --> 04:28:54.479
Sunny Savita: Oh, that that is fine, sir. You got the idea right how to extract this parameter, and all right. You can do your own research. Now, after doing that, okay, you can use this particular inputs, you can pass it to your function to the tool. Okay? And based on that you can fetch the detail from any sort of Api. Okay, so you can make a request to that Api with this particular parameter. Once you will get a detail again, you can give it to back to the Llm. And behalf on that particular information, Llm. And the prompt itself. Llm. Will generate answer.

1674
04:28:54.480 --> 04:29:14.430
Sunny Savita: So you have to do 2 thing over here. First, st you have to use the structure output. Okay, the second, basically, you have to use the tool. Okay. And the tool basically is going to be, use the parameter which is being generated by the structure output. And then the next node basically is for fetching the detail and converting into the natural answer, okay.

1675
04:29:14.430 --> 04:29:17.330
Sunny Savita: okay, so so easily, you can create a agentic flow for it.

1676
04:29:17.660 --> 04:29:36.889
Srinivas: Okay, on top of this there is a small requirement that I need to save his favorites. So let's say, he's taking 2 to 3 cards as his favorite, and whenever he comes back I need to show him like. So what kind of memory I need to use in the flow, wise agentic flow

1677
04:29:37.310 --> 04:29:39.770
Srinivas: to maintain the sessions, the.

1678
04:29:40.580 --> 04:29:49.380
Sunny Savita: Fabric. Wise means, whatever users favorite thing is there right later on. Sorry I didn't get the flow for the fabric.

1679
04:29:51.027 --> 04:30:07.542
Srinivas: No, this part, I'm clear. So whenever he gives the input I can give him the dealers or cars. But so there is option we need to give an option to the user to favorite some of his vehicles. So whenever he comes back

1680
04:30:07.910 --> 04:30:14.919
Sunny Savita: Okay, just to keep in their cart, or like in a favorite oh, so that that's also application level thing.

1681
04:30:15.740 --> 04:30:16.160
Sunny Savita: Y'all.

1682
04:30:16.160 --> 04:30:17.985
Srinivas: Is there any way I can

1683
04:30:18.760 --> 04:30:22.800
Srinivas: have that in the this agentic flow, instead of using separate memory or.

1684
04:30:22.800 --> 04:30:51.839
Sunny Savita: You can create a specific tool for keeping the favorite and all, and then, whenever it's required, you can fetch it along with it. So do one thing, just explore the link graph. There, you can create a multiple parallel workflow. Okay, so let's say, user is like fetching a car detail and all. And if it, you can take a human input over there, whether you want to keep it inside the favorite or not. Okay, based on that human input, you can keep it over there. That's it. Okay? So this kind of flow is possible. You can create that.

1685
04:30:51.840 --> 04:30:58.680
Srinivas: Yeah. So flow is we'll expose Apis. So can I quickly create application streamlet and call that Aps right? Just.

1686
04:30:58.680 --> 04:31:00.009
Sunny Savita: Yeah, yeah, yeah, yeah, you can.

1687
04:31:00.010 --> 04:31:01.629
Srinivas: 2, week, poc, basically.

1688
04:31:01.630 --> 04:31:02.390
Sunny Savita: Got it.

1689
04:31:02.820 --> 04:31:03.669
Srinivas: Yeah, thank, you.

1690
04:31:05.280 --> 04:31:21.169
Vij ay: Yes, my question is more of a security part of it. How? How can I restrict A security based on the user that that they are logging in trying to fix the data. That is one thing. Is it possible that I can do some such inside the

1691
04:31:21.270 --> 04:31:26.349
Vij ay: a Pdf, or an audio, or video or image to a specific string or text.

1692
04:31:26.460 --> 04:31:28.890
Vij ay: or a or an audio related stuff.

1693
04:31:29.950 --> 04:31:31.260
Sunny Savita: Can you be little louder.

1694
04:31:31.920 --> 04:31:32.520
Vij ay: Yeah.

1695
04:31:33.180 --> 04:31:46.199
Vij ay: the more the question is, more of a security side of it. Whenever there is a user, let's say super admin, or a or a user or a admin? Can I segregate the the fetching of data.

1696
04:31:48.900 --> 04:31:50.820
Sunny Savita: Fetching of data from the vector database.

1697
04:31:50.820 --> 04:31:52.019
Vij ay: Yeah, yeah, correct.

1698
04:31:53.020 --> 04:31:59.450
Sunny Savita: Yeah, you can create that routing Rbex and all. It's all about this

1699
04:32:00.110 --> 04:32:02.470
Sunny Savita: the policies, creation and all. That's it.

1700
04:32:02.580 --> 04:32:03.100
Sunny Savita: Okay.

1701
04:32:03.100 --> 04:32:07.400
Vij ay: Yeah, we have. We have certain stuff in all the Dbs, right?

1702
04:32:07.400 --> 04:32:30.279
Sunny Savita: Yeah, put the security wise. Now, what you can do, you can do the role role based segregation. So that is called, okay, okay, role based access control. And that comes under this admin super admin user admin user and user, right, you can define the role and based on that particular role. You can give that specific access to someone. Okay.

1703
04:32:30.570 --> 04:32:36.670
Vij ay: And one more thing I got a demonstration from what's the next team to install some agent gate stuff

1704
04:32:37.083 --> 04:32:54.289
Vij ay: so then we can do the All kind of orchestration and do all kind of workflow automation stuff like that. They showed a demo. But the cost I I haven't involved in that. But the thing is like, can we build a similar kind of thing in a smaller in a, in a less memory, to my, to our own personal PC.

1705
04:32:57.547 --> 04:33:02.810
Sunny Savita: I think. Yes, sir, you can do it. So you are saying, can we replicate the same thing?

1706
04:33:02.810 --> 04:33:05.720
Vij ay: Not the whole thing, but but at least some part of it.

1707
04:33:07.070 --> 04:33:11.430
Sunny Savita: Yeah, you can build a light lightweight alternative. Okay, so

1708
04:33:11.570 --> 04:33:19.129
Sunny Savita: yeah, but you, you'll have to do it first, st how you can pre assume that part. Okay, so

1709
04:33:19.480 --> 04:33:21.360
Sunny Savita: yeah, do it. Then, okay.

1710
04:33:21.369 --> 04:33:21.899
Vij ay: Yeah.

1711
04:33:23.559 --> 04:33:24.509
Vij ay: Alright. Thank you.

1712
04:33:24.779 --> 04:33:26.989
Sunny Savita: Okay, Vijay is done now.

1713
04:33:28.029 --> 04:33:32.709
Sunny Savita: Hassan, Hassan is there? Hassan? Please go ahead with the doubt, Hassan Hassan. Anyone's there.

1714
04:33:33.009 --> 04:33:33.919
Harshal Nikunj Shah: Hi, Sunny.

1715
04:33:34.069 --> 04:33:34.699
Hassan: Sunny.

1716
04:33:35.140 --> 04:33:37.289
Sunny Savita: Just a second. Yeah, Hassan, please go ahead.

1717
04:33:37.540 --> 04:33:39.290
Hassan: I want to share my screen. Please.

1718
04:33:40.430 --> 04:33:47.230
Sunny Savita: Okay, just a second. I'm adding in a panelist, yes, Harsha, please go ahead.

1719
04:33:50.349 --> 04:34:17.162
Harshal Nikunj Shah: Hi, Sally, yeah, my question is, actually, I'm just trying to understand the the vector, database actually, the the way in which the indexing and the this, the semantic, the similarity search is taking place. So I just wanted some clarity and and like in apart from flat indexing. If we are using any other type of indexing. Is this like, how how does it? How does it

1720
04:34:18.229 --> 04:34:29.559
Harshal Nikunj Shah: work like, you know, on a high level like if it does it so. Obviously, the reason why we are indexing is not to, so that we don't have to perform similarity search on all the embedding vectors right?

1721
04:34:30.739 --> 04:34:31.569
Harshal Nikunj Shah: But

1722
04:34:32.392 --> 04:34:48.469
Harshal Nikunj Shah: in case of those other Ivf and other indexing methods. How is is are we performing similarity search on indexes as well? Or are are we just like using indexes to just

1723
04:34:49.659 --> 04:34:53.699
Harshal Nikunj Shah: get a group of embedding vectors and perform similarity? Search on them.

1724
04:34:53.700 --> 04:34:58.080
Sunny Savita: Correct, correct. It is going like this in a back end. Only you are understanding.

1725
04:34:58.080 --> 04:35:06.860
Harshal Nikunj Shah: How, but how? How does it? How does it know? Simply by the query, embeddings, how does it know? Okay, I'm supposed to get

1726
04:35:07.590 --> 04:35:08.919
Harshal Nikunj Shah: X number of

1727
04:35:09.320 --> 04:35:19.149
Harshal Nikunj Shah: embedding vectors and perform similar. I mean, there should be some similarity search search happening on the indexes as well. Right? Otherwise how will I know if

1728
04:35:19.990 --> 04:35:27.390
Harshal Nikunj Shah: which embedding vector should I? Draw from from my vector store? So like, that's my question.

1729
04:35:29.259 --> 04:35:30.979
Sunny Savita: Sorry I didn't get that.

1730
04:35:30.980 --> 04:35:39.119
Harshal Nikunj Shah: So my question is, if we are drawing handful of embedding vectors right? Instead of so, how do we decide?

1731
04:35:39.230 --> 04:35:43.470
Harshal Nikunj Shah: How do we decide, based on indexes. That I have to draw.

1732
04:35:43.689 --> 04:35:50.319
Harshal Nikunj Shah: Let's plot 9, 15, embedding embedding vectors from the vector store and perform similarity search on them

1733
04:35:50.490 --> 04:35:53.490
Harshal Nikunj Shah: instead of performing similarity, search on all 100.

1734
04:35:53.980 --> 04:35:57.080
Sunny Savita: Let's just perform similarity. Search on thing. What?

1735
04:35:57.080 --> 04:36:12.389
Sunny Savita: 1, st first, st we are creating that index. Right? I shown you flat. L, 2. Index. Hnsw index. Okay. So I created a flat flat index. Now, in a similar way, you can create the Hnsw index. Ibf index.

1736
04:36:12.759 --> 04:36:25.929
Sunny Savita: Okay. So once you will create an index using those function automatically. That back end program will trigger like for the segregation and for whatever mathematical mechanism is like need to be performed over there automatically. It will be taking care of that.

1737
04:36:25.930 --> 04:36:28.379
Harshal Nikunj Shah: Is that a black box, or is

1738
04:36:28.730 --> 04:36:43.879
Sunny Savita: Black box. If you want to export that, you can do that. Okay. But whatever functionality we are seeing over here in terms of this link chain. And all right, that's the abstract one means we are just going to be. Use the high level function. Let me show you. See you created. Can you see my screen.

1739
04:36:44.740 --> 04:36:45.430
Harshal Nikunj Shah: Yeah.

1740
04:36:45.430 --> 04:36:49.620
Sunny Savita: Okay. So here, tell me when we have created an index. Right?

1741
04:36:50.020 --> 04:36:52.669
Sunny Savita: So we have catered index using this method.

1742
04:36:53.790 --> 04:36:54.540
Harshal Nikunj Shah: Right.

1743
04:36:54.540 --> 04:36:57.979
Sunny Savita: Right. Is this the only method? No, let me show you the other one also.

1744
04:36:58.369 --> 04:37:00.509
Sunny Savita: So if I take the spice.

1745
04:37:01.130 --> 04:37:09.599
Sunny Savita: okay, if I'll press dot over here right? So once I'll press Dot, and maybe tab dot something like this.

1746
04:37:09.710 --> 04:37:13.170
Sunny Savita: it will give you the list of all the functions, whatever it is having.

1747
04:37:13.520 --> 04:37:16.090
Sunny Savita: So it's not coming. Just a second

1748
04:37:28.610 --> 04:37:29.660
Sunny Savita: voice.

1749
04:37:31.759 --> 04:37:34.580
Sunny Savita: FAIS, S. Dot.

1750
04:37:38.770 --> 04:37:43.059
Sunny Savita: Okay, let's do one thing. Let's look into the documentation. Okay.

1751
04:37:46.000 --> 04:37:49.839
Sunny Savita: So here, I'm going to open the document twice.

1752
04:37:51.029 --> 04:37:53.319
Sunny Savita: Dot use meantish.

1753
04:38:04.550 --> 04:38:09.299
Sunny Savita: Okay, so let's say, here, I want to check the list.

1754
04:38:09.900 --> 04:38:13.509
Sunny Savita: I'll get that welcome. Welcome.

1755
04:38:15.060 --> 04:38:17.930
Sunny Savita: Google, address

1756
04:38:22.720 --> 04:38:28.650
Sunny Savita: closer, flat. L, 2 C. Here you can see now the this one.

1757
04:38:29.029 --> 04:38:38.559
Sunny Savita: like we have created a flat. IP index. Okay, only flat index. Likewise, we can create Ibf index, Hnsw. Index all the index. Likewise we can create.

1758
04:38:38.849 --> 04:38:44.300
Sunny Savita: Okay, you can deep dive into this one. You will get all the classes, name and all everything

1759
04:38:44.590 --> 04:38:45.300
Sunny Savita: over here.

1760
04:38:45.300 --> 04:38:54.500
Harshal Nikunj Shah: Okay. So the criteria for searching through the index and finding the relevant embedding vectors will depend on which type of.

1761
04:38:54.830 --> 04:39:03.070
Sunny Savita: Class, which type of index we are going to be created using this classes. Okay? And behind every classes there is a respective like, logic. Okay.

1762
04:39:03.070 --> 04:39:15.740
Harshal Nikunj Shah: Okay, could you? Could you? Is it? Would it be possible for you to have us have a dedicate? Some some part of the lecture anytime to to just do little bit of deep dive into this type of.

1763
04:39:15.740 --> 04:39:24.449
Sunny Savita: You can do from here itself. Now see all the things they have given you. Okay, in a very proper format. Just need to be. Check it out over here. That's it.

1764
04:39:24.750 --> 04:39:34.800
Sunny Savita: Okay, the classes and all. Or else you can check out the Linkedin Dot or like the documentation itself. Okay, some sort of understanding they have given over there as well. Okay.

1765
04:39:36.939 --> 04:39:37.870
Sunny Savita: noted.

1766
04:39:37.870 --> 04:39:39.069
Harshal Nikunj Shah: Okay, thank you. Sunny.

1767
04:39:39.070 --> 04:39:39.790
Sunny Savita: Yeah.

1768
04:39:42.815 --> 04:39:48.070
Sunny Savita: Okay. So Asan, now, you can share your screen.

1769
04:39:48.825 --> 04:39:51.350
Hassan: I'm sharing my screen. Can you see it?

1770
04:39:51.350 --> 04:39:52.409
Sunny Savita: Yeah, I can see that.

1771
04:39:52.990 --> 04:40:11.289
Hassan: Okay. So my my question here is like, I'm I'm working on a use case. It's it's on azure stack. So the the question I have is like inside the azure AI search. They are like multiple indexes created based on the different policies.

1772
04:40:11.290 --> 04:40:25.669
Hassan: So and the user will will have access to maybe one index or more than one index. So the requirement is that if it it has, the user has more access to more than one indexes.

1773
04:40:25.670 --> 04:40:34.699
Hassan: Then how would we design the orchestra to to get the retrieval part from the multiple indexes.

1774
04:40:34.720 --> 04:40:41.610
Hassan: so that the augmentation part, when when a prompt is created, it can be feed to the Llm.

1775
04:40:42.360 --> 04:40:48.220
Sunny Savita: The right index name. Now, Hr. Policy, legal policy create an index with this specific name. That's it.

1776
04:40:49.530 --> 04:40:51.975
Hassan: So that's like,

1777
04:40:53.490 --> 04:41:00.639
Hassan: So so that will be hard. Query like, isn't isn't there like any way to make it more dynamic?

1778
04:41:01.340 --> 04:41:08.739
Sunny Savita: Dynamic, wise. See how I can do that as a developer. Right? You got a requirement. You have to create these many indexes, yes or no.

1779
04:41:09.070 --> 04:41:09.760
Hassan: Yep.

1780
04:41:09.760 --> 04:41:18.120
Sunny Savita: Right. So in a code, whatever classes and the function you are going to be defined right? So anyhow, you will have to pass the name of those indexes

1781
04:41:18.370 --> 04:41:22.029
Sunny Savita: while you are going to be create using any vector databases.

1782
04:41:22.070 --> 04:41:30.590
Sunny Savita: Okay, so requirement, you got, you have the name and all. Now, how to design that code, the logic and all that that you can think right?

1783
04:41:30.590 --> 04:41:54.799
Sunny Savita: So there is no hard code or the that, like dynamic. And all. Okay, if you got like the requirement of creating a 5 indexes, you will have to create that. Okay, so user don't know about it. You will have to segregate, based on the user, query and all whenever it will come. So based on some filtering criteria and all, or you will have to route on which index that this query will go for the vector retrieval and all. Okay, that part also you will have to do.

1784
04:41:56.300 --> 04:42:04.740
Hassan: Okay. And and this is not a requirement for multimodal or or agentic architecture.

1785
04:42:04.930 --> 04:42:34.770
Sunny Savita: Agentic architecture you can create. Agentic is what like. You can keep this functionality in any of the node right? And you can invoke that complete flow, and wherever like this node will be invoked, this functionality will be executing. That's it. Okay? So first, st I would suggest, you create some solution on top of it. Okay, create at least 3 indexes and try to segregate that based on your query whenever the query will come which index needs to be hit, at least create this much of functionality, then we can work it on further, got it.

1786
04:42:35.110 --> 04:42:37.759
Hassan: Okay. Okay. Thank you, sonny. Thank you.

1787
04:42:40.440 --> 04:42:42.110
Sreevani Maddela: Yes.

1788
04:42:42.370 --> 04:42:46.350
Sunny Savita: So just a second, I think Hassan is done. Now

1789
04:42:46.450 --> 04:42:51.940
Sunny Savita: let me unmute to someone else, yeah, Vignes, or yeah, Vignes, or what's the doubt? Please go ahead.

1790
04:42:52.420 --> 04:43:02.080
Vigneswara Rao: Yeah. Hi, Sunny, thank you for excellent presentation scale. Okay, actually, I totally knew the.

1791
04:43:02.310 --> 04:43:09.380
Vigneswara Rao: maybe these all guys are experts who are asking. Maybe my one is a generic questions. Only 2 questions.

1792
04:43:09.380 --> 04:43:10.070
Sunny Savita: Hmm.

1793
04:43:10.070 --> 04:43:21.440
Vigneswara Rao: The 1st question is, I understand. Well, to be honest, I understanding all the your code. I'm digesting now because I'm also coding background from sap. In last 20 years.

1794
04:43:21.440 --> 04:43:22.020
Sunny Savita: Hmm.

1795
04:43:22.420 --> 04:43:41.119
Vigneswara Rao: But I am understanding all the concept coding concept. 1 1st question is, currently you are doing embedding, so can we do, embedded so like a generally embedded. And can you use Llm. Open? Chatgpt can use it. Cross. Can can be used that way.

1796
04:43:42.680 --> 04:43:56.779
Sunny Savita: Yes, you can use that different embeddings right as of now, we just shown you with the 2 to 3 embedding model. Okay? But from wherever like you're able to configure the embedding model, feel free to do that.

1797
04:43:57.460 --> 04:44:02.719
Vigneswara Rao: Oh, it's a is a stand, is a standalone. It's not depend on the Llm retrieval model.

1798
04:44:02.880 --> 04:44:04.089
Vigneswara Rao: Not depend on that.

1799
04:44:04.090 --> 04:44:04.710
Sunny Savita: Let's say.

1800
04:44:05.220 --> 04:44:09.540
Sunny Savita: take a embedding model from the open. AI, the Llm. Model you can take from the German. AI. That's fine.

1801
04:44:10.160 --> 04:44:29.360
Vigneswara Rao: Thank you. Thank you. And one more question, most of videos, I'm following your videos. And this one something is generating a rag. Vector Deb is not sophisticated answers not given. They say graph knowledge, light like rag. All will cover this course. Anyway.

1802
04:44:30.130 --> 04:44:35.700
Sunny Savita: No, this course is not oriented to the rag one. Okay, it's more towards the agent.

1803
04:44:36.590 --> 04:44:50.949
Sunny Savita: So rag different type of rag. Okay, I think we are not going to cover here. We just shown you the basic Reg pipeline. So that later on we can create an agentic rag. Okay? Using this agent and agentic flow, and all.

1804
04:44:52.910 --> 04:45:05.959
Vigneswara Rao: The final question. Currently, we have, I'm working on the analytics part. So actually, our our sap, they have some domain. You type, the some portion. It's automatically generated the charts and everything

1805
04:45:06.080 --> 04:45:26.599
Vigneswara Rao: based on the existing relational database. So for the relational data, okay, for example, I have a relational database table here got all the all the information of the salary something I want to generate a chart. Do I need to do relational database?

1806
04:45:28.140 --> 04:45:38.350
Sunny Savita: Yeah, in some, some relational database. Now, now, basically, you can create a this index. Also. Okay, that support those support the vector indexes.

1807
04:45:38.390 --> 04:46:01.239
Sunny Savita: So I worked with the Mongodb data stack only. And I little bit work on the postgre and all. But whatever database you have, you can configure the vector index also over there. If not, it is not possible. Then for the vector indexes. You can define the separate pipeline means you can think like we have got. Fetch the data from the Pdf, okay, in a similar way, you can fetch the data from your databases.

1808
04:46:01.270 --> 04:46:12.440
Sunny Savita: and then you can do the embedding and all rest of the data. You can keep it as a metadata and the specific column, the text column or something. You can keep it as a embedding. Okay? And then you can store in Central vector, database.

1809
04:46:12.510 --> 04:46:13.320
Sunny Savita: Got it.

1810
04:46:13.730 --> 04:46:15.960
Vigneswara Rao: Thank you. Thank you. Thanks for allowing.

1811
04:46:15.960 --> 04:46:18.610
srihari Vanga: If you share the screen I'll share.

1812
04:46:18.610 --> 04:46:21.280
Sunny Savita: Okay, Vignes. Shaw is done now, Sriha.

1813
04:46:21.280 --> 04:46:21.830
satya bonagiri: My screen.

1814
04:46:22.745 --> 04:46:23.660
Sunny Savita: Anyone.

1815
04:46:24.230 --> 04:46:27.939
satya bonagiri: I need to share my screen to show. Okay.

1816
04:46:27.940 --> 04:46:32.630
Sunny Savita: Yeah, Satya, I'll add you in a panelist. Give me a moment. Yeah. Sorry, Hari. What's your doubt? Please go ahead.

1817
04:46:32.910 --> 04:46:34.109
srihari Vanga: Yeah, I'll see that.

1818
04:46:34.300 --> 04:46:37.259
srihari Vanga: No, I have to share my screen once.

1819
04:46:37.750 --> 04:46:41.669
Sunny Savita: Okay, adding your parallelism, Mahidar, what's it out?

1820
04:46:42.060 --> 04:46:42.660
Sunny Savita: Yeah.

1821
04:46:42.660 --> 04:46:43.290
Mahidhar Chaluvadi: Hi Sunny.

1822
04:46:44.000 --> 04:46:57.089
Mahidhar Chaluvadi: The session was good. I have some basic questions in the rag overall design. Right? So you explain how we do the ingestion, then how we attach the retrieval, pipeline, etc.

1823
04:46:57.230 --> 04:47:09.809
Mahidhar Chaluvadi: so like in in terms of the technical flow of data. So the retrieval pipeline will essentially talk to Llm. Or maybe it will feed the Llm with the context and everything.

1824
04:47:10.070 --> 04:47:29.969
Mahidhar Chaluvadi: But when the response comes back to the end user, or maybe whoever is actually requesting what happens behind the screens, I mean, like, obviously, if you have gigabytes of data, you are not going to update everything into Llm. And at the same time, even if you chunk them, there could be millions of records at times. How does it internally work.

1825
04:47:31.500 --> 04:47:34.919
Sunny Savita: So for that, sir. At least you will have to run the code from your end.

1826
04:47:35.180 --> 04:47:56.109
Sunny Savita: Okay, that backend, understanding and all. Let me tell you the flow. Let's say you have billions and the millions of the data. Okay, in that case, you are going to be store your data inside the vector, database. So 1st of all, you'll have to optimize that ingestion process. Okay, now, how you are going to fetch the data. So you will have to like, use the batch technique over here.

1827
04:47:56.110 --> 04:48:21.799
Sunny Savita: Right? You will have to play with the K values right? And after fetching the data from the vector database based on the query and the prompt which you are formatting. This all the information will be combined all together, and then, after the combining the all the information, it will go to the Llm. So to the Llm. Actually, we are just passing very minimalistic information. Whatever we are able to fetch based on the user query. And this, similarly, such mechanism meaning using the retrieval pipeline.

1828
04:48:21.800 --> 04:48:37.110
Sunny Savita: So you pass the user query to the vector, database. You got some chunks, let's say, 1015, 2, 3, 4, 5. Whatever. You will collect the data, you will collect the user query. You will write. You will like, define everything. You will compile everything in the prompt. Okay, and after that you will

1829
04:48:37.260 --> 04:48:46.559
Sunny Savita: pass it to the lab. So better if you can look into my solution. It is a full fledged only so once you will run it from your end, you will be able to understand that.

1830
04:48:46.560 --> 04:49:02.769
Mahidhar Chaluvadi: Yeah, yeah, no, no, I can. I can correlate with how the response is coming. But I'm just trying to understand in terms of the data transmission, and how much actually goes? Will it be completely controlled? Only through the retrieval pipeline itself, or.

1831
04:49:02.770 --> 04:49:08.150
Sunny Savita: Yeah, pipeline, only the retrieval part is only will be controllable by the retrieval pipeline. So far.

1832
04:49:08.710 --> 04:49:26.239
Mahidhar Chaluvadi: Well, let us say now, in the system I actually have neglected some 10,000 records, and within my retrieval pipeline I found out that the requested input actually matches only like 100 or 200 records. You are saying essentially that filtering will happen, and only that 100 or 200 records will actually go to the Llm. Correct.

1833
04:49:26.240 --> 04:49:26.980
Sunny Savita: -

1834
04:49:27.780 --> 04:49:33.450
Mahidhar Chaluvadi: Correct right? So now the next question is, when we are sending that 100 or 200 to the Llm.

1835
04:49:33.580 --> 04:49:37.559
Mahidhar Chaluvadi: Do we send it in full, I mean, like, do we send all the chunks related to that.

1836
04:49:37.560 --> 04:49:38.060
Sunny Savita: Yeah.

1837
04:49:38.060 --> 04:49:38.490
Mahidhar Chaluvadi: Feel good.

1838
04:49:38.490 --> 04:49:50.489
Sunny Savita: Model. You can pass that. Then entire data. Gpt 3, Gpt 4.0, or Gpt, or this Google, Jimny flash 2.5. This kind of model. Take care of this much of data. Okay.

1839
04:49:51.090 --> 04:50:17.860
Mahidhar Chaluvadi: Okay. Now, a little bit extension to the same thing. Mostly like we. We might probably be building our rags primarily for our corporate scenarios, right? If there are any restrictions around this data, is it just only some sort of an agreement or some sort of feature that model already provides to secure it? Or, on the contrary, do they expect us to actually set up some.

1840
04:50:17.860 --> 04:50:38.979
Sunny Savita: You will see in the restricted environment, you will have to configure everything. Okay, it's a configuration part, the admin part only. Okay. So you are not responsible for that. If you will ask to your lead, he will configure for you everything based on the company policies. See, whenever we are doing this type of basically practices. Now, there is a proper sop for that. Okay.

1841
04:50:39.300 --> 04:50:39.790
Sunny Savita: so.

1842
04:50:39.790 --> 04:50:53.649
Mahidhar Chaluvadi: My question is not about configuring. My question is more about in in terms of the actual operation that's happening right? We are still going to send to that cloud in a secured manner? Or will there be some

1843
04:50:53.650 --> 04:51:09.920
Mahidhar Chaluvadi: agents that we have to set up on our end, which will ensure that the transmission is completely not visible or completely secured. I'm just trying to understand. It's more only on the target destination that will take care of everything? Or will there be any clients that we have to set up on our end?

1844
04:51:10.760 --> 04:51:18.579
Sunny Savita: Not on client or the like. Wherever you have hosted that model, or there itself, you'll have to be like, configure those permissions and all everything. Okay.

1845
04:51:18.770 --> 04:51:25.329
Mahidhar Chaluvadi: So you're saying pretty similar to how we maintain our Vpcs and everything in our cloud architecture today.

1846
04:51:25.640 --> 04:51:26.119
Mahidhar Chaluvadi: Got it?

1847
04:51:26.120 --> 04:51:29.180
Mahidhar Chaluvadi: Okay? Okay, yeah, thank you thanks for answering that.

1848
04:51:29.430 --> 04:51:30.500
srihari Vanga: Sunny. I have.

1849
04:51:32.790 --> 04:51:38.700
Sunny Savita: Good. Oh, basically. Yeah, yourself. Okay, nabdeep.

1850
04:51:39.891 --> 04:51:45.520
Sunny Savita: Yeah. So Sri Hari, Satya, please share your screen. Sri Hari, 1st usual, then Satya, okay.

1851
04:51:45.520 --> 04:51:54.269
srihari Vanga: Yeah, I'm sorry. Actually, I'm struggling with the 2 questions I have. That 1st one is actually this incorrect Api key always coming

1852
04:51:55.350 --> 04:51:56.280
Sunny Savita: Who's coming? Sorry.

1853
04:51:56.280 --> 04:51:57.900
srihari Vanga: Incorrect. Api. Key.

1854
04:51:57.900 --> 04:51:59.169
Sunny Savita: Where is that correct?

1855
04:51:59.170 --> 04:52:01.500
srihari Vanga: You see that you are able to see my screen.

1856
04:52:01.500 --> 04:52:02.719
Sunny Savita: You scroll down.

1857
04:52:02.900 --> 04:52:03.550
srihari Vanga: Yeah.

1858
04:52:05.410 --> 04:52:07.020
Sunny Savita: Then write the Api keynote, correct.

1859
04:52:07.020 --> 04:52:10.649
srihari Vanga: No, no, no! Already I created a lot of times, not a number of times.

1860
04:52:10.650 --> 04:52:11.889
Sunny Savita: Open your Api key.

1861
04:52:11.890 --> 04:52:12.990
Sunny Savita: Yeah, yeah, that's.

1862
04:52:13.210 --> 04:52:13.670
satya bonagiri: Everyone.

1863
04:52:13.720 --> 04:52:16.639
srihari Vanga: No, no, I've done. I've done number of times.

1864
04:52:17.880 --> 04:52:19.529
Sunny Savita: No, no, restart the kernel.

1865
04:52:20.810 --> 04:52:21.480
srihari Vanga: Yeah.

1866
04:52:24.520 --> 04:52:25.400
srihari Vanga: everything.

1867
04:52:25.715 --> 04:52:26.020
Sunny Savita: Yeah.

1868
04:52:30.880 --> 04:52:32.880
satya bonagiri: And you have to come from beginning excelling.

1869
04:52:52.420 --> 04:52:53.449
srihari Vanga: Yeah, same.

1870
04:52:53.740 --> 04:52:54.140
sanjeev: Did this?

1871
04:52:54.140 --> 04:52:55.599
Sunny Savita: Create in front of me. Okay.

1872
04:52:55.600 --> 04:53:11.419
sanjeev: The problem. Even I have faced multiple times in. But today, even I have faced this. I don't know what is sufficient. Seriously like this open a faces gives a lot of problems even I have seen today. Also, I'm also facing this. But actually, when I run for a hugging face, it's working. So I went and reset my open a key today also, but still.

1873
04:53:12.780 --> 04:53:14.300
srihari Vanga: Yeah, I'm creating. Yeah, no.

1874
04:53:14.300 --> 04:53:17.679
Sunny Savita: So this is a open a means. You added a credit. Now, right?

1875
04:53:19.020 --> 04:53:20.789
Sunny Savita: I didn't add it so.

1876
04:53:20.790 --> 04:53:24.729
sanjeev: No, no, my for me, crate is there sunny for me, crate? Is there also.

1877
04:53:24.990 --> 04:53:27.050
Sunny Savita: Show me yours, and you share the screen.

1878
04:53:27.200 --> 04:53:29.330
Sunny Savita: Yeah. One sec. Let me see where it is.

1879
04:53:29.330 --> 04:53:30.780
Sunny Savita: Do you have credit? Srihari?

1880
04:53:30.780 --> 04:53:32.379
srihari Vanga: No, I don't have credit. No.

1881
04:53:32.380 --> 04:53:34.900
Sunny Savita: Then it will not work nuggets.

1882
04:53:35.220 --> 04:53:39.749
Sunny Savita: You will have to add some credit over there first, st Sanjeev. You can. If you can, show me, then I think

1883
04:53:40.527 --> 04:53:42.860
Sunny Savita: another question. Sunny.

1884
04:53:42.860 --> 04:53:44.260
sanjeev: I think he has taken this one

1885
04:53:44.610 --> 04:53:47.029
sanjeev: just a second Sanjiv coming to us here. Please.

1886
04:53:47.670 --> 04:53:57.750
srihari Vanga: For example, I have a relational database. Is there the data? Can we put the data into vector database? through year diagrams.

1887
04:53:58.120 --> 04:53:59.110
srihari Vanga: for example.

1888
04:53:59.927 --> 04:54:09.310
srihari Vanga: What is my idea is? If you give the query, then Llm. Should give the queries automatically through using the Llm diagram.

1889
04:54:10.130 --> 04:54:11.510
srihari Vanga: Sorry er diagram.

1890
04:54:12.210 --> 04:54:14.489
Sunny Savita: Can you? Can you come again from starting.

1891
04:54:14.490 --> 04:54:17.310
srihari Vanga: For example, I have a relational databases there.

1892
04:54:17.310 --> 04:54:17.740
Sunny Savita: Okay.

1893
04:54:17.740 --> 04:54:24.539
srihari Vanga: So what is the relation that I will generate the year diagram? So that year diagram I will give input to the Llm.

1894
04:54:24.540 --> 04:54:24.880
Sunny Savita: Hmm.

1895
04:54:24.880 --> 04:54:30.289
srihari Vanga: So if I ask that some questions then automatically based on the queries

1896
04:54:30.500 --> 04:54:35.809
srihari Vanga: automatically should recognize and based on the queries you should give, the result? Is it possible.

1897
04:54:37.870 --> 04:54:41.940
Sunny Savita: Yeah, it's possible. I think you should 1st try with some small pocs

1898
04:54:42.050 --> 04:54:46.340
Sunny Savita: because I worked with the flow charts. Llm. Is able to recognize that.

1899
04:54:46.900 --> 04:54:49.830
srihari Vanga: So Llm. Is able to recognize the year. Diagram queries.

1900
04:54:49.830 --> 04:54:55.259
Sunny Savita: Right? It is possible. So see what you can do. Now, how you can create that architecture flow.

1901
04:54:55.670 --> 04:55:01.390
Sunny Savita: 1st of all, give that flow diagram. Okay, extract the metadata.

1902
04:55:01.530 --> 04:55:02.360
Sunny Savita: Okay?

1903
04:55:02.650 --> 04:55:10.639
Sunny Savita: And based on that particular metadata. And all once it will be able to understand that year. Diagram. Now, what you will do so.

1904
04:55:11.109 --> 04:55:15.389
Sunny Savita: You can configure the tools, basically in the origin tech flow, or something.

1905
04:55:15.720 --> 04:55:16.220
srihari Vanga: Okay.

1906
04:55:16.220 --> 04:55:24.870
Sunny Savita: So that tool, basically, what will do the tool? So based on your query, the er diagram and all it will call the appropriate retriever.

1907
04:55:25.300 --> 04:55:41.790
Sunny Savita: Okay, you can create a fallback. Also, if you want to create any other external Api, you can do that. Otherwise you can use the tool as a retriever. Okay, it will call that. So this is possible. You will have to create one small poc on top of it, and after doing it you can show me that. Okay, we can scale it later on. Got it.

1908
04:55:41.790 --> 04:55:45.660
srihari Vanga: Tool is a direct retriever. It is reading from the database. Am I correct?

1909
04:55:45.660 --> 04:55:51.940
Sunny Savita: Yeah, see, tool means, it's just a function. Whatever we have kept inside the cell, right? You can.

1910
04:55:51.940 --> 04:55:58.300
srihari Vanga: But my idea is this, data can be put in the rag vector database. Is it the correct idea.

1911
04:55:58.300 --> 04:56:17.449
Sunny Savita: You can do it. Now, see, later on, wherever you want to flow, that information, you can flow that. Okay. See, sir, this type of solution. If if you are saying something right, I am giving the like the solution, it will not make sense until you're not showing anything on like, notebook or paper. Okay.

1912
04:56:18.060 --> 04:56:18.620
srihari Vanga: Okay.

1913
04:56:18.620 --> 04:56:34.959
Sunny Savita: That's what I'm saying. See if you're getting this type of problem. And all 1st start working on it, at least create some some boilerplate code on code and all. Okay. So I can look into that, I can give you some suggestion on top of it. So in thoughts how we can design that. Okay.

1914
04:56:34.960 --> 04:56:37.300
Sunny Savita: it's like, difficult to design a system like this.

1915
04:56:37.570 --> 04:56:41.699
srihari Vanga: I agree. Then I'll come. Okay. Then I'll do that. Thank you.

1916
04:56:41.950 --> 04:56:42.970
Sunny Savita: Yeah, I'll see you.

1917
04:56:42.970 --> 04:56:47.539
ANIRUTH: So when I've just pulled out, sir. So my 1st doubt is.

1918
04:56:47.540 --> 04:56:55.079
Sunny Savita: Wait! Wait! Wait! Coming to you. I'm coming to you. There are like a person who already in a queue, so just a sec.

1919
04:56:55.080 --> 04:56:55.530
ANIRUTH: Boys.

1920
04:56:55.530 --> 04:56:57.270
Sunny Savita: Please share that screen.

1921
04:56:57.270 --> 04:57:06.099
sanjeev: Now it is working. I don't know. See, I have faces open. Ap. Multiple. In fact, today morning, all when the class is going on. It's facing it. Now I'm running, it is working. I don't

1922
04:57:06.100 --> 04:57:06.689
sanjeev: no worries.

1923
04:57:06.690 --> 04:57:10.689
sanjeev: So this but this comes keeps coming frequently for the open AI thing.

1924
04:57:10.890 --> 04:57:11.540
Sunny Savita: Okay.

1925
04:57:11.540 --> 04:57:12.850
sanjeev: I am not sure. Why? Okay?

1926
04:57:12.850 --> 04:57:27.829
Sunny Savita: No, no, actually it is not from the open. A. It is from the server cache. Sorry your system cache only sometimes see sometime what it does not fix the older key only so how you can make sure that you can print that key. Okay, whether it is picking a correct key or not from the dot. Env. Okay.

1927
04:57:27.830 --> 04:57:34.048
sanjeev: Oh, okay, there is one more thing, Sunny. I'm not sure you faced it right. See?

1928
04:57:34.990 --> 04:57:47.769
sanjeev: when you go to the visual studio code. And when you want to change your when you change your environment, right then you want to change the kernel on the top. When you're changing the kernel right many times. The new kernel will not show up.

1929
04:57:47.960 --> 04:57:48.420
Sunny Savita: Hmm.

1930
04:57:48.420 --> 04:57:59.410
sanjeev: You might have seen that right? So today, also struggling, the new kernel not showing up. Then I actually have to restart my entire Vs code. Then the new kernel is coming mean the new environment which I created. Then only it is started coming.

1931
04:57:59.660 --> 04:58:12.660
Sunny Savita: So in that case, now, what you can do, you can manually check out the path of that. Okay, it is giving you the option for putting the path, and you can check otherwise if it is not getting refreshed inside the system, just close that file IP and V file and then restart that. Okay, that's it.

1932
04:58:12.660 --> 04:58:13.620
sanjeev: Close that what.

1933
04:58:13.780 --> 04:58:17.179
Sunny Savita: Close the close that IP bind, file the specific IP, bind, file.

1934
04:58:18.130 --> 04:58:28.020
sanjeev: Okay. So today, actually, since this also faced multiple times, so that refresh will happen inside of Southern Internet, I think there's a frequent problem which comes with this thing reason, this code.

1935
04:58:28.020 --> 04:58:32.509
Sunny Savita: It is a system specific issue. Only. Okay, universally, don't fall. No one face this kind of.

1936
04:58:32.510 --> 04:58:37.229
sanjeev: So, can you? Okay? Can you guide me how to change that path which you said right? Can you guide me? Because I faced this.

1937
04:58:37.230 --> 04:58:40.040
Sunny Savita: Yeah, you can share the screen. I can show you that part. Okay.

1938
04:58:40.540 --> 04:58:42.049
sanjeev: Okay. If you can make me a panel.

1939
04:58:42.620 --> 04:58:43.190
Sunny Savita: Yeah.

1940
04:58:43.190 --> 04:58:43.910
sanjeev: Yeah, sure.

1941
04:58:43.910 --> 04:58:44.350
Sunny Savita: What's it?

1942
04:58:44.350 --> 04:58:45.489
satya bonagiri: Should I go ahead now.

1943
04:58:45.490 --> 04:58:46.259
Sunny Savita: Yeah, so, too.

1944
04:58:46.670 --> 04:58:54.770
satya bonagiri: Yeah, so I I actually, I didn't get the Pdf, so I just created on Pdf, okay, there's some pdf, I created like this.

1945
04:58:55.670 --> 04:59:04.540
satya bonagiri: And then I did this part. But it is saying, Retriever has 0 content. There's no content in the retriever part of it.

1946
04:59:06.930 --> 04:59:08.199
Sunny Savita: Folder dot load.

1947
04:59:08.390 --> 04:59:11.520
Sunny Savita: Show me the data. It's not loading a data, is it?

1948
04:59:11.890 --> 04:59:17.640
satya bonagiri: No, no, it is loading. See if you see here 2 Ps. Also it's coming right. If you see lotto dot load

1949
04:59:18.482 --> 04:59:25.439
satya bonagiri: it is saying, 2 2 pages are there. And all this is 2 pages actually okay.

1950
04:59:26.220 --> 04:59:30.829
satya bonagiri: And then resources done, and then see this.

1951
04:59:31.330 --> 04:59:32.350
satya bonagiri: Thank you.

1952
04:59:32.950 --> 04:59:36.910
satya bonagiri: Splitters are done. I mean this. I'm rerunning again. Just.

1953
04:59:38.090 --> 04:59:43.420
Sunny Savita: Why, it's giving this chunk size 50 and all. See coming now it is coming. 5 document it is giving to you right.

1954
04:59:44.020 --> 04:59:50.170
satya bonagiri: Yeah, that's what I'm saying, but it is not. I'll I'll show the then. Okay.

1955
04:59:50.360 --> 04:59:56.680
satya bonagiri: and it is coming here. It is saying saying it on.

1956
04:59:57.480 --> 05:00:00.250
Sunny Savita: No. 1st of all, it's stored inside the vector database.

1957
05:00:00.590 --> 05:00:02.160
satya bonagiri: It's stored, actually stored.

1958
05:00:02.160 --> 05:00:03.670
Sunny Savita: Restore it one more time.

1959
05:00:04.826 --> 05:00:05.620
satya bonagiri: This one.

1960
05:00:05.620 --> 05:00:07.230
Sunny Savita: But yeah, run this one.

1961
05:00:07.400 --> 05:00:08.010
satya bonagiri: Yeah.

1962
05:00:08.010 --> 05:00:09.190
Sunny Savita: Done. Next one.

1963
05:00:09.920 --> 05:00:10.770
satya bonagiri: Yeah.

1964
05:00:11.240 --> 05:00:12.990
Sunny Savita: Yeah, not on the other one.

1965
05:00:13.770 --> 05:00:14.260
satya bonagiri: Okay.

1966
05:00:14.260 --> 05:00:16.920
Sunny Savita: Yeah, do it, do it, run it, run it.

1967
05:00:17.905 --> 05:00:18.210
satya bonagiri: Know.

1968
05:00:18.210 --> 05:00:22.899
Sunny Savita: Run it. Run this one. Yeah, no, no, wait, wait, sir. Start! Promised everything. You will have to run. Yeah, after that.

1969
05:00:24.500 --> 05:00:25.420
Sunny Savita: run it.

1970
05:00:26.520 --> 05:00:28.629
Sunny Savita: Yeah, run it. This one also.

1971
05:00:30.370 --> 05:00:34.189
Sunny Savita: Yeah, in pulled up. Prompt. Yeah.

1972
05:00:34.480 --> 05:00:35.990
Sunny Savita: Preprint. Also.

1973
05:00:37.330 --> 05:00:38.250
satya bonagiri: Have a great trip.

1974
05:00:38.250 --> 05:00:42.329
Sunny Savita: Okay. Now, scroll down, and the output parts are neighbors.

1975
05:00:42.500 --> 05:00:44.989
satya bonagiri: This is just a text.

1976
05:00:48.480 --> 05:00:51.550
Sunny Savita: Change. Yup. Now, reaction invokes.

1977
05:00:54.170 --> 05:00:55.520
Sunny Savita: Yeah, it's coming.

1978
05:00:56.043 --> 05:01:02.720
satya bonagiri: Might have missed. So okay, one question here is the prompt ability which is just a system prompt, correct, actually.

1979
05:01:02.720 --> 05:01:05.619
Sunny Savita: The complete, human, prompt. Only see this one.

1980
05:01:06.380 --> 05:01:08.959
satya bonagiri: Oh, yeah. So this is what it will.

1981
05:01:09.180 --> 05:01:21.440
satya bonagiri: But but no, see, the point is 3 sentences. Use 3 sentences maximum. Keep the answer concise. So the format it is going to Lm is in this format, is it question and context like that?

1982
05:01:21.440 --> 05:01:23.309
Sunny Savita: Correct, correct, right.

1983
05:01:23.490 --> 05:01:25.300
satya bonagiri: Okay? Okay? Another question.

1984
05:01:25.300 --> 05:01:28.640
sanjeev: Yeah, but sunny, while on this right, how can I change this? For example, if you want to say 4.

1985
05:01:28.640 --> 05:01:32.569
Sunny Savita: You can create your own custom templates, I think, prompt, template right.

1986
05:01:32.570 --> 05:01:39.930
satya bonagiri: Sometime at you there are different, prompt template. That's what we pulled the prompt templates from the Hub edge.

1987
05:01:40.250 --> 05:01:42.489
Sunny Savita: Correct. It is an inbuilt, prompt them.

1988
05:01:42.490 --> 05:01:49.609
satya bonagiri: Contextual, and I think in different worlds, people call it system prompts and just giving the whole context of what is this, and.

1989
05:01:49.610 --> 05:01:52.878
Sunny Savita: Ha! So in that case you can use the chat, prompt template method

1990
05:01:53.640 --> 05:01:56.429
Sunny Savita: on the lunch, and you can create your own custom. Prompt, embedded.

1991
05:01:56.430 --> 05:02:09.399
satya bonagiri: Okay. So then, other thing is runable. Password. I'm just trying to understand what is runable pass through. So it says that from one step to other step of the chain. There is no modification happening so why.

1992
05:02:09.400 --> 05:02:20.519
Sunny Savita: No, see an unable pass through. Don't understand like this. I'm giving you one video. Watch it. Your every doubt will be clarified, related to the unable pass. I created one very detailed video, 15Â min of video on the Lcl itself.

1993
05:02:21.350 --> 05:02:28.359
Sunny Savita: Open the browser. Yeah. Open the browser. Once open the browser open the Youtube here.

1994
05:02:30.260 --> 05:02:34.360
Sunny Savita: Yeah. Right. Sunny, sunny. Savita. Lcl, right? Once.

1995
05:02:36.650 --> 05:02:38.800
Sunny Savita: Sunny. Savita. Lcl.

1996
05:02:42.080 --> 05:02:43.970
Sunny Savita: no. LCEL.

1997
05:02:46.110 --> 05:02:46.870
Sunny Savita: Yeah.

1998
05:02:47.670 --> 05:02:52.149
Sunny Savita: Yeah. This one follow this one. All run able. See? I mentioned all runnables here.

1999
05:02:53.600 --> 05:02:54.230
satya bonagiri: Script.

2000
05:02:54.690 --> 05:03:01.619
satya bonagiri: Got you? Yeah, I think different parts. Okay, that's it. That's it. Thank you.

2001
05:03:01.620 --> 05:03:02.569
Sunny Savita: Yeah, thank, you.

2002
05:03:04.270 --> 05:03:05.180
Vishnu: Yeah. Hi.

2003
05:03:06.820 --> 05:03:09.619
Sunny Savita: Just a second Vishnu coming to you Sanjeev.

2004
05:03:09.930 --> 05:03:10.340
sanjeev: Yeah, so.

2005
05:03:10.340 --> 05:03:12.000
Sunny Savita: Now show me your doubt. What's your doubt?

2006
05:03:12.000 --> 05:03:15.529
sanjeev: I have few questions. If I share my Vs code here.

2007
05:03:15.690 --> 05:03:17.189
sanjeev: Okay, if you share me.

2008
05:03:17.190 --> 05:03:18.519
Sunny Savita: No, I cannot see your Vs code.

2009
05:03:18.520 --> 05:03:23.699
sanjeev: Hattu, you have not. I'm not the panelist. You have to show me your screen. You have to allow me to share my screen.

2010
05:03:23.900 --> 05:03:26.789
Sunny Savita: Yeah, allow now. Oh, sorry, I allowed. Now you can share.

2011
05:03:28.000 --> 05:03:29.340
sanjeev: I did not get that.

2012
05:03:30.180 --> 05:03:32.499
sanjeev: Are you able to see my screen? I don't think so right.

2013
05:03:33.820 --> 05:03:34.939
Sunny Savita: No, I cannot see.

2014
05:03:36.210 --> 05:03:39.650
sanjeev: Hmm! I have not got that. I should get that message already along with the share screen.

2015
05:03:42.510 --> 05:03:43.300
Sunny Savita: Nice.

2016
05:03:43.930 --> 05:03:48.570
Sunny Savita: I see. I everyone is having access for sharing a screen. Now try one more time.

2017
05:03:48.570 --> 05:03:49.809
sanjeev: Ajaha. Okay. Got it. Now.

2018
05:03:49.810 --> 05:03:52.590
Sunny Savita: Yeah, that green icon click on that. Okay.

2019
05:03:52.590 --> 05:03:58.539
sanjeev: Stop canceling no way. There's being open.

2020
05:04:01.870 --> 05:04:03.089
sanjeev: It's 24.

2021
05:04:08.780 --> 05:04:27.919
sanjeev: Okay? So I'm not sure why I'm not able to share my screen, Mac. So I don't know there's any problem with that. So that was one challenge which I face that the newly loaded environment, right? It doesn't come on the top. So I'm not able to change the kernel. So I have to restart. If you can kindly let me know some link or somewhere how to do that right. That would be very.

2022
05:04:27.920 --> 05:04:36.619
Sunny Savita: Sir. See, there is no link and all just investigate that thing. Okay, maybe it might be the system restriction. Or maybe you're not able to get that you are using Mac correct.

2023
05:04:36.620 --> 05:04:37.020
sanjeev: Hmm.

2024
05:04:37.020 --> 05:04:39.270
Sunny Savita: Do one thing I would suggest to you.

2025
05:04:39.907 --> 05:04:42.470
Sunny Savita: See, just click on this kernel.

2026
05:04:43.290 --> 05:04:51.390
Sunny Savita: Select kernel. Okay, this one environment path. Then select another kernel. Okay, this one, or else give the manual path over here. That's it. That's.

2027
05:04:51.390 --> 05:04:53.980
sanjeev: Oh, which path!

2028
05:04:53.980 --> 05:04:57.740
Sunny Savita: Ab.

2029
05:04:57.740 --> 05:04:59.020
sanjeev: For that envy, path.

2030
05:04:59.020 --> 05:05:26.740
Sunny Savita: Along with all the required library. Interpreter, selection. Exe. Amr. Interpreter. Okay.

2031
05:05:27.150 --> 05:05:32.171
sanjeev: That is good. So sunny. A few more queries Sunny. So see

2032
05:05:32.710 --> 05:06:01.620
sanjeev: I'm not able to share my screen personally in the rag. Right. For example. Yeah, there is very good example he showed today. But imagine that now, Christopher, for example, he was sharing that he showed from Openai. It was on 3 0 2, 4, and from hugging face it was 7, 8, 4, right? It's based on the number of tokens getting created. Okay? So now I have 2, 3 models. How can I best increase that performance? So how can I know the performance or rag? So, for example, I have been given a Pdf document. Okay?

2033
05:06:01.740 --> 05:06:13.969
sanjeev: And I want to know that. Okay, I'm giving a query, how best is this query's response in the rag fetched from the vector, dB. Or from the Pdf. Whatever you want to say. Right? How do I measure that.

2034
05:06:13.970 --> 05:06:29.249
Sunny Savita: Let me explain that part the question which you are asking. Now it come, it comes in the Rag Evaluation chapter. Okay. Now, how to do that rag evaluation. This itself is a topic. Okay. Now for evaluating that, basically, you require the ground truth.

2035
05:06:29.290 --> 05:06:51.650
sanjeev: Okay, so I'm suggesting you one framework. And I suggest to everyone that learn Raga, RAGA. It's a very neat and clean framework. Once you will go through with that, it is all about the rag evaluation. Only. Okay. So what all matrices is being used, how to evaluate the rag. What is a contextual score relevancy score everything. How to calculate that everything they have provided over there. Got it?

2036
05:06:51.990 --> 05:07:04.380
sanjeev: Yeah, okay. But that is good, sunny. One more thing I'm not sure I'm digressing. See? Actually, over the week. Now, I was actually working on this graph, dB, and the graph rag. I know that you may or may not be covering this course.

2037
05:07:04.390 --> 05:07:27.660
sanjeev: See what happens is that in graph rag, right? Graph, you put the data in a certain Csv format. I upload the this thing like graph dB is done, and if I actually go to my Neo 4 JI am able to run the query, I'm getting the data. Okay. But now, when I'm actually running the rag query, right? It may not. So it all based on how the Neo 4 J. Is interpreting my rag query and fetching the data from Neo 4 J. Isn't it

2038
05:07:27.700 --> 05:07:45.429
sanjeev: so? How can I make it better? So, for example, when the rack query results data so retains the data it might be. In a first, st it has to convert my query into a cipher format and then based on the cipher. Whatever it's created, it will go and fetch. Hit the Neo. 4 J. And give the data based on that is my understanding. Correct.

2039
05:07:46.240 --> 05:07:54.300
sanjeev: Correct now. So what data you are in a like? It doesn't seem to be like, how can I make it better? So? Data is somehow not looking good. Actually.

2040
05:07:55.470 --> 05:08:14.580
sanjeev: in New Forge. I can write the cipher. I can write a recycler to a cipher to give the data properly. Okay, but how to write the rag query in order to meet the cipher requirement. So actually, in the Youtube event, there was a Youtube from Thomas somewhere. He's giving some text to cipher. He has created something. Okay. It is there in.

2041
05:08:14.580 --> 05:08:21.489
Sunny Savita: Sir, manually. No need to convert this query into the cipher query, okay, Llm. Will do it for you.

2042
05:08:21.490 --> 05:08:42.459
sanjeev: Correct. Correct. Yes, but what I'm saying is, now see, for example, if I go to Neo 4 JI write a specific query. It's a match in person. Return, and something like that right when but I'm when I'm writing rack query that is, in plain language, right natural language. But now somewhere that natural language is interpreted and converted to a cipher, because neo. 4 J. Understand only cipher right.

2043
05:08:42.460 --> 05:08:42.780
Sunny Savita: Hmm.

2044
05:08:42.780 --> 05:09:06.630
sanjeev: So that cipher will now go. Whatever my natural language has created, the cipher based on the cipher, the Neo. 4 j. Will fetch the data. Exactly. Then very good. I will get the exact data right, but that it all depends on the rack. Query how I'm doing it. Maybe the I don't know like, how can I make it better? That is the whole query, because I cannot share my screen otherwise shared with you?

2045
05:09:06.630 --> 05:09:08.960
Sunny Savita: Share the screens at the next class. I'll check that. Okay.

2046
05:09:08.960 --> 05:09:10.000
sanjeev: Me, or I already.

2047
05:09:10.000 --> 05:09:15.780
Sunny Savita: Otherwise do one thing, check out with my, this one one video, the new approach. Okay.

2048
05:09:15.850 --> 05:09:20.380
sanjeev: In that the Github is the Github. We have locked it. I think I'm not even.

2049
05:09:20.380 --> 05:09:26.650
Sunny Savita: Github. Actually, that file is available in the Github itself. You need to check out that I create kept in a separate folder itself. Okay.

2050
05:09:26.650 --> 05:09:27.739
sanjeev: Is low, but see.

2051
05:09:27.740 --> 05:09:31.520
Sunny Savita: Neo 4 j. Provide you one platform there. You can visualize that part. The cipher.

2052
05:09:31.520 --> 05:09:34.270
sanjeev: Correct. Correct. Yes, I have done that. Yeah, yeah, that is there.

2053
05:09:34.480 --> 05:09:40.939
Sunny Savita: So just show me that in at which part you have a issue, otherwise, what you can do, you can visualize that schema and all, there is a multiple ways of it.

2054
05:09:40.940 --> 05:09:58.450
sanjeev: See in Neo. 4 J. Now, Sunny, when I'm going to Neo 4 J. Itself, the URL itself link, I can see everything is done properly now, because actually it took a lot of effort to get that done properly. Now, when I'm running a normal match. Query, there, for example, return this or match where? Something. I'm getting the data properly there. Okay.

2055
05:09:58.490 --> 05:10:17.839
sanjeev: But now, when I'm running this from my collab, from my, when I'm running rack query, right, for example, that will actually go to Neo 4 j. Right? And then neo 4 j. Will construct it in a cipher, and then it will give the result based on the constructor cipher, isn't it? That cipher? I think.

2056
05:10:17.840 --> 05:10:20.460
Sunny Savita: Then I can only check. Okay.

2057
05:10:20.460 --> 05:10:22.310
sanjeev: Yeah, hopefully, share my screen. Now.

2058
05:10:22.860 --> 05:10:24.520
Sunny Savita: Okay, next up is.

2059
05:10:24.520 --> 05:10:25.080
Vishnu: Oh!

2060
05:10:25.080 --> 05:10:25.400
Sunny Savita: Like a.

2061
05:10:25.400 --> 05:10:28.760
Pratap: Can I? Can I please share the screen, sonny?

2062
05:10:28.760 --> 05:10:32.299
Sunny Savita: Adding in a panelist, You can share, then, Vishnu, are you there?

2063
05:10:32.740 --> 05:10:56.920
Vishnu: Yes, yes, I'm here, and mine is just normal questions when you're doing the chunking part. You know, we have a longer context. Pages like, let's say, legal documents or something where the context or the paragraph itself will be around, you know, 2 to 3 pages, kind of thing when we are going with this specific number of tokens like chunking. I know you told me that

2064
05:10:56.920 --> 05:11:11.350
Vishnu: parameter tuning we need to do, but after preparing the entire rag, what we are facing is during the retrieval. It is not giving the exact answers, because the context is very big. So is there any way context based? Or we can do the chunky.

2065
05:11:11.770 --> 05:11:36.709
Sunny Savita: Yes, sir, you can do one thing you can do the semantic chunking, or here I would suggest you don't do the chunking. Do one thing manually define. The way of extract means the like, the for fetching every section. Let's say your section one is keeping all the context. Okay, your section 2 is keeping the context. Your section 3 is keeping the context right. So don't perform the chunking over here. I would not, would not, suggest you to performing a chunking

2066
05:11:36.900 --> 05:11:42.220
Sunny Savita: fetch each section as it is okay and store it inside the vector database. That's it.

2067
05:11:42.930 --> 05:11:45.650
Vishnu: Okay, using normal, pdf, method.

2068
05:11:45.650 --> 05:12:00.770
Sunny Savita: Correct, correct. Just just pass the data and don't perform the chunking at all here, based or segregate your data based on the section and the context itself, wherever till whichever point, you want to keep the context, okay, and then pass it to the vector database. Sorry, this one.

2069
05:12:00.770 --> 05:12:07.469
Vishnu: Okay? Then, then, after doing this activity again, can I do the chunking for us? Each section.

2070
05:12:08.070 --> 05:12:23.140
Sunny Savita: Chunking a queue requirement. I don't think so. See, I understand the legal document and all. But if we don't get a correct output, some back and forth. We have to do it now.

2071
05:12:23.140 --> 05:12:25.130
Vishnu: Yes. Yes. Hello.

2072
05:12:25.130 --> 05:12:33.039
Sunny Savita: Think your own label, Sir Cta Rag. It seems very simple. We can create it within our, but literally it's a very volatile.

2073
05:12:33.040 --> 05:12:34.260
Vishnu: Practically it is different.

2074
05:12:34.260 --> 05:12:57.759
Sunny Savita: Hannah like there are too much back and forth. Even if I'll give you 2 months of time with the data, you won't be able to come up with a hundred percent result with the rag approach. Okay, so the case, everything is like the experimental over here. Okay, I experiment with my own practice, I would say, checking is fine. Cementing. Chunking is good. But if you have some legal document or something in that case.

2075
05:12:57.880 --> 05:12:59.460
Sunny Savita: create your own method.

2076
05:12:59.770 --> 05:13:09.540
Sunny Savita: Okay, that's the skill of the programmer or the developer. Right? They never like talk this much. They do the thing. Okay? And then they showcase the result. That's it. Okay.

2077
05:13:09.800 --> 05:13:27.070
Vishnu: Yes, yeah, no. One more point related to the indexing. For that. You told there are 3 types of indexing that you are told right? So for a big, you know, when we when I'm having a multiple documents, are there in the company and belongs to different topics, can we do 2 levels of indexing.

2078
05:13:27.070 --> 05:13:42.270
Sunny Savita: Yeah, you can do that. Otherwise. Do the meta level of segregation, the metadata level of segregation. Okay, keep some like the primary key for every set of data. Okay? And then you can keep it inside the same index. Also, that is also fine.

2079
05:13:42.420 --> 05:13:43.130
Sunny Savita: What if.

2080
05:13:43.130 --> 05:13:50.859
Vishnu: Sure, on 3rd question, related to the filters that you mentioned in retrieval. What is the use of that one? Can I know.

2081
05:13:50.860 --> 05:14:10.599
Sunny Savita: That's only now, like once, you will create your primary key. Let's say, there is a name. Okay location. That that's your primary key means wherever you are keeping a data so that will become your filtering key means whatever name and the location you will pass, and with like. With respect to the name and location only, you will be able to filter out your data. Okay.

2082
05:14:12.120 --> 05:14:19.580
Vishnu: Oh, in this entire context, what is the importance of using the cache? Or you will.

2083
05:14:19.580 --> 05:14:40.589
Sunny Savita: Not to hit. Yeah, not to hit again and again the server. So if you are hitting the server for the same query, if you are hitting the Llm. For the same query again and again. It is not a good practice. You will find out a latency also. Just keep it somewhere in your like, the in memory and all. And then no need to hit the Llm. Again. You will get a like answer from the cache itself. Okay, in a very.

2084
05:14:40.590 --> 05:14:42.709
Vishnu: Purpose, also that cash you will serve me.

2085
05:14:42.710 --> 05:14:54.839
Sunny Savita: Yeah, officially, you can look into my Github. I already created a solution regarding the cache and all. Just check with Sunisa, with the Github. There you'll find out one repository generative. A boot camp. Okay. There, check with the cache cache rack. Okay.

2086
05:14:55.440 --> 05:14:56.489
Vishnu: Sure. Thank you so much.

2087
05:14:56.490 --> 05:14:57.340
Sunny Savita: Yuck.

2088
05:14:58.920 --> 05:15:01.810
Sunny Savita: Okay. Now, please share your screen. Pratab.

2089
05:15:01.810 --> 05:15:02.990
Pratap: Yeah, yeah, sure.

2090
05:15:03.640 --> 05:15:04.639
Pratap: Just give me.

2091
05:15:05.000 --> 05:15:10.789
Pratap: I'm I'm facing one minor issue. So sunny is my screen visible.

2092
05:15:10.790 --> 05:15:11.810
Sunny Savita: Yeah, it is visible.

2093
05:15:12.850 --> 05:15:19.879
Pratap: So this this size like this dependency, right? If I lead here in this requirement, dot txt.

2094
05:15:19.880 --> 05:15:20.520
Sunny Savita: Hmm.

2095
05:15:21.250 --> 05:15:23.229
Pratap: I'm pressing this issue.

2096
05:15:24.610 --> 05:15:32.899
Pratap: but if I install directly, peep, install, it works. But I have to give that conda for dependency as well along with that.

2097
05:15:36.300 --> 05:15:37.570
Sunny Savita: Where is that issue?

2098
05:15:38.288 --> 05:15:44.250
Sunny Savita: Do one thing now where you have kept. See it 1st of all, just zoom little bit. This one.

2099
05:15:44.810 --> 05:15:45.980
Pratap: Okay. June.

2100
05:15:45.980 --> 05:15:48.308
Sunny Savita: Give me the request if you can give

2101
05:15:50.460 --> 05:15:51.349
Pratap: Is it clear?

2102
05:15:51.710 --> 05:16:00.089
Sunny Savita: Yeah, it's clear. Okay, 1st of all, just collapse all the file in the browser. Just click on that last one.

2103
05:16:00.210 --> 05:16:03.589
Sunny Savita: Okay. Now see? Just write the sorry. Sorry. Sorry. Just collaborate.

2104
05:16:04.230 --> 05:16:05.730
Sunny Savita: Yeah. Pull up from the folder.

2105
05:16:06.160 --> 05:16:06.880
Pratap: Yep.

2106
05:16:06.880 --> 05:16:08.799
Sunny Savita: Yeah, collapse. All the folders.

2107
05:16:10.000 --> 05:16:14.659
Pratap: All the folders. Yeah. Txt, just show me your terminal once.

2108
05:16:16.310 --> 05:16:19.139
Sunny Savita: Yeah. Now write Ls on the terminal.

2109
05:16:20.800 --> 05:16:21.310
Pratap: Okay, sir.

2110
05:16:21.310 --> 05:16:25.210
Sunny Savita: Scroll it on. Sorry scroll down the right. L is here.

2111
05:16:27.370 --> 05:16:32.539
Sunny Savita: Recondot is here. Right yeah. Now, right click install. If not record txt.

2112
05:16:41.370 --> 05:16:49.239
Pratap: Yeah, I have to keep that conda force somehow in the dependency as well in line. Then only it works.

2113
05:16:49.963 --> 05:16:52.856
Sunny Savita: I think you are.

2114
05:16:54.770 --> 05:16:55.780
Pratap: Even I've created.

2115
05:16:55.780 --> 05:17:01.580
Sunny Savita: Can you mention setup.py files or something? Show me this one recon dot txt.

2116
05:17:01.980 --> 05:17:02.760
Pratap: Yeah, yeah.

2117
05:17:02.760 --> 05:17:09.879
Sunny Savita: Oh, just install it with Pip. Install 5 CPU. Do it once. Don't install the recommender txt.

2118
05:17:16.040 --> 05:17:17.019
Pratap: I don't see that.

2119
05:17:17.020 --> 05:17:19.200
Sunny Savita: No, don't mention minus or something.

2120
05:17:19.580 --> 05:17:20.050
Pratap: Got it.

2121
05:17:20.050 --> 05:17:21.740
Sunny Savita: Review, yeah.

2122
05:17:24.020 --> 05:17:25.319
Pratap: It's giving the same error.

2123
05:17:26.730 --> 05:17:27.660
Sunny Savita: And then so.

2124
05:17:27.660 --> 05:17:30.139
Pratap: I have to give that Conda force. Otherwise it's not.

2125
05:17:30.140 --> 05:17:36.140
Sunny Savita: Give. Give that command on the port. I think some issue with your Pip only, maybe.

2126
05:17:36.270 --> 05:17:38.219
Sunny Savita: or else create a new environment. Maybe.

2127
05:17:38.220 --> 05:17:40.910
Pratap: Yeah, I created a new environment, even the same.

2128
05:17:42.510 --> 05:17:46.039
Pratap: Oh or no. Okay.

2129
05:17:46.620 --> 05:17:48.150
Sunny Savita: What is your environment? Name.

2130
05:17:49.360 --> 05:17:58.069
Pratap: I created a test environment to resolve this issue. Only I created a test environment underscore environment, but still facing the same issue.

2131
05:17:58.070 --> 05:18:01.189
Sunny Savita: Run with this command we've installed condo Force.

2132
05:18:02.840 --> 05:18:07.500
Sunny Savita: It is not able to find that wheel inside your system. Maybe it's an issue of the Pip, only.

2133
05:18:11.800 --> 05:18:14.790
Sunny Savita: But if I run Conda right hit this command.

2134
05:18:14.790 --> 05:18:18.529
Sunny Savita: but that's why that's what I'm saying. Now you have an issue with the Pip, only

2135
05:18:18.950 --> 05:18:24.470
Sunny Savita: actually, it is not able to build that wheel file. It is clearly showing over there, done with the condom.

2136
05:18:24.780 --> 05:18:25.929
Pratap: Yeah. Corner. It working.

2137
05:18:25.930 --> 05:18:27.699
Sunny Savita: Huh? Contact is working. So.

2138
05:18:27.700 --> 05:18:28.150
Pratap: Yeah.

2139
05:18:28.150 --> 05:18:30.660
Sunny Savita: See where it is working. General default, prompt.

2140
05:18:30.660 --> 05:18:33.050
Pratap: Yeah. All already installed. Right? All the recording.

2141
05:18:33.050 --> 05:18:37.689
Sunny Savita: Do one thing. Do one thing, just create a new department here in this current location, right corner, create.

2142
05:18:38.100 --> 05:18:38.659
Pratap: I'm just.

2143
05:18:38.660 --> 05:18:41.289
Sunny Savita: Just come out from this environment once. Do it, please.

2144
05:18:41.290 --> 05:18:41.830
Pratap: Yeah.

2145
05:18:53.220 --> 05:18:55.429
Pratap: we can create directly.

2146
05:18:59.290 --> 05:19:03.199
Sunny Savita: Yeah. Conduct, no no wait. Wait. Conduct, create. Right conduct, create.

2147
05:19:03.390 --> 05:19:07.530
Pratap: Okay, okay, sel, and not remove the existing environment should be fine.

2148
05:19:07.530 --> 05:19:09.429
Sunny Savita: So, right? Right? Conduct create. Here.

2149
05:19:11.820 --> 05:19:14.639
Sunny Savita: yeah. Contact rate. Hyphen. P, right? Hyphen. P. Here.

2150
05:19:16.110 --> 05:19:17.670
Pratap: 17 period, here, right.

2151
05:19:17.670 --> 05:19:19.170
Sunny Savita: Env right envy.

2152
05:19:19.720 --> 05:19:20.979
Sunny Savita: Yeah. Space.

2153
05:19:22.220 --> 05:19:23.319
Sunny Savita: Yeah. Hit enter

2154
05:19:32.810 --> 05:19:34.019
Sunny Savita: click on. Yes.

2155
05:19:35.170 --> 05:19:35.960
Pratap: Yeah.

2156
05:19:37.060 --> 05:19:38.840
Sunny Savita: Yeah. Now activate the environment.

2157
05:19:45.080 --> 05:19:48.470
Sunny Savita: Yeah. Now run your Recondo txt here

2158
05:19:49.130 --> 05:19:51.510
Sunny Savita: with Pip. Command, Pip. 3, right, Pip, 3.

2159
05:19:51.900 --> 05:19:52.600
Pratap: You have 3.

2160
05:19:52.600 --> 05:19:56.359
Sunny Savita: No install iphone or icon. Txt.

2161
05:19:57.750 --> 05:19:58.520
Sunny Savita: Yeah.

2162
05:20:09.650 --> 05:20:11.040
Pratap: Yeah, same at a.

2163
05:20:11.730 --> 05:20:15.520
Sunny Savita: And then, I think, is having some issues. Maybe

2164
05:20:17.000 --> 05:20:19.750
Sunny Savita: do one thing. Just copy this error and give it to me in the chat.

2165
05:20:20.540 --> 05:20:23.009
Pratap: Yeah, should you find this.

2166
05:20:23.333 --> 05:20:27.219
Sunny Savita: From the error itself, from the error part itself. Building. Yeah, correct.

2167
05:20:27.340 --> 05:20:28.539
Sunny Savita: Give it to me.

2168
05:20:28.670 --> 05:20:30.930
Sunny Savita: Copy the entire one. Yeah. Copy.

2169
05:20:31.320 --> 05:20:31.980
Pratap: Yeah.

2170
05:20:32.240 --> 05:20:33.730
Pratap: I copied already.

2171
05:20:34.090 --> 05:20:35.720
Sunny Savita: Copy copy the entire one till last.

2172
05:20:35.720 --> 05:20:36.690
Pratap: Okay. Enter.

2173
05:20:36.890 --> 05:20:40.749
Sunny Savita: Yeah, yeah, till your last error point.

2174
05:20:41.020 --> 05:20:42.479
Sunny Savita: Yeah, give it to me now.

2175
05:20:46.160 --> 05:20:49.460
Pratap: I cannot copy. I think the text is really huge.

2176
05:20:50.350 --> 05:20:52.060
Pratap: It's not going there.

2177
05:20:56.570 --> 05:20:59.540
Pratap: My best small phone sinks.

2178
05:21:01.870 --> 05:21:03.540
Pratap: Somehow. I cannot.

2179
05:21:05.480 --> 05:21:11.589
Pratap: I cannot ping here, I'll I'll send a file Sami.

2180
05:21:11.730 --> 05:21:15.259
Sunny Savita: Yeah, do one thing, open the code shareio. Okay.

2181
05:21:16.080 --> 05:21:19.520
Sunny Savita: code, share. Dot I/O, there, you can share the all entire.

2182
05:21:20.190 --> 05:21:20.860
Pratap: Okay.

2183
05:21:26.110 --> 05:21:33.440
Sunny Savita: Okay. Meanwhile, guys, anyone having any verbal doubt, please go ahead. Anirud the Satish guys. I've given the access to everyone. Yeah. Anirud.

2184
05:21:33.690 --> 05:21:35.020
ANIRUTH: So totals.

2185
05:21:35.020 --> 05:21:35.520
Satish Tiwari: It's easier.

2186
05:21:35.520 --> 05:21:37.145
ANIRUTH: Firstly, you're talking about that

2187
05:21:37.600 --> 05:21:42.650
ANIRUTH: vector database. And so we 1st added 10 documents in the today's example, right?

2188
05:21:42.960 --> 05:21:43.580
Sunny Savita: Hmm.

2189
05:21:43.860 --> 05:21:54.670
ANIRUTH: And when we created 10 records for each of them, so does this vector database do anything to handle redundant records like, if we were to add another document which is already there.

2190
05:21:54.670 --> 05:22:00.539
Sunny Savita: No, it will not overwrite, it will be. There will be a redundancy. You will have to take care of that part manually.

2191
05:22:00.540 --> 05:22:01.919
ANIRUTH: Oh, so that's on us.

2192
05:22:01.920 --> 05:22:07.710
Sunny Savita: Yeah, if you will add 10 record again same time. Now same same. In a same way, it will add that, okay.

2193
05:22:08.320 --> 05:22:14.010
ANIRUTH: So then, if you want to retrieve the examples, then it would give the 2 things, one after the other, right.

2194
05:22:15.230 --> 05:22:19.199
Sunny Savita: Yeah, because it will, it is going to be over right now. That's why.

2195
05:22:20.050 --> 05:22:23.220
ANIRUTH: Okay. Okay, yes, sir, that's the route.

2196
05:22:24.410 --> 05:22:25.569
Satish Tiwari: Hi satish! Here.

2197
05:22:26.380 --> 05:22:27.500
Sunny Savita: Yeah. Suresh.

2198
05:22:27.900 --> 05:22:48.559
Satish Tiwari: Yeah. So actually, my doubt is that it is. Suppose if we are sending a query search, okay, to invoke person to invoke function, then entire sentence will get searched from all the documents or 50% in the search. Then, after these are 2 income, how the searching is coming.

2199
05:22:51.401 --> 05:22:55.020
Sunny Savita: Just just a second, sir. I'm coming to you. Wait, wait! Wait.

2200
05:22:56.277 --> 05:23:00.982
Sunny Savita: Okay. So who's asking this? Who is getting this error?

2201
05:23:01.410 --> 05:23:02.280
Pratap: Protagon.

2202
05:23:02.280 --> 05:23:04.500
Sunny Savita: Good for the top. Right?

2203
05:23:04.980 --> 05:23:09.940
Sunny Savita: Do one thing. Just install with this specific version 1.7 point 4.

2204
05:23:10.680 --> 05:23:14.869
Sunny Savita: Maybe the wheel is not available for a Mac. Maybe that's an issue. I think.

2205
05:23:14.870 --> 05:23:17.080
Pratap: Yeah, I already tried with this one as well.

2206
05:23:17.080 --> 05:23:17.720
Sunny Savita: Huh!

2207
05:23:17.720 --> 05:23:19.220
Pratap: Yeah, this is installed.

2208
05:23:19.570 --> 05:23:22.289
Sunny Savita: No, that's why that's why. See, that's what I'm saying now, really.

2209
05:23:22.290 --> 05:23:24.830
Pratap: Okay, I can. Then I can specify this specific version.

2210
05:23:24.830 --> 05:23:25.320
Sunny Savita: Gone right.

2211
05:23:25.850 --> 05:23:26.379
Pratap: Right.

2212
05:23:26.380 --> 05:23:29.629
Sunny Savita: Because if the wheel is not available for that, it won't be.

2213
05:23:29.630 --> 05:23:31.169
Pratap: What what exactly will.

2214
05:23:31.770 --> 05:23:38.330
Sunny Savita: Actually see whenever we create a package. Now, okay, so just open the pipe. I repository. Open the pipe, repository.

2215
05:23:40.350 --> 05:23:42.599
Pratap: So let's show me the browser. Show me the browser.

2216
05:23:42.990 --> 05:23:44.699
Pratap: Okay, give me abroad.

2217
05:23:46.590 --> 05:23:53.269
Sunny Savita: It's a build, actually, yeah. Oh, right, pi pi files 5, 5, 5 CPU.

2218
05:23:53.870 --> 05:23:54.750
Pratap: Bye-bye.

2219
05:23:54.750 --> 05:23:57.399
Sunny Savita: 5. 5. Pypi. 5. CPU.

2220
05:23:58.060 --> 05:23:59.610
Pratap: Okay. I've CPU.

2221
05:24:00.990 --> 05:24:02.310
Sunny Savita: No, sir, not pi.

2222
05:24:03.660 --> 05:24:08.789
Sunny Savita: Py, no. Py pi. Actually, it's a repository. Yeah.

2223
05:24:08.790 --> 05:24:09.560
Pratap: Okay.

2224
05:24:09.560 --> 05:24:11.539
Sunny Savita: 5 CPU. Fire, CPU.

2225
05:24:12.520 --> 05:24:13.060
Pratap: Okay.

2226
05:24:13.060 --> 05:24:17.200
Sunny Savita: Files. Files are, yeah, open this one. Now.

2227
05:24:18.150 --> 05:24:21.200
Sunny Savita: now, you scroll down release history code, the release history

2228
05:24:22.950 --> 05:24:26.429
Sunny Savita: release history. Yeah, yeah, click on this 1st package.

2229
05:24:27.020 --> 05:24:33.840
Sunny Savita: Yeah. Now scroll down, see? Do one thing. Go scroll up.

2230
05:24:35.000 --> 05:24:36.880
Sunny Savita: go with this scroll up, scroll up.

2231
05:24:37.470 --> 05:24:42.329
Sunny Savita: scroll up, scroll up, sir, scroll up, go the download, scroll up, scroll up, scroll up.

2232
05:24:42.890 --> 05:24:47.740
Sunny Savita: up, up, means uber or upratola. Oh.

2233
05:24:48.040 --> 05:24:50.510
Sunny Savita: download files! Go with the download files.

2234
05:24:51.370 --> 05:24:51.870
Pratap: No.

2235
05:24:52.300 --> 05:24:54.170
Sunny Savita: Release history below the release, history.

2236
05:24:54.170 --> 05:24:55.420
Pratap: Okay. Yeah. No.

2237
05:24:55.420 --> 05:24:56.220
Sunny Savita: See here.

2238
05:24:56.440 --> 05:25:01.049
Sunny Savita: So it is available for Amd. Linux, Linux, Mac OS.

2239
05:25:01.220 --> 05:25:03.909
Sunny Savita: So see the latest version. I think

2240
05:25:04.300 --> 05:25:07.409
Sunny Savita: it is having issue with the Mac OS. Maybe your python.

2241
05:25:07.678 --> 05:25:09.290
Pratap: I have like m 1 pro.

2242
05:25:09.290 --> 05:25:10.150
Pratap: Got it. Got it?

2243
05:25:10.150 --> 05:25:11.260
Pratap: That's the issue.

2244
05:25:11.260 --> 05:25:15.000
Sunny Savita: Over here. So here you need to check the wheel, and the build is available or not.

2245
05:25:15.210 --> 05:25:19.419
Sunny Savita: Okay, if it is not available, you cannot do it. You will have to download the previous version.

2246
05:25:19.720 --> 05:25:21.880
Pratap: Got it. Okay, thank you. Thanks a lot.

2247
05:25:21.880 --> 05:25:22.580
Sunny Savita: No, thank you.

2248
05:25:23.690 --> 05:25:26.029
Satish Tiwari: Yeah, Hi, Sunny, I'm going to make up.

2249
05:25:26.460 --> 05:25:26.950
Satish Tiwari: Yeah.

2250
05:25:26.950 --> 05:25:31.459
Sunny Savita: Just a second. Just a second. Guys Satish shatish. Please go ahead.

2251
05:25:31.830 --> 05:25:50.798
Satish Tiwari: Yes, yes. So my question was, suppose if we are sending that entire sentence to invoke function. Okay, so it will search entire character, wise characters of all sentence in my document, then, after it will give result for how this is.

2252
05:25:51.870 --> 05:25:53.050
Sunny Savita: No, sir.

2253
05:25:53.050 --> 05:26:05.249
Sunny Savita: pass the sentence to the Llm. 1st of all, we are passing a relevant data only. K. Is equal to 5, 1015, whatever is there? Right? So if you pass that particular sentence, those sentence only will go to the Llm.

2254
05:26:05.360 --> 05:26:06.080
Sunny Savita: Pardon.

2255
05:26:07.510 --> 05:26:12.450
Satish Tiwari: Okay? Means if I'm giving K. Equal to 5 means 5 sentences. Right?

2256
05:26:12.450 --> 05:26:13.110
Sunny Savita: Correct.

2257
05:26:13.860 --> 05:26:19.560
Satish Tiwari: Okay. If it will start in all document, then all document will come like a document.

2258
05:26:19.560 --> 05:26:21.649
Sunny Savita: All the document. Those 5 document will come.

2259
05:26:22.350 --> 05:26:23.720
Satish Tiwari: Okay. Okay. Fine.

2260
05:26:24.200 --> 05:26:24.765
Satish Tiwari: Okay.

2261
05:26:26.030 --> 05:26:26.660
Sunny Savita: Yeah.

2262
05:26:29.700 --> 05:26:32.170
Sunny Savita: okay, guys, any more doubt any more question.

2263
05:26:32.170 --> 05:26:33.820
Neeraj Singla: Sammy, I have a question.

2264
05:26:33.820 --> 05:26:34.830
Nadeep Melb: Yeah, nitroj.

2265
05:26:35.671 --> 05:26:43.070
Neeraj Singla: So actually, like, I'm I'm working in a demand forecasting domain. And I do like like on my team, do like Rca

2266
05:26:43.120 --> 05:27:06.429
Neeraj Singla: every month. Basically, what we look at is like, let's say what we forecast and what is the actual sales? Right? If there is, if the actuals are off right in terms of it's quite higher, quite lower. Then we try to identify what might be the possible reason that we are getting this forecast error right, it might be coming from some something from pricing or promotion, which might have happened, and it was not captured.

2267
05:27:06.782 --> 05:27:28.989
Neeraj Singla: So like, I have like. So I want to automate this. So I will basically will have different tabular data set or structure data set, one is pricing promotion stock outside. And I will also have this forecast and actuals data available in the structure data set within the big query. So I want to build this kind of a flow. So I wanted to understand from you like.

2268
05:27:29.230 --> 05:27:44.000
Neeraj Singla: how like, what should I use in terms of like if I ask something right? So the query should be generated in terms of like it could combine multiple tables right and give me the output, right? So what kind of agents or like.

2269
05:27:44.260 --> 05:27:50.649
Neeraj Singla: how how do I do basically drag with this structured data sets right when I have multiple tables.

2270
05:27:50.940 --> 05:27:56.650
Sunny Savita: Hmm. Do one thing, sir. 1st create a flow chart of it. Okay, then discuss with me tomorrow. Okay.

2271
05:27:57.990 --> 05:27:58.540
Neeraj Singla: Okay.

2272
05:27:58.540 --> 05:27:59.370
Sunny Savita: No.

2273
05:28:00.420 --> 05:28:07.720
Sunny Savita: you can easily create a flow chart with any of the software. Use the draw, I/O, create a flow chart of it. Okay? And then show me that. Okay.

2274
05:28:08.020 --> 05:28:14.810
Neeraj Singla: And do do I need to provide any like schema of the tables as well like? Because, like, it's not like, it's not available like

2275
05:28:15.030 --> 05:28:24.360
Neeraj Singla: by itself. So we'll have to give some kind of an information in terms of scheme of these tables as well. When I'm giving input to the Llm.

2276
05:28:25.440 --> 05:28:27.709
Sunny Savita: Schema in the sense, what means I didn't get.

2277
05:28:27.710 --> 05:28:35.839
Neeraj Singla: In my in terms of like the description of the column names or description of the table name something like those kind of informations.

2278
05:28:36.430 --> 05:28:43.109
Sunny Savita: Yeah, you can give that again. I'm saying. Now, see if you will, if you can show me something, at least. Okay.

2279
05:28:43.240 --> 05:28:47.600
Sunny Savita: Then I think that would be great. So if the user query is coming.

2280
05:28:47.710 --> 05:28:56.609
Sunny Savita: then it's going to be Xy, let's say, any sort of an agent. Then the agent, basically having access of that structured data set where you have a pricing promotion.

2281
05:28:56.610 --> 05:29:18.230
Sunny Savita: or whatever like the errors or whatever like parameter, is there, right? So based on that it will generate some query. Then it will combine the data, generate the output. Okay, so this will be the complete flow of it, whatever I'm able to understand. Okay, the overview. If you can give me the complete idea after creating any sort of a flow, chart and all, I think I can suggest you something on top of it. Okay.

2282
05:29:18.230 --> 05:29:22.570
Neeraj Singla: Okay, okay, yeah. Let me then bring that forward.

2283
05:29:22.570 --> 05:29:23.739
Sunny Savita: No, no.

2284
05:29:24.570 --> 05:29:26.440
Saurabh Verma: Tanny, can I share my screen.

2285
05:29:26.670 --> 05:29:27.870
Sunny Savita: Yes, or we can share.

2286
05:29:28.130 --> 05:29:30.450
Saurabh Verma: Kindly give me permission, please.

2287
05:29:30.900 --> 05:29:34.380
Sunny Savita: Yeah, I'm adding a panelist, Shivani, do you have any doubts.

2288
05:29:34.380 --> 05:29:35.750
Sreevani Maddela: Yes, and

2289
05:29:35.870 --> 05:30:05.190
Sreevani Maddela: actually, I work with some project management tools there. What they are asking is they used to create the flows, let's say, the flow in the sense I create a flow. The 1st step 1st step is shivani will send the task to Sunny. Sunny will send the task to Xyz. So this kind of flow will be created. And the routing. How do we automate this kind of workflow structure using any agents or something? Any idea. So in start of.

2290
05:30:05.500 --> 05:30:10.280
Sunny Savita: Yeah, so for that, actually, what you can do. Now, you can look at my collaborative agent video. Okay.

2291
05:30:10.600 --> 05:30:20.219
Sunny Savita: I already I already recorded one video. Just do one thing check with my Youtube, sunny Savita. Collaborative multi agentic flow. Okay.

2292
05:30:21.140 --> 05:30:22.579
Sreevani Maddela: Multi agent, call.

2293
05:30:22.580 --> 05:30:30.030
Sunny Savita: Supervisor, multi-genic flow, corroborate, multi-genic flow with both flow. You can do it. Okay, okay, Sunny, I'll watch it.

2294
05:30:30.030 --> 05:30:30.610
Sunny Savita: Thanks.

2295
05:30:31.080 --> 05:30:31.830
Sunny Savita: There you go.

2296
05:30:33.500 --> 05:30:35.900
Sunny Savita: Yeah. Sorry. What's it out.

2297
05:30:37.370 --> 05:30:39.699
Saurabh Verma: Yeah. So I was executing this.

2298
05:30:40.620 --> 05:30:45.460
Saurabh Verma: I have just 2 doubts so here, if I click it, it is saying.

2299
05:30:46.220 --> 05:30:48.699
Saurabh Verma: Sankera's old version, is there.

2300
05:30:49.090 --> 05:30:49.770
Sunny Savita: Hmm.

2301
05:30:50.030 --> 05:30:55.150
Saurabh Verma: I'm clicking this yeah coming, anyway, it does.

2302
05:30:55.150 --> 05:30:59.499
Sunny Savita: Select a correct environment, sir. You haven't selected current environment right hand side.

2303
05:30:59.930 --> 05:31:01.419
Saurabh Verma: It is python. 3.

2304
05:31:01.420 --> 05:31:03.500
Sunny Savita: No, no, no, do click on it.

2305
05:31:04.800 --> 05:31:07.370
Sunny Savita: Yeah, click on the select. Another another corner.

2306
05:31:07.660 --> 05:31:08.200
Saurabh Verma: Yeah.

2307
05:31:08.200 --> 05:31:09.860
Sunny Savita: Yeah, python environment.

2308
05:31:10.820 --> 05:31:13.600
Sunny Savita: Yeah, now, select this one vector, B angle.

2309
05:31:14.820 --> 05:31:15.280
Saurabh Verma: Which one.

2310
05:31:15.280 --> 05:31:18.889
Sunny Savita: After V, and B, yeah, restart the kernel.

2311
05:31:19.890 --> 05:31:20.660
Saurabh Verma: Oh!

2312
05:31:20.660 --> 05:31:25.629
Sunny Savita: Restart the kernel, restart, restart option, restart option. C. Run off.

2313
05:31:25.630 --> 05:31:27.019
Saurabh Verma: Yeah. Yeah. Yeah. Sorry. Sorry.

2314
05:31:27.020 --> 05:31:29.389
Sunny Savita: Yeah. Now restart it.

2315
05:31:30.800 --> 05:31:32.500
Sunny Savita: Not on it again. Okay.

2316
05:31:34.540 --> 05:31:35.580
Saurabh Verma: And say.

2317
05:31:35.580 --> 05:31:36.750
Sunny Savita: Yeah, install it.

2318
05:31:37.740 --> 05:31:38.520
Sunny Savita: Yeah.

2319
05:31:42.780 --> 05:31:48.670
Sunny Savita: Again and again, I'm saying, sir, choose the correct kernel, correct Kernel, but no one is listening. That.

2320
05:31:48.670 --> 05:31:49.850
Saurabh Verma: Sorry. Sorry.

2321
05:31:49.850 --> 05:31:50.450
Sunny Savita: Yeah.

2322
05:31:50.970 --> 05:31:56.549
Sunny Savita: please. Like, make a habit. See the system set up and all, it's a 1 time job. Okay? So

2323
05:31:56.880 --> 05:32:01.020
Sunny Savita: 1st understand this entire setup, and then, write a code and all everything.

2324
05:32:01.020 --> 05:32:13.469
Saurabh Verma: Okay. So while this is happening, and my next question I'll ask, can you share us that which you mentioned about the various types of rags and all of that. So in which course you are teaching that so that we can buy.

2325
05:32:13.470 --> 05:32:22.400
Sunny Savita: As of now live. Course is not there. But I created a 40 to 45 video on my Youtube channel regarding the orang. Okay, so you can refer that as of now.

2326
05:32:22.720 --> 05:32:25.999
Saurabh Verma: Okay, so on your channel, 40 rag rag related.

2327
05:32:26.000 --> 05:32:28.750
Sunny Savita: Yeah, I, I created around 45 videos over there.

2328
05:32:28.750 --> 05:32:38.659
Saurabh Verma: Okay, we'll go through that. And you someone mentioned about the your github. So what is the URL of your Github? I just need to type sunny Savita, Github.

2329
05:32:38.660 --> 05:32:42.580
Sunny Savita: Yeah, yeah. If you write over the browser now, Sunny, through the guitar, it will come automatically.

2330
05:32:43.780 --> 05:32:44.470
Saurabh Verma: Okay.

2331
05:32:49.410 --> 05:32:51.509
Sreevani Maddela: Yes, honey, I have one more doubt.

2332
05:32:51.760 --> 05:32:54.813
Sreevani Maddela: So meanwhile, I I can ask, see?

2333
05:32:55.650 --> 05:33:09.430
Sreevani Maddela: actually, we have. We have a tool where it will transfer the data from one dB to another. dB, one database to another database, or one database to any Json file or anything. There we are facing the complexity of data mapping.

2334
05:33:09.740 --> 05:33:22.730
Sreevani Maddela: So let's say I have a sap sap. dB, and let's say I have a oracle. dB, I have to. If there are 1 20 columns. I have to manually add column by column mapping. How do we automate this mapping process?

2335
05:33:23.370 --> 05:33:24.990
Sreevani Maddela: Any idea.

2336
05:33:25.870 --> 05:33:27.899
Sunny Savita: Column, wise column, metric.

2337
05:33:27.900 --> 05:33:35.969
Sreevani Maddela: Yeah, there, we have to drag and drop. Okay, this is app, some id element map with oracle id element.

2338
05:33:37.770 --> 05:33:45.100
Sunny Savita: Oh, let's say you have column. Sorry you have one schema in oracle.

2339
05:33:45.320 --> 05:33:45.670
Sreevani Maddela: Yes.

2340
05:33:45.670 --> 05:33:53.310
Sunny Savita: Second in sap, right? And those are the column level schema mapping. Right? You have to look column level. Schema mapping. Correct?

2341
05:33:53.310 --> 05:33:55.130
Sunny Savita: Yes, yes. Am I understanding correctly correct? Right?

2342
05:33:55.130 --> 05:33:56.339
Sreevani Maddela: Yes, yes, correct. Correct.

2343
05:33:56.340 --> 05:33:58.950
Sunny Savita: What you can do for that.

2344
05:34:00.410 --> 05:34:08.899
Sunny Savita: Hmm, Llm, based, you just check out something Llm based. Semantic column epic.

2345
05:34:10.850 --> 05:34:27.239
Sunny Savita: yeah, or embedding based. Also, you can do. We'll have to search that, maybe like something. After retrieving the data. Now, either you will have to use the Llm. Or maybe the embedding over there just to match that schema. Okay, the column, degrees and all.

2346
05:34:27.410 --> 05:34:31.610
Sunny Savita: Oh, so have you documented this problem somewhere?

2347
05:34:32.780 --> 05:34:38.369
Sreevani Maddela: Yeah, not a specific I have. But right now I don't have.

2348
05:34:39.500 --> 05:34:43.199
Sunny Savita: Okay. If you have, then you can share with me the document on my mail.

2349
05:34:43.200 --> 05:34:44.270
Sreevani Maddela: Okay. Okay.

2350
05:34:44.270 --> 05:34:47.789
Sunny Savita: Check that, and I'll revert back to you. Here is my id mail id.

2351
05:34:48.590 --> 05:34:49.045
Sreevani Maddela: Yes,

2352
05:34:50.130 --> 05:34:51.300
Sunny Savita: Oh!

2353
05:34:55.230 --> 05:34:55.699
Saurabh Verma: Jenny.

2354
05:34:56.170 --> 05:34:56.729
Nadeep Melb: Hi, Sunny.

2355
05:34:56.730 --> 05:34:57.350
Saurabh Verma: I hope.

2356
05:34:57.350 --> 05:35:00.609
Sunny Savita: Just a second is this working sorrow?

2357
05:35:01.060 --> 05:35:04.099
Saurabh Verma: I'm getting this error from dot env.

2358
05:35:04.610 --> 05:35:08.210
Sunny Savita: Sir, download it. No, please, please, Pip, install dot env

2359
05:35:08.800 --> 05:35:12.190
Sunny Savita: download the recon txt complete. Recon dot txt file okay.

2360
05:35:13.630 --> 05:35:16.229
Sunny Savita: download it 1st pip install dot env.

2361
05:35:19.240 --> 05:35:20.030
Sunny Savita: Yeah.

2362
05:35:24.630 --> 05:35:25.740
Saurabh Verma: Things are coming up.

2363
05:35:34.040 --> 05:35:35.149
Saurabh Verma: It takes time.

2364
05:35:36.460 --> 05:35:39.110
Sunny Savita: Yeah, it will take time. If your system is slow, then.

2365
05:35:39.450 --> 05:35:43.459
Saurabh Verma: Okay, I'll mute myself. And we can continue with our guys.

2366
05:35:43.460 --> 05:35:46.239
Sunny Savita: Anyone having any doubt guys or you can go ahead.

2367
05:35:46.240 --> 05:35:49.109
Nadeep Melb: Sunny. I'm nadeep here.

2368
05:35:49.110 --> 05:35:49.800
Sunny Savita: Yeah.

2369
05:35:49.800 --> 05:36:19.299
Nadeep Melb: Yeah, thank you so much for session. Today I have a lot of doubts, and you helped me to connect all the bits and pieces very helpful. My 1st question is regarding the metadata, you demo a example which you manually entered the metadata. Suppose we have thousands of documents. How would we find the metadata, or

2370
05:36:21.080 --> 05:36:24.110
Nadeep Melb: embed the metadata into such documents.

2371
05:36:26.880 --> 05:36:29.679
Sunny Savita: So if you have 1,000 of document. Now, see?

2372
05:36:29.800 --> 05:36:42.210
Sunny Savita: So metadata field is automatically getting created right. Whenever you are going to be load the document with any of the predefined library like pi me, Pdf. Or something like that from the length chain.

2373
05:36:42.700 --> 05:36:43.170
Nadeep Melb: Okay.

2374
05:36:43.170 --> 05:37:12.779
Sunny Savita: But let's say, if you want to add any custom field while you are going to be, create a object document. Object? Okay? So that is possible in lengthen. This document object is a like class. Okay, it's a, actually, actually, it's an enum class. Okay, so today, you will see, I created 10 manually document. Right? So if you have any number of pages, any number of data, what you can do, you can create this document manually. You can add the metadata field manually customized metadata field, and even you can store that as well.

2375
05:37:12.940 --> 05:37:14.829
Sunny Savita: Getting my point. So.

2376
05:37:14.940 --> 05:37:22.420
Nadeep Melb: Metadata is getting feel automatically is getting created. If you don't want to do that, if you want to do it from your end, you can do that also as well.

2377
05:37:23.200 --> 05:37:29.096
Nadeep Melb: Great. Thank you. And my second second question is about word embedding

2378
05:37:29.830 --> 05:37:37.590
Nadeep Melb: So in the example you use the sentence embedding, and we saw

2379
05:37:37.850 --> 05:37:44.960
Nadeep Melb: sometimes the actual embeddings are open source and proprietary embeddings are mostly

2380
05:37:45.720 --> 05:37:52.949
Nadeep Melb: called the word embedding. How would that suppose we want to use the sentence embedding? Are there

2381
05:37:53.270 --> 05:38:02.989
Nadeep Melb: such thing called sentence embedding as well proprietary or open source, or it just the word embedding. Then we use that to convert our

2382
05:38:03.410 --> 05:38:05.890
Nadeep Melb: use for the sentence embedding, as well.

2383
05:38:06.930 --> 05:38:11.869
Sunny Savita: So proprietary embeddings are it could be. You can fine tune that.

2384
05:38:12.020 --> 05:38:16.999
Sunny Savita: Okay? You can. Fine tune the embedding model as well.

2385
05:38:17.240 --> 05:38:39.160
Sunny Savita: Right. If there is any open source model, you can directly use that. If you want to be like, configure those model in your own, like the manage environment. You can do that also, if you have any specific domain, specific requirement. Okay, regarding the embedding and all you can do that also. That is also possible. So, sir, do one thing. Search one term embedding fine tuning.

2386
05:38:39.390 --> 05:38:42.390
Sunny Savita: Okay, you can fine tune that embedding model.

2387
05:38:43.490 --> 05:38:45.379
Nadeep Melb: Okay, great. Thank you so much.

2388
05:38:45.990 --> 05:38:50.609
Nadeep Melb: And the other thing is something related to the professional.

2389
05:38:52.720 --> 05:38:53.775
Nadeep Melb: Guidance.

2390
05:38:55.030 --> 05:39:09.769
Nadeep Melb: How about the careers in AI engineer, or something related to the AI field in the area of Freelancing. What would be the roadmap if you have any idea something around that.

2391
05:39:09.770 --> 05:39:33.200
Sunny Savita: So, sir. See roadmap wise your like. The profile portfolio should be strong while you are doing a freelancing right, you might get a good project might not get. It's always a like the frustrating job which I think on my personal opinion. But if you are associated with any good organization where you have a good work. With respect to the AI, that is a fruitful, according to me. Okay?

2392
05:39:33.200 --> 05:39:44.445
Sunny Savita: And yeah. So AI, if you're working as a dedicated AI engineer. If you are taking a too much responsibility with respect to the AI thing in the organization that

2393
05:39:44.820 --> 05:40:07.709
Sunny Savita: will give you a much benefit in terms of the money. And all right, it's a good field like the as of now. Basically, it is on the peak itself, right? Everyone wants to design the I solution and all. And I think every organization is required that so both you can do all together. If you want to take up any freelancing projects side by side. You can work on that as well as you can work with a dedicated organization as well. Okay.

2394
05:40:09.010 --> 05:40:13.230
Nadeep Melb: So sorry. What was the previous one dedicated organization, and also

2395
05:40:14.400 --> 05:40:17.190
Nadeep Melb: do the freelancing. You said to.

2396
05:40:19.220 --> 05:40:20.380
Sunny Savita: Yeah, correct.

2397
05:40:21.180 --> 05:40:23.069
Nadeep Melb: Okay, cool. Thank you so much.

2398
05:40:23.590 --> 05:40:24.250
Sunny Savita: Thank you so much.

2399
05:40:26.290 --> 05:40:30.460
Sunny Savita: Okay, so guys, any doubt, any more doubt? Or should I close the session?

2400
05:40:33.880 --> 05:40:37.869
Sunny Savita: I'm open for the doubt if anyone having any doubt. Please go ahead.

2401
05:40:52.470 --> 05:40:54.329
MainBhartiya: Yeah, sunny, you would hear me.

2402
05:40:54.480 --> 05:40:55.539
Sunny Savita: Yeah, I can hear you.

2403
05:40:55.752 --> 05:40:59.787
MainBhartiya: Let me try to share it once more, if I can, you know. Can you please share me that?

2404
05:41:00.900 --> 05:41:01.839
Sunny Savita: Who is there?

2405
05:41:02.060 --> 05:41:03.520
MainBhartiya: Sanjeev. One second.

2406
05:41:04.990 --> 05:41:05.700
Sunny Savita: Okay.

2407
05:41:06.113 --> 05:41:06.940
MainBhartiya: Correct notice.

2408
05:41:07.100 --> 05:41:08.789
Sunny Savita: Saurabh, are you there, Saurabh?

2409
05:41:09.890 --> 05:41:14.279
MainBhartiya: Okay. So here you're able to see my screen right?

2410
05:41:17.095 --> 05:41:19.350
Sunny Savita: So no, I cannot see that.

2411
05:41:19.910 --> 05:41:20.770
MainBhartiya: That's going.

2412
05:41:23.580 --> 05:41:25.070
MainBhartiya: Okay, no problem.

2413
05:41:27.890 --> 05:41:31.209
Sunny Savita: Guys, you can mention your doubt in the chat as well. Okay.

2414
05:41:38.700 --> 05:41:39.809
MainBhartiya: Are you? No.

2415
05:41:40.540 --> 05:41:42.390
Sunny Savita: No, I cannot see it, sir.

2416
05:41:42.590 --> 05:41:48.530
Sunny Savita: Anyone can see the screen of this. No, no, right, I'm not able to see.

2417
05:41:49.930 --> 05:41:50.550
Sunny Savita: Oh.

2418
05:41:54.430 --> 05:41:55.150
MainBhartiya: Join.

2419
05:41:57.730 --> 05:42:03.229
Sunny Savita: No, Sanjay, you will have to maybe check again. I think some issue is from your end. Only

2420
05:42:11.610 --> 05:42:16.899
Sunny Savita: okay, anyone having any doubt, whoever has raised the hand palao, and around.

2421
05:42:17.290 --> 05:42:19.280
Pallab Neogi: Hey? Hey? Sunny? One question.

2422
05:42:19.280 --> 05:42:20.080
Sunny Savita: Yeah. Apollo.

2423
05:42:20.494 --> 05:42:25.049
Pallab Neogi: What is the difference between cosine search and similarity? Search.

2424
05:42:25.990 --> 05:42:33.439
Sunny Savita: Cosine search is a type of the similar type of the similarity. Search. Okay, so similarty. For the similarity search, we use the cosine formula.

2425
05:42:34.200 --> 05:42:36.186
Pallab Neogi: Oh, both are same in the sense

2426
05:42:36.470 --> 05:42:44.500
Sunny Savita: Yeah, yeah, cosine, similar cosines. Similarity. Actually, it's a way of achieving the similarity search. Okay, it's a way of doing a similarity search.

2427
05:42:45.170 --> 05:42:48.289
Pallab Neogi: Okay, yeah, okay, got it. Thank you.

2428
05:42:48.750 --> 05:42:49.260
Sunny Savita: Yeah.

2429
05:42:49.630 --> 05:42:50.230
chandraprabha Arun: Hello!

2430
05:42:50.510 --> 05:42:51.130
chandraprabha Arun: Excuse me.

2431
05:42:51.130 --> 05:42:55.069
Sunny Savita: Oh, okay, hello. I don't follow. Anyone is having any doubt.

2432
05:42:57.810 --> 05:42:58.820
chandraprabha Arun: Yeah, I have.

2433
05:42:59.240 --> 05:43:02.270
Sunny Savita: Yeah, she can't. Yeah, yeah. Please go ahead with the doubt.

2434
05:43:04.500 --> 05:43:04.990
Srikanth: Hello!

2435
05:43:06.735 --> 05:43:09.100
Sunny Savita: Just a second. Chandra! Prabha, are you there?

2436
05:43:10.500 --> 05:43:12.119
chandraprabha Arun: Yes, yes, I'm speaking.

2437
05:43:12.520 --> 05:43:13.310
chandraprabha Arun: Good evening.

2438
05:43:13.310 --> 05:43:15.440
Sunny Savita: Okay, Shikant, please go ahead with the dog.

2439
05:43:15.840 --> 05:43:26.489
Srikanth: Hey? Thanks, Sunny, for giving me opportunity Sunny about. I'm working on a specific use case related to Graphql schema.

2440
05:43:26.740 --> 05:43:32.419
Srikanth: And is there any day better library to validate, that, to make sure to

2441
05:43:32.540 --> 05:43:38.290
Srikanth: have a hallucination fee in natural language, fix to generate a graphical query.

2442
05:43:41.270 --> 05:43:43.489
Sunny Savita: Can you tell me about your use case more.

2443
05:43:44.450 --> 05:43:47.670
Srikanth: It's more of a text to generate a Graphql query.

2444
05:43:49.490 --> 05:43:52.770
Sunny Savita: Okay, you just want to validate that right?

2445
05:43:53.070 --> 05:43:55.450
Srikanth: Yeah, because most of the things from.

2446
05:43:55.450 --> 05:44:04.700
Sunny Savita: Tl is also provide, you know. Write some sort of a validation libraries. See? It's a Javascript based tool, right?

2447
05:44:05.080 --> 05:44:29.249
Sunny Savita: So you can check out. Right? So yeah, yeah, if it is giving you some plugins, right? Some optional plugin in the Vs code itself. Okay, just to check out the basically, the hallucination and all. Okay, I'm not sure. Basically, I'll have to check that because I haven't worked with the Graphql. I haven't entered the Javascript so far. So that's why.

2448
05:44:31.600 --> 05:44:33.000
Srikanth: Oh, okay. Yeah.

2449
05:44:33.760 --> 05:44:44.599
Sunny Savita: But if you will check now with the Graphql See Graphql itself will provide you that to validate against the schema and all whatever you have. Okay, whatever, basically, you want to validate.

2450
05:44:45.190 --> 05:44:48.919
Srikanth: No, it's not about a graphical schema when you want to build a use case

2451
05:44:49.653 --> 05:45:03.440
Srikanth: using Llms for natural language text to generate a graphical query on top of that, if you want to generate a data, so you need to generate a optimal schema with respect to natural language portion, right? And how.

2452
05:45:03.440 --> 05:45:05.589
Sunny Savita: To validate the end output. Is it.

2453
05:45:06.150 --> 05:45:09.069
Srikanth: Yes, and output schema to generate a graph.

2454
05:45:10.160 --> 05:45:16.261
Sunny Savita: So in that case I think you required some ground rules. Maybe so, if I'm not wrong.

2455
05:45:16.850 --> 05:45:25.909
Sunny Savita: just do one thing, check out with the Ragas framework it. Maybe it can help you. Okay, with respect, some matrixes and all. And the way, basically, how to evaluate a rag. Okay.

2456
05:45:27.320 --> 05:45:30.570
Srikanth: Okay, sure. Thank you.

2457
05:45:33.650 --> 05:45:37.780
Sunny Savita: Okay, Shrikant is done. No, Paul, love is also done.

2458
05:45:38.570 --> 05:45:40.859
Sunny Savita: RAM Jadav, are you there?

2459
05:45:40.860 --> 05:45:45.979
MainBhartiya: Just keep me on. I'm trying to do. See how to screen share. Please give me some time, please.

2460
05:45:45.980 --> 05:45:47.080
Sunny Savita: Yeah, I kept you there on.

2461
05:45:47.080 --> 05:45:47.740
MainBhartiya: Yeah. Please. Please.

2462
05:45:48.061 --> 05:45:49.989
Sunny Savita: You're arm, Jadha! What's your doubt?

2463
05:45:49.990 --> 05:46:01.000
Ram jadhav: Hey, Hi, Sunny! Thanks for the opportunity to ask the question, and thanks for all the discussions it is it will help definitely to everyone.

2464
05:46:01.526 --> 05:46:11.290
Ram jadhav: Not specific question. Actually, I already started working with this generative AI from last 2 years I'm working with some of the drag

2465
05:46:11.946 --> 05:46:17.670
Ram jadhav: project. So here are a lot of challenges, while creating a

2466
05:46:18.220 --> 05:46:25.949
Ram jadhav: that chunking out of Pdf, as well. Right? The documents right? Which we gonna do extra

2467
05:46:26.320 --> 05:46:34.180
Ram jadhav: answers, so those will be sometime complex. It might have tables or graphs, charts.

2468
05:46:34.750 --> 05:46:38.019
Ram jadhav: and suppose, like a bank summarization

2469
05:46:38.160 --> 05:46:55.890
Ram jadhav: or bank summary report of whole year, and we want to find out some statistics out of it as per our convenience, like in the terminology which bank specifically have that documents we want answers in that format. Only.

2470
05:46:56.350 --> 05:47:00.429
Ram jadhav: So lot of customization is required right while doing chunking.

2471
05:47:01.250 --> 05:47:03.040
Sunny Savita: Hmm, correct.

2472
05:47:04.680 --> 05:47:14.969
Ram jadhav: Because straightforward. It's not that much easier. Right? If suppose my 50 pages of document is that Quarterly report or year end report.

2473
05:47:15.270 --> 05:47:17.910
Sunny Savita: No, see, that's what I'm saying now, sir, always

2474
05:47:18.090 --> 05:47:30.329
Sunny Savita: custom solution, like you will have to like, create. Okay? So it's not like very hard to rely on some inbuilt methods in a real time, which I felt.

2475
05:47:30.480 --> 05:47:46.239
Sunny Savita: So if you have a complex documented structure, if you want to do the chunking on a very granular level. Right? So you will have to find out the semantic meaning of each and every section. Maybe you'll have to do the semantic chunking, or some custom chunking right.

2476
05:47:46.240 --> 05:48:03.229
Sunny Savita: If you have a domain, specific language and document, you will have to think according to that as well. So again, I'm saying, sir, it is a very subjective thing. Okay, you will have to think on an advanced level, on an adaptive level right? And the context of your chunking, the cementing, chunking, or the custom chunking there you will have to focus. Got it.

2477
05:48:06.490 --> 05:48:07.680
Ram jadhav: Yeah, yeah, okay. Okay.

2478
05:48:07.680 --> 05:48:34.420
Sunny Savita: Yeah. So see, I can tell you a couple of framework which you can evaluate for the better extraction and the better this chunking technique. I think. So. You should focus on the Langraft and the Lama Index. Okay, this will give you the both the good understanding. So you can look into the Pdf lumber. Okay, you can look at the Pi Mu, Pdf, you can check with the Pdf minors on a structure right? So this library basically give you the comprehensive functionality to extract out a data. Okay?

2479
05:48:34.420 --> 05:49:00.399
Sunny Savita: And then you can divide into the segment directly there itself, based on the key point, like summary whatever like point, whatever like headings and all, is there. Right, title, table, bullet point, citations. You can segregate the data itself, even based on the metadata and all. Okay. So explore this like the the documentation and all of this particular, the Pdf mining and all right.

2480
05:49:00.400 --> 05:49:09.540
Sunny Savita: And then on top of it, basically, if chunking is required, then do it, otherwise your work will be done by this document itself. If they are segregating your data in a better way. Okay.

2481
05:49:10.220 --> 05:49:16.399
Ram jadhav: Yeah, sure. So actually, I want to start it developing. So going forward if any questions we will

2482
05:49:16.510 --> 05:49:19.280
Ram jadhav: consider like so we will discuss.

2483
05:49:19.770 --> 05:49:20.650
Sunny Savita: Yeah, sure.

2484
05:49:20.650 --> 05:49:25.550
Ram jadhav: Or will start as a real time project for my for my practical hands on.

2485
05:49:26.180 --> 05:49:27.350
Sunny Savita: Yeah, yeah, sure.

2486
05:49:27.640 --> 05:49:28.789
Ram jadhav: Yeah, sure. Thank you.

2487
05:49:29.030 --> 05:49:29.729
Sunny Savita: Thank you.

2488
05:49:32.300 --> 05:49:41.410
Sunny Savita: Oh, okay, I think I clarify. The doubt of the ROM follow up is also done.

2489
05:49:42.360 --> 05:49:44.280
Sunny Savita: Shivani is also done.

2490
05:49:46.980 --> 05:49:53.979
Sunny Savita: Chandra Prabhaw guys. If you don't have any doubt, please lower your hand. Okay.

2491
05:49:53.980 --> 05:49:55.050
Pratap: Hey? Sunny, yeah.

2492
05:49:55.050 --> 05:49:56.829
Sunny Savita: So it's not yeah. Pratap.

2493
05:49:57.050 --> 05:50:02.830
Pratap: Yeah, after I did that. One dot 7, 4. That says CPU, one.

2494
05:50:03.170 --> 05:50:07.289
Sunny Savita: Now I'm getting that. It is. Can you please share my screen for a second?

2495
05:50:09.700 --> 05:50:13.059
Pratap: Actually, I cannot see the screen share yet. Now I got it.

2496
05:50:13.920 --> 05:50:16.029
chandraprabha Arun: Simultaneously. Can I share my screen also?

2497
05:50:16.030 --> 05:50:18.690
Sunny Savita: Yeah, around. What's your doubt? Chandarprava? Around.

2498
05:50:18.970 --> 05:50:23.359
chandraprabha Arun: Yeah, yeah, correct. Can I share my screen? And the option is now.

2499
05:50:23.360 --> 05:50:26.180
Sunny Savita: Yeah, yeah, you can share the screen and adding a panelist, okay.

2500
05:50:26.180 --> 05:50:26.710
chandraprabha Arun: Okay.

2501
05:50:26.710 --> 05:50:28.600
Pratap: Yeah, sunny. Can you see my screen? Please?

2502
05:50:28.600 --> 05:50:29.930
Sunny Savita: Yeah, I can see.

2503
05:50:29.930 --> 05:50:33.779
Pratap: So after that, like, I'm getting this error numpy error.

2504
05:50:35.960 --> 05:50:37.720
Sunny Savita: Install the number, you know. Then.

2505
05:50:38.220 --> 05:50:42.369
Pratap: No, it's saying like I have to. I don't know. I'm checking. I have 2 dot 2 dot.

2506
05:50:42.370 --> 05:50:45.159
Sunny Savita: Which python version you have used for creating an environment.

2507
05:50:45.160 --> 05:50:46.200
Pratap: 3, dot, 10.

2508
05:50:46.710 --> 05:51:14.299
Sunny Savita: 3.1 0. Yeah, use some other version, 3.1 1 or something. Maybe it's a dependency issue. Don't use the latest version of the library use some degradation. Okay? In the version itself I shown you the pipe. I, page, now use a different version. Okay, of this, because I can clearly see, your environment is having some issue means the environment which you are creating with the pip and python. Okay, it is not supporting the latest like library and all. It's just a version, mismatch and all. Okay, you will have to check it out there.

2509
05:51:15.210 --> 05:51:15.550
Pratap: Okay.

2510
05:51:17.210 --> 05:51:20.180
Sunny Savita: Yeah, Arun, please share your screen. What's your doubt?

2511
05:51:20.180 --> 05:51:23.849
chandraprabha Arun: Yeah, yeah. Yes. Can you see my screen?

2512
05:51:24.658 --> 05:51:25.899
Sunny Savita: Yes, I can see it.

2513
05:51:27.200 --> 05:51:35.689
chandraprabha Arun: Okay, actually here. See in the open. Api. Maybe this is due to I did not purchase. Is that the reason? Can you please see that error.

2514
05:51:37.040 --> 05:51:40.380
Sunny Savita: What is the agentic, ma'am? It's a office system.

2515
05:51:41.400 --> 05:51:43.839
chandraprabha Arun: No, this is my own system, not of the system.

2516
05:51:43.840 --> 05:51:46.339
Sunny Savita: Which key you are going to be called here.

2517
05:51:46.850 --> 05:51:54.059
chandraprabha Arun: Here. This is actually last week class. So, yeah, regarding that agent Ki.

2518
05:51:54.060 --> 05:52:00.780
Sunny Savita: Do one thing 1st of all, save all the file. Just click on the file, the above header header. You can see auto save keep an auto save.

2519
05:52:01.080 --> 05:52:02.540
chandraprabha Arun: Autosave autosave.

2520
05:52:04.706 --> 05:52:07.699
chandraprabha Arun: Where is.

2521
05:52:07.700 --> 05:52:14.640
Sunny Savita: Now do one thing, restart the kernel of this file. Ipy, Nb. File restart the kernel

2522
05:52:15.000 --> 05:52:17.160
Sunny Savita: restart. Is there no, ma'am? See.

2523
05:52:17.160 --> 05:52:17.930
chandraprabha Arun: Please tell.

2524
05:52:17.930 --> 05:52:24.369
Sunny Savita: Not not here, not here, or the file itself. Restart option is there?

2525
05:52:25.100 --> 05:52:27.080
Sunny Savita: Run all restart, ma'am. See.

2526
05:52:27.080 --> 05:52:27.890
chandraprabha Arun: Okay.

2527
05:52:29.920 --> 05:52:36.049
Sunny Savita: Not here, ma'am, not here. See Code Markdown, run all restart all the options are there right.

2528
05:52:41.960 --> 05:52:44.230
chandraprabha Arun: Go to yeah here.

2529
05:52:48.650 --> 05:52:50.960
chandraprabha Arun: Sorry I didn't see that.

2530
05:52:52.850 --> 05:53:00.359
Sunny Savita: Can you see your environment variable? OS, dot environment, can you see those variable OS, dot? Yeah, above that, above that restart, is there?

2531
05:53:03.090 --> 05:53:08.590
Sunny Savita: Yeah, no, yeah, ma'am. See, you have written a code. OS, dot environment, something like this, right?

2532
05:53:13.290 --> 05:53:14.480
chandraprabha Arun: Yes.

2533
05:53:14.480 --> 05:53:18.440
Srikanth: So left hand, do a control. F and type restart.

2534
05:53:21.810 --> 05:53:22.230
chandraprabha Arun: Okay.

2535
05:53:26.630 --> 05:53:30.179
chandraprabha Arun: actually, it will. Showing, yeah. Here, please join.

2536
05:53:30.180 --> 05:53:30.560
Srikanth: In.

2537
05:53:30.560 --> 05:53:31.670
chandraprabha Arun: All 3 started.

2538
05:53:33.770 --> 05:53:37.490
Sunny Savita: Yeah, did you restart? Right? Sorry I got lost my power. Yeah.

2539
05:53:37.600 --> 05:53:44.749
Sunny Savita: Now run it again. This cell from 1st cell itself, and show me your Api key dot inside dot envy.

2540
05:53:45.450 --> 05:53:52.750
chandraprabha Arun: Yeah, there is. Actually, I did not purchase the key for a open Api, and others are freely available keys.

2541
05:53:53.100 --> 05:54:05.109
Sunny Savita: Oh, now run it again, and please delete your open Api key after the session. Then create a new one. Okay, otherwise someone will check. Use it when they are checking a recording. Okay, now on it. Turn the 1st cell.

2542
05:54:05.750 --> 05:54:07.830
Sunny Savita: ma'am. Run the 1st step, please. Cooperate. Okay.

2543
05:54:07.990 --> 05:54:09.190
chandraprabha Arun: Yes.

2544
05:54:09.190 --> 05:54:10.240
Sunny Savita: Second also.

2545
05:54:11.260 --> 05:54:15.679
Sunny Savita: Langchain Api. Key. Yeah, wait, wait, ma'am, slow, slow, ma'am. Please.

2546
05:54:16.290 --> 05:54:24.570
Sunny Savita: Open Api key. This is fine. Now run this one also like next cell next cell nextel.

2547
05:54:25.751 --> 05:54:28.059
Sunny Savita: This one. Now, next one.

2548
05:54:29.630 --> 05:54:33.750
Sunny Savita: Yeah, you are now on it.

2549
05:54:41.590 --> 05:54:42.880
Sunny Savita: Connection, error.

2550
05:54:42.880 --> 05:54:45.179
chandraprabha Arun: This was working yesterday, yesterday.

2551
05:54:45.180 --> 05:54:48.840
Sunny Savita: See, ma'am, your exceed your limit. Okay, check with your opening code.

2552
05:54:50.140 --> 05:54:53.619
chandraprabha Arun: Yeah, because they, I need to purchase it right?

2553
05:54:53.620 --> 05:54:55.190
Sunny Savita: Yeah, yeah, correct.

2554
05:54:56.840 --> 05:55:00.820
Sunny Savita: Okay, ma'am, check with the quota. I think it will be working right while you are adding the credential.

2555
05:55:00.820 --> 05:55:01.680
chandraprabha Arun: Okay.

2556
05:55:02.270 --> 05:55:02.980
Sunny Savita: Yeah, otherwise.

2557
05:55:02.980 --> 05:55:04.180
chandraprabha Arun: Once I.

2558
05:55:04.470 --> 05:55:11.770
Sunny Savita: No, no, do one thing. If you want to access the free model, you can configure the grok as well. See, Grok, you, configure not just use the Grok model. Okay?

2559
05:55:13.320 --> 05:55:16.480
chandraprabha Arun: Okay, okay, you don't need to use the open Api key.

2560
05:55:16.480 --> 05:55:18.589
Sunny Savita: Run this one, run this one rock, one as well.

2561
05:55:21.970 --> 05:55:24.560
chandraprabha Arun: Yeah, this is my Mr. Derrick.

2562
05:55:25.010 --> 05:55:34.090
chandraprabha Arun: but for only the opening, because we were, we are checking each and every keys right broke open a way

2563
05:55:34.570 --> 05:55:41.130
chandraprabha Arun: like 10 or so anyone we can use. That's right.

2564
05:55:41.720 --> 05:55:44.440
Sunny Savita: Yeah, anyone, any key you can use

2565
05:55:44.920 --> 05:55:53.060
Sunny Savita: here. You are getting a just check, ma'am, with your Api key again. Okay, I think that's a major issue. Just regenerate all the Api key and keep it over there. Okay.

2566
05:55:53.650 --> 05:55:55.340
chandraprabha Arun: Okay. Okay. Sure. Sure.

2567
05:55:55.780 --> 05:55:56.910
Sunny Savita: Show me tomorrow that.

2568
05:55:57.840 --> 05:55:58.870
chandraprabha Arun: Okay. Fine.

2569
05:56:04.740 --> 05:56:06.870
Sunny Savita: I think I just clarify. Yes, we can't.

2570
05:56:07.160 --> 05:56:14.809
Srikanth: Yes, I mean, like Langraft, I'm trying to build a eccentric framework with our use case. So, as Langraft has.

2571
05:56:14.970 --> 05:56:27.112
Srikanth: I'll come up with Ga available platform with to build the agentic framework, and we have autozone and crew. AI and Pydantic also come up with the framework. So could you suggest like, which is

2572
05:56:27.960 --> 05:56:32.410
Srikanth: best, supportive and sustainable one to build that.

2573
05:56:34.600 --> 05:56:36.089
Sunny Savita: So Langraft is a good one.

2574
05:56:36.710 --> 05:56:37.450
Sunny Savita: Okay.

2575
05:56:37.840 --> 05:56:38.160
Srikanth: Okay.

2576
05:56:38.160 --> 05:56:41.810
Sunny Savita: If you want to do a low, level coding, go with the line graph. Otherwise, people

2577
05:56:41.810 --> 05:56:44.320
Sunny Savita: you can check with the lang flow as well. Okay.

2578
05:56:45.490 --> 05:56:48.490
Srikanth: Okay? So it's not autozone is not suggestible.

2579
05:56:49.415 --> 05:57:05.629
Sunny Savita: There, you will not get too much authority right? So whatever built in classes they have created on top of that, only you can do little customization. But in la graph you'll get like, too much authority. Okay, to write your call to create your low, level flow and all everything.

2580
05:57:06.860 --> 05:57:08.369
Srikanth: Okay. Okay.

2581
05:57:09.480 --> 05:57:10.849
Srikanth: Okay. Thank you.

2582
05:57:11.550 --> 05:57:17.620
Sunny Savita: Okay, thank you, guys. Bye, bye, take care. I think I clarify all the doubts. Tomorrow we'll meet on same time. Okay, thank you.
